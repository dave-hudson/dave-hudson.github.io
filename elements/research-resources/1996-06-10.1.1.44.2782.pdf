%PDF-1.3
%‚„œ”
2 0 obj
<<
/Length 6072
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-1-)Tj
/TT4 1 Tf
14.56 0 0 14.56 126 706 Tm
0.0621 Tc
0.6211 Tw
(The Log-Structured Merge-Tree \(LSM-Tree\))Tj
/TT6 1 Tf
12.48 0 0 12.48 210 675 Tm
0.0239 Tc
0.2386 Tw
(Patrick O'Neil)Tj
/TT2 1 Tf
9.783 0 0 9.783 292.3469 678 Tm
0 Tc
0 Tw
(1)Tj
/TT6 1 Tf
12.48 0 0 12.48 297.7034 675 Tm
0.02 Tc
0.2004 Tw
(, Edward Cheng)Tj
/TT2 1 Tf
9.783 0 0 9.783 395.6982 678 Tm
0 Tc
0 Tw
(2)Tj
/TT6 1 Tf
12.48 0 0 12.48 200 660 Tm
0.0364 Tc
0.364 Tw
(Dieter Gawlick)Tj
/TT2 1 Tf
9.783 0 0 9.783 291.3426 663 Tm
0 Tc
0 Tw
(3)Tj
/TT6 1 Tf
12.48 0 0 12.48 296.8971 660 Tm
0.0272 Tc
0.2725 Tw
(, Elizabeth O'Neil)Tj
9.36 0 0 9.36 405.1477 663 Tm
0 Tc
0 Tw
(1)Tj
12.48 0 0 12.48 201 646 Tm
0.0268 Tc
0.2687 Tw
(To be published: Acta Informatica)Tj
/TT4 1 Tf
-10.3365 -2.4038 TD
0.0715 Tc
0 Tw
(ABSTRACT.)Tj
/TT6 1 Tf
10.4 0 0 10.4 152.1292 616 Tm
0.0212 Tc
0.2125 Tw
[(  High-performance transaction system applications typically insert rows in a)]TJ
-7.7047 -1.25 TD
0.0106 Tc
0.1056 Tw
[(History table to provide an activity trace;  at the same time the transaction system generates log)]TJ
0 -1.1538 TD
0.0131 Tc
0.1307 Tw
[(records for purposes of system recovery.  Both types of generated information can benefit from)]TJ
T*
0.021 Tc
0.2093 Tw
[(efficient indexing.  An example in a well-known setting is the TPC-A benchmark application,)]TJ
T*
0.0205 Tc
0.2046 Tw
(modified to support efficient queries on the History for account activity for specific accounts.)Tj
T*
0.0215 Tc
0.2149 Tw
[(This requires an index by account-id on the fast-growing History table.  Unfortunately, stan-)]TJ
T*
0.0177 Tc
0.1772 Tw
(dard disk-based index structures such as the B-tree will effectively double the I/O cost of the)Tj
T*
0.0118 Tc
0.1183 Tw
(transaction to maintain an index such as this in real time, increasing the total system cost up to)Tj
T*
0.0152 Tc
0.1523 Tw
[(fifty percent.  Clearly a method for maintaining a real-time index at low cost is desirable.  The)]TJ
T*
0.0313 Tc
0.3134 Tw
(Log-Structured Merge-tree \(LSM-tree\) is a disk-based data structure designed to provide)Tj
T*
0.0222 Tc
0.2224 Tw
(low-cost indexing for a file experiencing a high rate of record inserts \(and deletes\) over an)Tj
T*
0.0122 Tc
0.1222 Tw
[(extended period.  The LSM-tree uses an algorithm that defers and batches index changes, cas-)]TJ
T*
0.0065 Tc
0.0651 Tw
(cading the changes from a memory-based component through one or more disk components in an)Tj
T*
0.0209 Tc
0.2081 Tw
[(efficient manner reminiscent of merge sort.  During this process all index values are contin-)]TJ
T*
0.029 Tc
0.2908 Tw
(uously accessible to retrievals \(aside from very short locking periods\), either through the)Tj
T*
0.0102 Tc
0.1015 Tw
[(memory component or one of the disk components.  The algorithm has greatly reduced disk arm)]TJ
T*
0.0167 Tc
0.1672 Tw
(movements compared to a traditional access methods such as B-trees, and will improve cost-)Tj
T*
0.0281 Tc
0.2803 Tw
(performance in domains where disk arm costs for inserts with traditional access methods)Tj
T*
0.0164 Tc
0.1645 Tw
[(overwhelm storage media costs.  The LSM-tree approach also generalizes to operations other)]TJ
T*
0.0166 Tc
0.1667 Tw
[(than insert and delete.  However, indexed finds requiring immediate response will lose I/O ef-)]TJ
T*
0.0153 Tc
0.153 Tw
(ficiency in some cases, so the LSM-tree is most useful in applications where index inserts are)Tj
T*
0.019 Tc
0.1902 Tw
[(more common than finds that retrieve the entries.  This seems to be a common property for)]TJ
T*
0.0127 Tc
0.1265 Tw
[(History tables and log files, for example.  The conclusions of Section 6 compare the hybrid use)]TJ
T*
0.012 Tc
0.12 Tw
(of memory and disk components in the LSM-tree access method with the commonly understood)Tj
T*
0.0071 Tc
0.0707 Tw
(advantage of the hybrid method to buffer disk pages in memory.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 301 Tm
0.0679 Tc
0.6797 Tw
(1. Introduction)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 276 Tm
0.0154 Tc
0.1539 Tw
(As long-lived transactions in activity flow management systems become commercially available)Tj
T*
0.029 Tc
0.2906 Tw
(\([10], [11], [12], [20], [24], [27]\), there will be increased need to provide indexed access)Tj
T*
0.0155 Tc
0.1545 Tw
[(to transactional log records.  Traditionally, transactional logging has focused on aborts and re-)]TJ
T*
0.0183 Tc
0.1828 Tw
(covery, and has required the system to refer back to a relatively short-term history in normal)Tj
T*
0.0205 Tc
0.2044 Tw
(processing with occasional transaction rollback, while recovery was performed using batched)Tj
T*
0.0164 Tc
0.1643 Tw
[(sequential reads.  However, as systems take on responsibility for more complex activities, the)]TJ
T*
0.0143 Tc
0.1435 Tw
(duration and number of events that make up a single long-lived activity will increase to a point)Tj
T*
0.0113 Tc
0.1136 Tw
[(where there is sometimes a need to review past transactional steps in real time to remind users)]TJ
T*
0.0093 Tc
0.0933 Tw
[(of what has been accomplished.  At the same time, the total number of active events known to a)]TJ
T*
0.0236 Tc
0.2352 Tw
(system will increase to the point where memory-resident data structures now used to keep)Tj
T*
0.0157 Tc
0.1565 Tw
(track of active logs are no longer feasible, notwithstanding the continuing decrease in memory)Tj
T*
0.0058 Tc
0.0578 Tw
[(cost to be expected.  The need to answer queries about a vast number of past activity logs implies)]TJ
T*
0.0068 Tc
0.0688 Tw
(that indexed log access will become more and more important.)Tj
ET
1 i 
72 120 143.24 -0.24 re
f
BT
/TT2 1 Tf
9.783 0 0 9.783 72 105 Tm
0 Tc
0 Tw
(1)Tj
0.5744 -0.3067 TD
0.0289 Tc
0.2896 Tw
(Dept. of Math & C.S, UMass/Boston, Boston, MA 02125-3393, {poneil | eoneil}@cs.umb.edu)Tj
-0.5744 -1.1244 TD
0 Tc
0 Tw
(2)Tj
0.5862 -0.3067 TD
0.0382 Tc
0.3819 Tw
(Digital Equipment Corporation, Palo Alto, CA 94301, edwardc@pa.dec.com)Tj
-0.5862 -1.1244 TD
0 Tc
0 Tw
(3)Tj
0.5752 -0.3067 TD
0.0374 Tc
0.3736 Tw
(Oracle Corporation, Redwood Shores, CA, dgawlick@us.oracle.com)Tj
ET
endstream
endobj
3 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
10 0 obj
<<
/Length 6167
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-2-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 698 Tm
0.0208 Tc
0.2074 Tw
(Even with current transactional systems there is clear value in providing indexing to support)Tj
0 -1.1538 TD
0.0282 Tc
0.2813 Tw
[(queries on history tables with high insert volume.  Networking, electronic mail, and other)]TJ
T*
0.0113 Tc
0.1132 Tw
[(nearly-transactional systems produce huge logs often to the detriment of their host systems.  To)]TJ
T*
0.0136 Tc
0.1356 Tw
(start from a concrete and well-known example, we explore a modified TPC-A benchmark in the)Tj
T*
0.0141 Tc
0.1414 Tw
[(following Examples 1.1 and 1.2.  Note that examples presented in this paper deal with specific)]TJ
T*
0.0221 Tc
0.2211 Tw
[(numeric parametric values for ease of presentation;  it is a simple task to generalize these)]TJ
T*
0.0144 Tc
0.1442 Tw
[(results.  Note too that although both history tables and logs involve time-series data, the index)]TJ
T*
0.015 Tc
0.1503 Tw
[(entries of the LSM-Tree are not assumed to have indentical temporal key order.  The only as-)]TJ
T*
0.0145 Tc
0.1453 Tw
(sumption for improved efficiency is high update rates compared to retrieval rates.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0373 Tc
0.3731 Tw
(The Five Minute Rule)Tj
/TT6 1 Tf
T*
0.0123 Tc
0.1226 Tw
[(The following two examples both depend on the Five Minute Rule [13].  This basic result states)]TJ
0 -1.1538 TD
0.0107 Tc
0.1066 Tw
(that we can reduce system costs by purchasing memory buffer space to keep pages in memory,)Tj
T*
0.0038 Tc
0.0382 Tw
[(thus avoiding disk I/O, when page reference frequency exceeds about once every 60 seconds.  The)]TJ
T*
0.0185 Tc
0.1842 Tw
(time period of 60 seconds is approximate, a ratio between the amortized cost for a disk arm)Tj
T*
0.0099 Tc
0.0993 Tw
(providing one I/O per second and memory cost to buffer a disk page of 4 KBytes amortized over)Tj
T*
0.0038 Tc
0.0385 Tw
[(one second.   In terms of the notation of section 3, the ratio is  COST)]TJ
9.36 0 0 9.36 397.4496 492 Tm
0 Tc
0 Tw
(P)Tj
10.4 0 0 10.4 403.8757 494 Tm
0.0179 Tc
(/COST)Tj
9.36 0 0 9.36 436.5846 492 Tm
0.0027 Tc
(m )Tj
10.4 0 0 10.4 447.2851 494 Tm
0.0053 Tc
0.0528 Tw
(divided by the page)Tj
-36.0851 -1.25 TD
0.0208 Tc
0.2074 Tw
[(size in Mbytes.  Here we are simply trading off disk accesses for memory buffers while the)]TJ
0 -1.1538 TD
0.0107 Tc
0.1069 Tw
[(tradeoff gives economic gain.  Note that the 60 second time period is expected to grow over the)]TJ
T*
0.0111 Tc
0.1105 Tw
(years as memory prices come down faster than disk arms. The reason it is smaller now in 1995)Tj
T*
0.024 Tc
0.2401 Tw
(than when defined in 1987 when it was five minutes, is partly technical \(different buffering)Tj
T*
0.2398 Tw
(assumptions\) and partly due to the intervening introduction of extremely inexpensive mass-)Tj
T*
0.0047 Tc
0.0474 Tw
(produced disks.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0306 Tc
0.3054 Tw
(Example 1.1.)Tj
/TT6 1 Tf
6.7314 0 TD
0.0207 Tc
0.2065 Tw
[(  Consider the multi-user application envisioned by the TPC-A benchmark [26])]TJ
-6.7314 -1.1538 TD
0.0158 Tc
0.1579 Tw
(running 1000 transactions per second \(this rate can be scaled, but we will consider only 1000)Tj
T*
0.0147 Tc
0.147 Tw
[(TPS in what follows\).  Each transaction updates a column value, withdrawing an amount Delta)]TJ
T*
0.0199 Tc
0.1989 Tw
(from a Balance column, in a randomly chosen row containing 100 bytes, from each of three)Tj
T*
0.0169 Tc
0.1693 Tw
[(tables:  the Branch table, with 1000 rows, the Teller table with 10,000 rows, and the Account)]TJ
T*
0.0229 Tc
0.2285 Tw
[(table, with 100,000,000 rows;  the transaction then writes a 50 byte row to a History table)]TJ
T*
0.0188 Tc
0.1884 Tw
[(before committing, with columns:  Account-ID, Branch-ID, Teller-ID, Delta, and Timestamp.)]TJ
0 -2.3077 TD
0.0112 Tc
0.1117 Tw
(Accepted calculations projecting disk and memory costs shows that Account table pages will not)Tj
0 -1.1538 TD
0.0169 Tc
0.1693 Tw
(be memory resident for a number of years to come \(see reference [6]\), while the Branch and)Tj
T*
0.0132 Tc
0.1314 Tw
[(Teller tables should be entirely memory resident now.   Under the assumptions given, repeated)]TJ
T*
0.0125 Tc
0.1247 Tw
(references to the same disk page of the Accounts table will be about 2,500 seconds apart, well)Tj
T*
0.0226 Tc
0.226 Tw
[(below the frequency needed to justify buffer residence by the Five Minute rule.  Now each)]TJ
T*
0.0106 Tc
0.1059 Tw
(transaction requires about two disk I/Os, one to read in the desired Account record \(we treat the)Tj
T*
0.0128 Tc
0.1275 Tw
(rare case where the page accessed is already in buffer as insignificant\), and one to write out a)Tj
T*
0.0193 Tc
0.1934 Tw
(prior dirty Account page to make space in buffers for a read \(necessary for steady-state be-)Tj
T*
0.0131 Tc
0.1311 Tw
[(havior\).  Thus 1000 TPS will correspond to about 2000 I/Os per second.  This requires 80 disk)]TJ
T*
0.0179 Tc
0.179 Tw
[(arms \(actuators\) at the nominal rate of 25 I/Os per disk-arm-second assumed in [13].  In the)]TJ
T*
0.0224 Tc
0.2244 Tw
(8 years since then \(1987 to 1995\) the rate has climbed by less than 10%/year so that the)Tj
T*
0.0146 Tc
0.1458 Tw
(nominal rate is now about 40 I/Os per second, or 50 disk arms for 2000 I/Os per second. The)Tj
T*
0.0081 Tc
0.0804 Tw
(cost of disk for the TPC application was calculated to be about half the total cost of the system in)Tj
T*
0.0133 Tc
0.1329 Tw
[([6], although it is somewhat less on IBM mainframe systems.  However, the cost for supporting)]TJ
T*
0.0091 Tc
0.0914 Tw
(I/O is clearly a growing component of the total system cost as the cost of both memory and CPU)Tj
T*
0.0148 Tc
0.1478 Tw
(drop faster than disk.)Tj
/TT8 1 Tf
10 0 0 10 177.1181 121 Tm
0 Tc
0 Tw
()Tj
/TT4 1 Tf
10.4 0 0 10.4 72 97 Tm
0.0526 Tc
0.5258 Tw
(Example 1.2.)Tj
/TT6 1 Tf
7.216 0 TD
0.0288 Tc
0.2885 Tw
[(  Now we consider an index on the high insert volume History table, and)]TJ
-7.216 -1.1538 TD
0.0181 Tc
0.181 Tw
(demonstrate that such an index essentially )Tj
/TT10 1 Tf
21.0414 0 TD
0.0487 Tc
0 Tw
(doubles)Tj
/TT6 1 Tf
3.8435 0 TD
0.0136 Tc
0.1351 Tw
[( the disk cost for the TPC application.  An)]TJ
ET
endstream
endobj
11 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
15 0 obj
<<
/Length 5877
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-3-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0317 Tc
0.317 Tw
(index on "Account-ID concatenated with Timestamp" \(Acct-ID||Timestamp\) for the History)Tj
0 -1.1538 TD
0.0127 Tc
0.1273 Tw
(table is crucial to support efficient queries on recent account activity such as:)Tj
0 -2.3077 TD
0.1834 Tc
0 Tw
(\(1.1\))Tj
3.4615 0 TD
0.0153 Tc
0.1532 Tw
[(Select  *  from History)]TJ
1.25 -1.1539 TD
0.0212 Tc
0.2126 Tw
(where History.Acct-ID = %custacctid)Tj
T*
0.0117 Tc
0.1174 Tw
(and History.Timestamp > %custdatetime;)Tj
-4.7115 -2.3077 TD
0.013 Tc
0.1298 Tw
(If an Acct-ID||Timestamp index is not present, such a query requires a direct search of all rows)Tj
0 -1.1538 TD
0.0113 Tc
0.1135 Tw
[(of the History table, and thus becomes impractical.  An index on Acct-ID alone provides most of)]TJ
T*
0.0144 Tc
0.1441 Tw
(the benefit, but cost considerations that follow don't change if the Timestamp is left out, so we)Tj
T*
0.0088 Tc
0.0883 Tw
[(assume here the more useful concatenated index.  What resources are required to maintain such)]TJ
T*
0.0196 Tc
0.1963 Tw
[(a secondary B-tree index in real time?  We see that the entries in the B-tree are generated)]TJ
T*
0.0142 Tc
0.1423 Tw
(1000 per second, and assuming a 20 day period of accumulation, with eight hour days and 16)Tj
T*
0.0303 Tc
0.3031 Tw
(byte index entries, this implies 576,000,000 entries on 9.2 GBytes of disk, or about 2.3)Tj
T*
0.0135 Tc
0.1343 Tw
[(million pages needed on the index leaf level, even if there is no wasted space.  Since transac-)]TJ
T*
0.0133 Tc
0.1326 Tw
(tional Acct-ID values are randomly chosen, each transaction will require at least one page read)Tj
T*
0.0165 Tc
0.1652 Tw
[(from this index, and in the steady state a page write as well.  By the Five Minute Rule these)]TJ
T*
0.0133 Tc
0.1329 Tw
(index pages will not be buffer resident \(disk page reads about 2300 seconds apart\), so all I/Os)Tj
T*
0.0103 Tc
0.1025 Tw
[(are to disk.  This addition of 2000 I/Os per second to the 2000 I/Os already needed for updating)]TJ
T*
0.0124 Tc
0.1243 Tw
(the Account table, requires a purchase of an additional 50 disk arms, doubling our disk require-)Tj
T*
0.0121 Tc
0.1216 Tw
[(ments.  The figure optimistically assumes that deletes needed to keep the log file index only 20)]TJ
T*
0.0067 Tc
0.0672 Tw
(days in length can be performed as a batch job during slack use times. )Tj
/TT8 1 Tf
10 0 0 10 414.5387 458 Tm
0 Tc
0 Tw
()Tj
/TT6 1 Tf
10.4 0 0 10.4 72 434 Tm
0.014 Tc
0.1407 Tw
(We have considered a B-tree for the Acct-ID||Timestamp index on the History file because it is)Tj
T*
0.0064 Tc
0.0645 Tw
(the most common disk-based access method used in commercial systems, and in fact no classical)Tj
T*
0.0195 Tc
0.1955 Tw
[(disk indexing structure consistently gives superior I/O cost/performance.  We will discuss the)]TJ
T*
0.0087 Tc
0.0876 Tw
[(considerations that lead us to this conclusion in Section 5.)]TJ
0 -2.3077 TD
0.0139 Tc
0.1398 Tw
(The LSM-tree access method presented in this paper enables us to perform the frequent index)Tj
0 -1.1538 TD
0.0265 Tc
0.2652 Tw
(inserts for the Account-ID||Timestamp index with much less disk arm use, therefore at an)Tj
T*
0.013 Tc
0.1294 Tw
[(order of magnitude lower cost.  The LSM-tree uses an algorithm that )]TJ
/TT10 1 Tf
32.9504 0 TD
0.0369 Tc
0 Tw
(defers)Tj
/TT6 1 Tf
3.0008 0 TD
0.0071 Tc
0.071 Tw
[( and )]TJ
/TT10 1 Tf
2.4016 0 TD
0.0399 Tc
0 Tw
(batches)Tj
/TT6 1 Tf
3.7818 0 TD
0.0142 Tc
0.142 Tw
[( index)]TJ
-42.1346 -1.1538 TD
0.0154 Tc
0.154 Tw
(changes, migrating the changes out to disk in a particularly efficient way reminiscent of merge)Tj
T*
0.0143 Tc
0.1434 Tw
[(sort.  As we shall see in Section 5, the function of )]TJ
/TT10 1 Tf
24.5471 0 TD
0.0492 Tc
0 Tw
(deferring)Tj
/TT6 1 Tf
4.3899 0 TD
0.0175 Tc
0.1746 Tw
[( index entry placement to an ulti-)]TJ
-28.9369 -1.1538 TD
0.0172 Tc
0.1726 Tw
(mate disk position is of fundamental importance, and in the general LSM-tree case there is a)Tj
T*
0.0148 Tc
0.148 Tw
[(cascaded series of such deferred placements.  The LSM-tree structure also supports other op-)]TJ
T*
0.0056 Tc
0.0561 Tw
(erations of indexing such as deletes, updates, and even )Tj
/TT10 1 Tf
25.7791 0 TD
0.008 Tc
0.0796 Tw
(long latency)Tj
/TT6 1 Tf
5.5123 0 TD
0.0055 Tc
0.0552 Tw
[( find operations with the same)]TJ
-31.2914 -1.1538 TD
0.0228 Tc
0.2276 Tw
[(deferred efficiency.  Only finds that require immediate response remain relatively costly.  A)]TJ
T*
0.0161 Tc
0.1606 Tw
(major area of effective use for the LSM-tree is in applications such as Example 1.2 where re-)Tj
T*
0.0249 Tc
0.2488 Tw
(trieval is much less frequent than insert \(most people don't ask for recent account activity)Tj
T*
0.0112 Tc
0.1124 Tw
[(nearly as often as they write a check or make a deposit\).  In such a situation, reducing the cost)]TJ
T*
0.014 Tc
0.1402 Tw
[(of index inserts is of paramount importance;  at the same time, find access is frequent enough)]TJ
T*
0.0186 Tc
0.1854 Tw
(that an index of some kind must be maintained, because a sequential search through all the)Tj
T*
0.008 Tc
0.0794 Tw
(records is out of the question.)Tj
0 -2.3077 TD
0.0175 Tc
0.1752 Tw
[(Here is the plan of the paper.  In Section 2, we introduce the two-component LSM-tree algo-)]TJ
0 -1.1538 TD
0.024 Tc
0.2402 Tw
[(rithm.  In Section 3, we analyze the performance of the LSM-tree, and motivate the multi-)]TJ
T*
0.0119 Tc
0.1195 Tw
[(component LSM-tree.  In Section 4 we sketch the concepts of concurrency and recovery for the)]TJ
T*
0.0155 Tc
0.155 Tw
[(LSM-tree.  In Section 5 we consider competing access methods and their performance for ap-)]TJ
T*
0.1534 Tw
[(plications of interest.  Section 6 contains conclusions, where we evaluate some implications of)]TJ
T*
0.0097 Tc
0.0971 Tw
(the LSM-tree, and provide a number of suggestions for extensions.)Tj
ET
endstream
endobj
16 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
18 0 obj
<<
/Length 8287
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-4-)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 708 Tm
0.0393 Tc
0.3932 Tw
[(2.  The Two Component LSM-Tree Algorithm)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 683 Tm
0.0139 Tc
0.1393 Tw
[(An LSM-tree is composed of two or more tree-like component data structures.  We deal in this)]TJ
0 -1.1538 TD
0.0172 Tc
0.1717 Tw
(Section with the simple two component case and assume in what follows that LSM-tree is in-)Tj
T*
0.0087 Tc
0.0866 Tw
[(dexing rows in a  History table as in Example 1.2.  See Figure 2.1, below.)]TJ
0 -2.3077 TD
0.0135 Tc
0.1349 Tw
(A two component LSM-tree has a smaller component which is entirely memory resident, known)Tj
0 -1.1538 TD
0.0102 Tc
0.1023 Tw
(as the C)Tj
9.36 0 0 9.36 113.7068 621 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 119.3124 623 Tm
0.0085 Tc
0.0844 Tw
[( tree \(or C)]TJ
9.36 0 0 9.36 169.7246 621 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 175.3302 623 Tm
0.0132 Tc
0.1318 Tw
[( component\), and a larger component which is resident on disk, known as)]TJ
-9.9356 -1.25 TD
0.015 Tc
0.1504 Tw
(the C)Tj
9.36 0 0 9.36 99.2014 608 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 104.898 610 Tm
0.0104 Tc
0.1036 Tw
[( tree \(or C)]TJ
9.36 0 0 9.36 156.1301 608 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 161.8267 610 Tm
0.0158 Tc
0.1574 Tw
[( component\).  Although the C)]TJ
9.36 0 0 9.36 309.8849 608 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 315.5815 610 Tm
0.0177 Tc
0.1774 Tw
[( component is disk resident, frequently refer-)]TJ
-23.4213 -1.25 TD
0.0189 Tc
0.1896 Tw
(enced page nodes in C)Tj
9.36 0 0 9.36 190.9917 595 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 196.7823 597 Tm
0.0179 Tc
0.1783 Tw
[( will remain in memory buffers as usual \(buffers not shown\), so that)]TJ
-11.9983 -1.25 TD
0.0066 Tc
0.0668 Tw
(popular high level directory nodes of C)Tj
9.36 0 0 9.36 256.3354 582 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 261.743 584 Tm
0.0062 Tc
0.0613 Tw
[( can be counted on to be memory resident.)]TJ
9.36 0 0 9.36 144 559 Tm
0.0466 Tc
0 Tw
(        C)Tj
3.3217 -0.2137 TD
0 Tc
(1)Tj
0.6272 0.2137 TD
0.0116 Tc
0.0368 Tw
[( )-79.7(tree )-8933.8(      C)]TJ
14.1196 -0.2137 TD
0 Tc
0 Tw
(0)Tj
0.6247 0.2137 TD
0.0176 Tc
0.1764 Tw
[( tree)]TJ
ET
1 i 
188 555 m
189 555 l
237 507 l
237 506 l
236 506 l
188 554 l
f
188 555 m
189 555 l
189 554 l
140 506 l
139 506 l
139 507 l
f
139 507 98 -1 re
f
109 501 1 -13 re
f
109 495 266 -1 re
f
374 501 1 -13 re
f
278 501 1 -13 re
f
326 537 m
327 537 l
327 536 l
303 512 l
302 512 l
302 513 l
f
326 537 m
327 537 l
351 513 l
351 512 l
350 512 l
326 536 l
f
302 513 49 -1 re
f
BT
9.7406 0 0 9.6678 175.9584 478.9572 Tm
0 Tc
0 Tw
[(Disk)-11706.6(Memory)]TJ
/TT4 1 Tf
10.4 0 0 10.4 94 465 Tm
0.0147 Tc
0.1469 Tw
(Figure 2.1. )Tj
/TT6 1 Tf
5.7497 0 TD
0.0176 Tc
0.176 Tw
(Schematic picture of an LSM-tree of two components)Tj
-7.8651 -2.3077 TD
0.0153 Tc
0.1529 Tw
(As each new History row is generated, a log record to recover this insert is first written to the)Tj
0 -1.1538 TD
0.0173 Tc
0.1735 Tw
[(sequential log file in the usual way.  The index entry for the History row is then inserted into)]TJ
T*
0.0188 Tc
0.1874 Tw
[(the memory resident C)]TJ
9.36 0 0 9.36 187.1353 415 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 192.8329 417 Tm
0.0119 Tc
0.1194 Tw
[( tree, after which it will in time migrate out to the C)]TJ
9.36 0 0 9.36 444.6011 415 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 450.2987 417 Tm
0.011 Tc
0.1097 Tw
[( tree on disk;  any)]TJ
-36.3749 -1.25 TD
0.0149 Tc
0.1486 Tw
(search for an index entry will look first in C)Tj
9.36 0 0 9.36 287.8217 402 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 293.5893 404 Tm
0.0124 Tc
0.1244 Tw
[( and then in C)]TJ
9.36 0 0 9.36 365.3275 402 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 371.0951 404 Tm
0.0138 Tc
0.1389 Tw
[(.  There is a certain amount of la-)]TJ
-28.7592 -1.25 TD
0.0166 Tc
0.1664 Tw
(tency \(delay\) before entries in the C)Tj
9.36 0 0 9.36 253.5306 389 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 259.2662 391 Tm
0.0144 Tc
0.1439 Tw
[( tree migrate out to the disk resident C)]TJ
9.36 0 0 9.36 453.5416 389 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 459.2771 391 Tm
0.0157 Tc
0.1562 Tw
[( tree, implying a)]TJ
-37.2382 -1.25 TD
0.0154 Tc
0.1543 Tw
[(need for recovery of index entries that don't get out to disk prior to a crash.  Recovery is dis-)]TJ
0 -1.1538 TD
0.0086 Tc
0.0851 Tw
(cussed in Section 4, but for now we simply note that the log records that allow us to recover new)Tj
T*
0.0153 Tc
0.1529 Tw
[(inserts of History rows can be treated as logical logs;  during recovery we can reconstruct the)]TJ
T*
0.0156 Tc
0.1554 Tw
(History rows that have been inserted and simultaneously recreate any needed entries to index)Tj
T*
0.0073 Tc
0.0733 Tw
(these rows to recapture the lost content of C)Tj
9.36 0 0 9.36 285.5804 328 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 291.029 330 Tm
(.)Tj
-21.0605 -2.4039 TD
0.0214 Tc
0.2142 Tw
(The operation of inserting an index entry into the memory resident C)Tj
9.36 0 0 9.36 425.5602 303 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 431.4228 305 Tm
0.0165 Tc
0.1651 Tw
[( tree has no I/O cost.)]TJ
-34.5599 -1.25 TD
0.0089 Tc
0.0894 Tw
(However, the cost of memory capacity to house the C)Tj
9.36 0 0 9.36 331.9262 290 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 337.4078 292 Tm
0.009 Tc
0.0902 Tw
[( component is high compared to disk, and)]TJ
-25.52 -1.25 TD
0.013 Tc
0.1298 Tw
[(this imposes a limit on its size.  We need an efficient way to migrate entries out to the C)]TJ
9.36 0 0 9.36 511.6705 277 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 517.3671 279 Tm
0.0135 Tc
0.1349 Tw
[( tree)]TJ
-42.8238 -1.25 TD
0.0093 Tc
0.0935 Tw
[(that resides on the lower cost disk medium.  To achieve this, whenever the C)]TJ
/TT2 1 Tf
9.783 0 0 9.783 446.7475 264 Tm
0 Tc
0 Tw
(0)Tj
/TT6 1 Tf
10.4 0 0 10.4 451.929 266 Tm
0.0069 Tc
0.0689 Tw
[( tree as a result of)]TJ
-36.5316 -1.25 TD
0.0095 Tc
0.0949 Tw
(an insert reaches a threshold size near the maximum allotted, an ongoing )Tj
/TT10 1 Tf
34.6301 0 TD
0.014 Tc
0.1404 Tw
(rolling merge)Tj
/TT6 1 Tf
6.1032 0 TD
0.0081 Tc
0.0809 Tw
[(  process)]TJ
-40.7333 -1.1538 TD
0.0138 Tc
0.137 Tw
[(serves to delete some contiguous segment of entries from the C)]TJ
9.36 0 0 9.36 389.9316 239 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 395.5452 241 Tm
0.0098 Tc
0.0981 Tw
[( tree and merge it into the C)]TJ
9.36 0 0 9.36 534.5564 239 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 72 228 Tm
0.0103 Tc
0.1033 Tw
[(tree on disk.  Figure 2.2 depicts a conceptual picture of the rolling merge process.)]TJ
0 -2.3077 TD
0.0204 Tc
0.2041 Tw
(The C)Tj
9.36 0 0 9.36 103.5037 202 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 109.2943 204 Tm
0.0186 Tc
0.1852 Tw
[( tree has a comparable directory structure to a B-tree, but is optimized for sequential)]TJ
-3.586 -1.25 TD
0.0103 Tc
0.1028 Tw
(disk access, with nodes 100% full, and sequences of single-page nodes on each level below the)Tj
0 -1.1538 TD
0.0266 Tc
0.266 Tw
(root packed together in contiguous multi-page disk )Tj
/TT10 1 Tf
25.8446 0 TD
0.0672 Tc
0 Tw
(blocks)Tj
/TT6 1 Tf
3.2377 0 TD
0.0172 Tc
0.1725 Tw
[(  for efficient arm use;  this opti-)]TJ
-29.0823 -1.1538 TD
0.0219 Tc
0.2189 Tw
[(mization was also used in the SB-tree [21].  Multi-page block I/O is used during the rolling)]TJ
T*
0.0203 Tc
0.2026 Tw
(merge and for long range retrievals, while single-page nodes are used for matching indexed)Tj
T*
0.0272 Tc
0.2725 Tw
[(finds to minimize buffering requirements.  Multi-page block sizes of 256 KBytes are envi-)]TJ
T*
0.0051 Tc
0.0513 Tw
[(sioned to contain nodes below the root;  the root node is always a single page by definition.)]TJ
0 -2.3077 TD
0.0111 Tc
0.1109 Tw
(The rolling merge acts in a series of )Tj
/TT10 1 Tf
17.426 0 TD
0.0212 Tc
0.2129 Tw
(merge steps)Tj
/TT6 1 Tf
5.9491 0 TD
0.0119 Tc
0.1195 Tw
[(.  A read of a multi-page block containing leaf)]TJ
-23.3751 -1.1538 TD
0.0043 Tc
0.0428 Tw
(nodes of the C)Tj
9.36 0 0 9.36 141.6107 93 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 146.9673 95 Tm
0.0038 Tc
0.0387 Tw
[( tree makes a range of entries in C)]TJ
9.36 0 0 9.36 311.1277 93 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 316.4843 95 Tm
0.0044 Tc
0.0445 Tw
[( buffer resident.  Each merge step then reads a)]TJ
-23.5081 -1.25 TD
0.0085 Tc
0.0848 Tw
(disk page sized leaf node of the C)Tj
9.36 0 0 9.36 237.8465 80 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 243.357 82 Tm
0.0091 Tc
0.0918 Tw
[( tree buffered in this block, merges entries from the leaf node)]TJ
ET
endstream
endobj
19 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
21 0 obj
<<
/Length 11216
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-5-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0074 Tc
0.0745 Tw
(with entries taken from the leaf level of the C)Tj
9.36 0 0 9.36 287.806 708 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 293.2806 710 Tm
0.0075 Tc
0.0754 Tw
[( tree, thus decreasing the size of C)]TJ
9.36 0 0 9.36 462.284 708 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 467.7586 710 Tm
0.0078 Tc
0.0778 Tw
(, and creates a)Tj
-38.0537 -1.25 TD
0.0039 Tc
0.0393 Tw
(newly merged leaf node of the C)Tj
9.36 0 0 9.36 225.4525 695 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 230.7871 697 Tm
0.0037 Tc
0.0376 Tw
[( tree.)]TJ
-15.268 -2.4038 TD
0.0202 Tc
0.2015 Tw
(The buffered multi-page block containing old C)Tj
9.36 0 0 9.36 309.2946 670 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 315.0381 672 Tm
0.0137 Tc
0.1367 Tw
[( tree nodes prior to merge is called the )]TJ
/TT10 1 Tf
19.1327 0 TD
0.0785 Tc
0 Tw
(emp-)Tj
-42.5017 -1.25 TD
0.0437 Tc
(tying)Tj
/TT6 1 Tf
2.3306 0 TD
0.0167 Tc
0.1671 Tw
[( block, and new leaf nodes are written to a different buffered multi-page block called the)]TJ
/TT10 1 Tf
-2.3306 -1.1538 TD
0.0201 Tc
0.2007 Tw
(filling block)Tj
/TT6 1 Tf
5.353 0 TD
0.0138 Tc
0.1389 Tw
[(.  When this filling block has been packed full with newly merged leaf nodes of C)]TJ
9.36 0 0 9.36 531.2587 645 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 536.9552 647 Tm
(,)Tj
-44.7072 -1.25 TD
0.0118 Tc
0.1183 Tw
(the block is written to a )Tj
/TT10 1 Tf
11.4663 0 TD
0.0595 Tc
0 Tw
(new)Tj
/TT6 1 Tf
2.013 0 TD
0.0153 Tc
0.1529 Tw
[(  free area on disk.  The new multi-page block containing merged)]TJ
-13.4794 -1.1538 TD
0.0161 Tc
0.1601 Tw
[(results is pictured in Figure 2.2 as lying on the right of the former nodes.  Subsequent merge)]TJ
T*
0.0185 Tc
0.1846 Tw
(steps bring together increasing index value segments of the C)Tj
9.36 0 0 9.36 386.0017 608 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 391.7363 610 Tm
0.0115 Tc
0.1153 Tw
[( and C)]TJ
9.36 0 0 9.36 425.4957 608 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 431.2303 610 Tm
0.0193 Tc
0.1934 Tw
[( components until the)]TJ
-34.5414 -1.25 TD
0.0101 Tc
0.1005 Tw
(maximum values are reached and the rolling merge starts again from the smallest values.)Tj
9.36 0 0 9.36 144 573 Tm
0.063 Tc
0 Tw
(   C)Tj
7.28 0 0 7.28 160.385 571 Tm
0 Tc
(1)Tj
9.36 0 0 9.36 164.9408 573 Tm
0.0178 Tc
0.025 Tw
[( )-153.9(tree)-3186.1(                    )-1278.9( )-20.2( )-20.2( )-20.2(C)]TJ
7.28 0 0 7.28 304.385 571 Tm
0 Tc
0 Tw
(0)Tj
9.36 0 0 9.36 308.9408 573 Tm
0.0178 Tc
0.1789 Tw
[( tree)]TJ
/TT2 1 Tf
10.87 0 0 10.87 72 326 Tm
0 Tc
0 Tw
( )Tj
ET
1 g
1 i 
181.96 498.96 m
181.96 479.088 168.744 462.96 152.46 462.96 c
136.176 462.96 122.96 479.088 122.96 498.96 c
122.96 518.832 136.176 534.96 152.46 534.96 c
168.744 534.96 181.96 518.832 181.96 498.96 c
f
0 G
0 J 0 j 1 w 10 M []0 d
181.52 498.96 m
181.52 479.364 168.528 463.46 152.52 463.46 c
136.512 463.46 123.52 479.364 123.52 498.96 c
123.52 518.556 136.512 534.46 152.52 534.46 c
168.528 534.46 181.52 518.556 181.52 498.96 c
s
343.98 499.5 m
343.98 493.704 335.244 489 324.48 489 c
313.716 489 304.98 493.704 304.98 499.5 c
304.98 505.296 313.716 510 324.48 510 c
335.244 510 343.98 505.296 343.98 499.5 c
f
343.48 499.5 m
343.48 493.98 334.968 489.5 324.48 489.5 c
313.992 489.5 305.48 493.98 305.48 499.5 c
305.48 505.02 313.992 509.5 324.48 509.5 c
334.968 509.5 343.48 505.02 343.48 499.5 c
s
0 g
123 484 1 -14 re
f
123 477 286 -1 re
f
408 484 1 -14 re
f
305 484 1 -14 re
f
BT
/TT6 1 Tf
8.9856 0 0 8.9856 201.9225 460.8951 Tm
0.0732 Tc
(Disk)Tj
15.1296 0 TD
0.0312 Tc
(Memory)Tj
ET
1 g
207 561 8 7 re
f
q
108 326 309 244 re
W n
207.5 567.5 7 -6 re
S
Q
169 541 7 7 re
f
169.5 547.5 6 -6 re
S
246 541 7 7 re
f
246.5 547.5 6 -6 re
S
143 515 7 7 re
f
143.5 521.5 6 -6 re
S
194 515 8 7 re
f
194.5 521.5 7 -6 re
S
227 515 7 7 re
f
227.5 521.5 6 -6 re
S
272 515 7 7 re
f
272.5 521.5 6 -6 re
S
130 483 7 7 re
f
130.5 489.5 6 -6 re
S
149 483 7 7 re
f
149.5 489.5 6 -6 re
S
169 483 7 7 re
f
169.5 489.5 6 -6 re
S
188 483 7 7 re
f
188.5 489.5 6 -6 re
S
207 483 8 7 re
f
207.5 489.5 7 -6 re
S
240 483 7 7 re
f
240.5 489.5 6 -6 re
S
259 483 7 7 re
f
259.5 489.5 6 -6 re
S
285 483 7 7 re
f
285.5 489.5 6 -6 re
S
0 g
207 561 m
208 561 l
208 560 l
176 547 l
175 547 l
175 548 l
f
214 561 m
215 561 l
247 548 l
247 547 l
246 547 l
214 560 l
f
169 542 m
170 542 l
170 541 l
150 521 l
149 521 l
149 522 l
f
175 542 m
176 542 l
195 522 l
195 521 l
194 521 l
175 541 l
f
246 542 m
247 542 l
247 541 l
234 521 l
233 521 l
233 522 l
f
253 542 m
254 542 l
273 522 l
273 521 l
272 521 l
253 541 l
f
143 516 m
144 516 l
144 515 l
137 489 l
136 489 l
136 490 l
f
149 516 m
150 516 l
170 490 l
170 489 l
169 489 l
149 515 l
f
143 516 m
144 516 l
150 490 l
150 489 l
149 489 l
143 515 l
f
194 516 m
195 516 l
195 515 l
189 489 l
188 489 l
188 490 l
f
201 516 m
202 516 l
208 490 l
208 489 l
207 489 l
201 515 l
f
233 516 m
234 516 l
241 490 l
241 489 l
240 489 l
233 515 l
f
272 516 m
273 516 l
273 515 l
267 489 l
266 489 l
266 490 l
f
279 516 m
280 516 l
286 490 l
286 489 l
285 489 l
279 515 l
f
1 g
350 554 7 7 re
f
350.5 560.5 6 -6 re
S
324 528 7 7 re
f
324.5 534.5 6 -6 re
S
376 528 7 7 re
f
376.5 534.5 6 -6 re
S
311 496 7 7 re
f
311.5 502.5 6 -6 re
S
331 496 7 7 re
f
331.5 502.5 6 -6 re
S
350 496 7 7 re
f
350.5 502.5 6 -6 re
S
369 496 8 7 re
f
369.5 502.5 7 -6 re
S
389 496 7 7 re
f
389.5 502.5 6 -6 re
S
0 g
350 555 m
351 555 l
351 554 l
332 534 l
331 534 l
331 535 l
f
356 555 m
357 555 l
377 535 l
377 534 l
376 534 l
356 554 l
f
324 529 m
325 529 l
325 528 l
319 502 l
318 502 l
318 503 l
f
331 529 m
332 529 l
351 503 l
351 502 l
350 502 l
331 528 l
f
324 529 m
325 529 l
332 503 l
332 502 l
331 502 l
324 528 l
f
376 529 m
377 529 l
377 528 l
370 502 l
369 502 l
369 503 l
f
382 529 m
383 529 l
390 503 l
390 502 l
389 502 l
382 528 l
f
1 g
311.96 376.02 m
311.96 348.972 294.264 327.02 272.46 327.02 c
250.656 327.02 232.96 348.972 232.96 376.02 c
232.96 403.068 250.656 425.02 272.46 425.02 c
294.264 425.02 311.96 403.068 311.96 376.02 c
f
q
108 326 309 244 re
W n
311.46 375.96 m
311.46 349.188 293.988 327.46 272.46 327.46 c
250.932 327.46 233.46 349.188 233.46 375.96 c
233.46 402.732 250.932 424.46 272.46 424.46 c
293.988 424.46 311.46 402.732 311.46 375.96 c
s
Q
149 438 7 7 re
f
149.5 444.5 6 -6 re
S
110 418 7 7 re
f
q
108 326 309 244 re
W n
110.5 424.5 6 -6 re
S
Q
188 418 7 7 re
f
188.5 424.5 6 -6 re
S
136 392 7 7 re
f
136.5 398.5 6 -6 re
S
169 392 7 7 re
f
169.5 398.5 6 -6 re
S
214 392 7 7 re
f
214.5 398.5 6 -6 re
S
130 360 7 7 re
f
130.5 366.5 6 -6 re
S
149 360 7 7 re
f
149.5 366.5 6 -6 re
S
181 360 8 7 re
f
181.5 366.5 7 -6 re
S
201 360 7 7 re
f
201.5 366.5 6 -6 re
S
227 360 7 7 re
f
227.5 366.5 6 -6 re
S
0 g
149 438 m
150 438 l
150 437 l
118 424 l
117 424 l
117 425 l
f
156 438 m
157 438 l
189 425 l
189 424 l
188 424 l
156 437 l
f
117 419 m
118 419 l
137 399 l
137 398 l
136 398 l
117 418 l
f
188 419 m
189 419 l
189 418 l
176 398 l
175 398 l
175 399 l
f
194 419 m
195 419 l
215 399 l
215 398 l
214 398 l
194 418 l
f
136 393 m
137 393 l
137 392 l
131 366 l
130 366 l
130 367 l
f
143 393 m
144 393 l
150 367 l
150 366 l
149 366 l
143 392 l
f
175 393 m
176 393 l
182 367 l
182 366 l
181 366 l
175 392 l
f
214 393 m
215 393 l
215 392 l
208 366 l
207 366 l
207 367 l
f
220 393 m
221 393 l
228 367 l
228 366 l
227 366 l
220 392 l
f
117 348 1 -14 re
f
117 341 299 -1 re
f
415 348 1 -14 re
f
306 348 1 -14 re
f
1 g
240 360 7 7 re
f
240.5 366.5 6 -6 re
S
259 360 7 7 re
f
259.5 366.5 6 -6 re
S
279 360 7 7 re
f
279.5 366.5 6 -6 re
S
298 360 7 7 re
f
298.5 366.5 6 -6 re
S
253 392 7 7 re
f
253.5 398.5 6 -6 re
S
285 392 7 7 re
f
285.5 398.5 6 -6 re
S
0 g
110 419 m
111 419 l
254 399 l
254 398 l
253 398 l
110 418 l
f
110 419 m
111 419 l
286 399 l
286 398 l
285 398 l
110 418 l
f
253 393 m
254 393 l
254 392 l
241 366 l
240 366 l
240 367 l
f
259 393 m
260 393 l
267 367 l
267 366 l
266 366 l
259 392 l
f
285 393 m
286 393 l
286 392 l
280 366 l
279 366 l
279 367 l
f
292 393 m
293 393 l
299 367 l
299 366 l
298 366 l
292 392 l
f
1 g
350 431 7 7 re
f
350.5 437.5 6 -6 re
S
324 405 7 7 re
f
324.5 411.5 6 -6 re
S
376 405 7 7 re
f
376.5 411.5 6 -6 re
S
350 373 7 7 re
f
350.5 379.5 6 -6 re
S
369 373 8 7 re
f
369.5 379.5 7 -6 re
S
389 373 7 7 re
f
389.5 379.5 6 -6 re
S
0 g
350 432 m
351 432 l
351 431 l
332 411 l
331 411 l
331 412 l
f
356 432 m
357 432 l
377 412 l
377 411 l
376 411 l
356 431 l
f
331 406 m
332 406 l
351 380 l
351 379 l
350 379 l
331 405 l
f
376 406 m
377 406 l
377 405 l
370 379 l
369 379 l
369 380 l
f
382 406 m
383 406 l
390 380 l
390 379 l
389 379 l
382 405 l
f
247 412.5 m
240.179 414.187 l
240.626 416.258 241.871 418.029 243.606 419.06 c
f
169 471 m
170 471 l
243 416 l
243 415 l
242 415 l
169 470 l
f
286 419 m
286.122 425.999 l
288.106 425.964 289.981 425.09 291.283 423.592 c
f
318 490 m
319 490 l
319 489 l
288 423 l
287 423 l
287 424 l
f
BT
/TT4 1 Tf
10.4 0 0 10.4 72 316 Tm
0.0272 Tc
0.2719 Tw
(Figure 2.2.)Tj
/TT6 1 Tf
5.5727 0 TD
0.0189 Tc
0.1891 Tw
[( Conceptual picture of rolling merge steps, with result written back to disk)]TJ
-5.5727 -2.3077 TD
0.0145 Tc
0.145 Tw
(Newly merged blocks are written to new disk positions, so that the old blocks will not be over-)Tj
0 -1.1538 TD
0.0127 Tc
0.1266 Tw
[(written and will be available for recovery in case of a crash.  The parent directory nodes in C)]TJ
9.36 0 0 9.36 531.3859 278 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 537.0374 280 Tm
(,)Tj
-44.7151 -1.25 TD
0.0187 Tc
0.1873 Tw
[(also buffered in memory, are updated to reflect this new leaf structure, but usually remain in)]TJ
0 -1.1538 TD
0.0181 Tc
0.1806 Tw
[(buffer for longer periods to minimize I/O;  the old leaf nodes from the C)]TJ
9.36 0 0 9.36 436.8979 253 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 442.7445 255 Tm
0.0218 Tc
0.2186 Tw
[( component are in-)]TJ
-35.6485 -1.25 TD
0.0136 Tc
0.1358 Tw
(validated after the merge step is complete and are then deleted from the C)Tj
9.36 0 0 9.36 443.6221 240 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 449.2657 242 Tm
0.0114 Tc
0.1149 Tw
[( directory.  In gen-)]TJ
-36.2756 -1.25 TD
0.0259 Tc
0.2584 Tw
(eral, there will be leftover leaf-level entries for the merged C)Tj
9.36 0 0 9.36 391.244 227 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 397.2836 229 Tm
0.0351 Tc
0.3513 Tw
[( component following each)]TJ
-31.2773 -1.25 TD
0.0186 Tc
0.1854 Tw
(merge step, since a merge step is unlikely to result in a new node just as the old leaf node)Tj
0 -1.1538 TD
0.0144 Tc
0.1445 Tw
[(empties.  The same consideration holds for multi-page blocks, since in general when the filling)]TJ
T*
0.0147 Tc
0.1469 Tw
(block has filled with newly merged nodes, there will be numerous nodes containing entries still)Tj
T*
0.0183 Tc
0.1825 Tw
[(in the shrinking block.  These leftover entries, as well as updated directory node information,)]TJ
T*
0.0134 Tc
0.1332 Tw
[(remain in block memory buffers for a time without being written to disk.  Techniques to provide)]TJ
T*
0.0145 Tc
0.1454 Tw
(concurrency during the merge step and recovery from lost memory during a crash are covered)Tj
T*
0.0212 Tc
0.2118 Tw
[(in detail in Section 4.  To reduce reconstruction time in recovery, checkpoints of the merge)]TJ
T*
0.0172 Tc
0.1723 Tw
(process are taken periodically, forcing all buffered information to disk.)Tj
ET
endstream
endobj
22 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
24 0 obj
<<
/Length 8795
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-6-)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 708 Tm
0.0346 Tc
0.346 Tw
[(2.1  How a Two Component LSM-tree Grows)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 683 Tm
0.011 Tc
0.1091 Tw
(To trace the metamorphosis of an LSM-tree from the beginning of its growth, let us begin with a)Tj
0 -1.1538 TD
0.0157 Tc
0.157 Tw
(first insertion to the C)Tj
9.36 0 0 9.36 180.7057 669 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 186.4653 671 Tm
0.0163 Tc
0.1636 Tw
[( tree component in memory.  Unlike the C)]TJ
9.36 0 0 9.36 398.7756 669 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 404.5352 671 Tm
0.0125 Tc
0.1253 Tw
[( tree, the C)]TJ
9.36 0 0 9.36 461.4507 669 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 467.2103 671 Tm
0.0122 Tc
0.1226 Tw
[( tree is not ex-)]TJ
-38.001 -1.25 TD
0.012 Tc
0.1201 Tw
[(pected to have a B-tree-like structure.  For one thing, the nodes could be any size:  there is no)]TJ
0 -1.1538 TD
0.0108 Tc
0.1072 Tw
(need to insist on disk page size nodes since the C)Tj
9.36 0 0 9.36 319.4238 644 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 325.0064 646 Tm
0.0098 Tc
0.0978 Tw
[( tree never sits on disk, and so we need not)]TJ
-24.3275 -1.25 TD
0.0197 Tc
0.1973 Tw
[(sacrifice CPU efficiency to minimize depth.  Thus a \(2-3\) tree or AVL-tree \(as explained, for)]TJ
0 -1.1538 TD
0.02 Tc
0.2004 Tw
(example, in [1]\) are possible alternative structures for a C)Tj
9.36 0 0 9.36 366.8211 619 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 372.6437 621 Tm
0.0164 Tc
0.1641 Tw
[( tree.  When the growing C)]TJ
9.36 0 0 9.36 511.0288 619 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 516.8514 621 Tm
0.0169 Tc
0.1695 Tw
[( tree)]TJ
-42.7742 -1.25 TD
0.0148 Tc
0.148 Tw
(first reaches its threshold size, a leftmost sequence of entries is deleted from the C)Tj
9.36 0 0 9.36 487.1466 606 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 492.8282 608 Tm
0.0127 Tc
0.127 Tw
[( tree \(this)]TJ
-40.4643 -1.25 TD
0.0163 Tc
0.1634 Tw
(should be done in an efficient batch manner rather than one entry at a time\) and reorganized)Tj
0 -1.1538 TD
0.0096 Tc
0.0964 Tw
(into a C)Tj
9.36 0 0 9.36 110.6454 581 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 116.258 583 Tm
0.0125 Tc
0.1248 Tw
[( tree leaf node packed 100% full.  Successive leaf nodes are placed left-to-right in the)]TJ
-4.2556 -1.25 TD
0.024 Tc
0.2409 Tw
[(initial pages of a buffer resident multi-page block until the block is full;  then this block is)]TJ
0 -1.1538 TD
0.0157 Tc
0.1563 Tw
(written out to disk to become the first part of the C)Tj
9.36 0 0 9.36 328.0105 556 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 333.8171 558 Tm
0.0182 Tc
0.1818 Tw
[( tree disk-resident leaf level.  A directory)]TJ
-25.1747 -1.25 TD
0.0103 Tc
0.103 Tw
(node structure for the C)Tj
9.36 0 0 9.36 188.1078 543 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 193.6404 545 Tm
0.0104 Tc
0.1041 Tw
[( tree is created in memory buffers as successive leaf nodes are added,)]TJ
-11.6962 -1.25 TD
0.0137 Tc
0.1366 Tw
(with details explained below.)Tj
0 -2.3077 TD
0.0198 Tc
0.1978 Tw
(Successive multi-page blocks of the C)Tj
9.36 0 0 9.36 265.6304 506 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 271.366 508 Tm
0.018 Tc
0.1796 Tw
[( tree leaf level in ever increasing key-sequence order)]TJ
-19.1698 -1.25 TD
0.0121 Tc
0.121 Tw
(are written out to disk to keep the C)Tj
9.36 0 0 9.36 250.3228 493 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 255.9964 495 Tm
0.0143 Tc
0.1437 Tw
[( tree threshold size from exceeding its threshold.   Upper)]TJ
-17.692 -1.25 TD
0.0211 Tc
0.2103 Tw
(level C)Tj
9.36 0 0 9.36 107.51 480 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 113.3246 482 Tm
0.0201 Tc
0.201 Tw
[( tree directory nodes are maintained in separate multi-page block buffers, or else in)]TJ
-3.9735 -1.25 TD
0.0158 Tc
0.1574 Tw
(single page buffers, whichever makes more sense from a standpoint of total memory and disk)Tj
0 -1.1538 TD
0.0139 Tc
0.1392 Tw
[(arm cost;  entries in these directory nodes contain separators that channel access to individual)]TJ
T*
0.0166 Tc
0.1659 Tw
[(single-page nodes below, as in a B-tree.  The intention is to provide efficient exact-match ac-)]TJ
T*
0.0138 Tc
0.1378 Tw
[(cess along a path of single page index nodes down to the leaf level, avoiding multi-page block)]TJ
T*
0.0149 Tc
0.1488 Tw
[(reads in such a case to minimize memory buffer requirements.  Thus we read and write multi-)]TJ
T*
0.0108 Tc
0.108 Tw
(page blocks for the rolling merge or for long range retrievals, and single-page nodes for indexed)Tj
T*
0.0124 Tc
0.1238 Tw
[(find \(exact-match\) access.  A somewhat different architecture that supports such a dichotomy is)]TJ
T*
0.0154 Tc
0.1537 Tw
[(presented in [21].  Partially full multi-page blocks of C)]TJ
9.36 0 0 9.36 340.6066 383 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 346.3112 385 Tm
0.0166 Tc
0.1665 Tw
[( directory nodes are usually allowed to)]TJ
-26.3761 -1.25 TD
0.0143 Tc
0.1428 Tw
[(remain in buffer while a sequence of leaf node blocks are written out.  C)]TJ
9.36 0 0 9.36 433.7603 370 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 439.4649 372 Tm
0.0173 Tc
0.1729 Tw
[( directory nodes are)]TJ
-35.3332 -1.25 TD
0.0063 Tc
0.0621 Tw
[(forced to new positions on disk when:)]TJ
1.25 -2.3077 TD
0.0143 Tc
0.1436 Tw
[(o)-775.7(A)0( multi-page block buffer containing directory nodes becomes full)]TJ
0 -1.1538 TD
0.0088 Tc
0.0881 Tw
[(o)73.3( )-479.8(The root node splits, increasing the depth of the C)]TJ
9.36 0 0 9.36 342.0309 321 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 347.5284 323 Tm
0.0081 Tc
0.0804 Tw
[( tree \(to a depth greater than two\))]TJ
-25.2431 -1.25 TD
0.0121 Tc
0.1212 Tw
[(o)76.6( )-443.4(A checkpoint is performed)]TJ
-1.25 -2.3077 TD
0.0233 Tc
0.2329 Tw
[(In the first case, the single multi-page block which has filled is written out to disk.  In the)]TJ
0 -1.1538 TD
0.0135 Tc
0.1341 Tw
(latter two cases, all multi-page block buffers and directory node buffers are flushed to disk.)Tj
0 -2.3077 TD
0.0183 Tc
0.1824 Tw
(After the rightmost leaf entry of the C)Tj
9.36 0 0 9.36 262.6335 248 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 268.472 250 Tm
0.0143 Tc
0.1435 Tw
[( tree is written out to the C)]TJ
9.36 0 0 9.36 404.6245 248 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 410.4631 250 Tm
0.0154 Tc
0.1537 Tw
[( tree for the first time, the)]TJ
-32.5445 -1.25 TD
0.01 Tc
0.1002 Tw
(process starts over on the left end of the two trees, except that now and with successive passes)Tj
0 -1.1538 TD
0.014 Tc
0.14 Tw
(multi-page leaf-level blocks of the C)Tj
9.36 0 0 9.36 249.4265 223 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 255.0321 225 Tm
0.0117 Tc
0.1172 Tw
[( tree must be read into buffer and merged with the entries)]TJ
-17.5992 -1.25 TD
0.0091 Tc
0.0918 Tw
(in the C)Tj
9.36 0 0 9.36 110.5094 210 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 116.103 212 Tm
0.0118 Tc
0.1179 Tw
[( tree, thus creating new multi-page leaf blocks of C)]TJ
9.36 0 0 9.36 367.0708 210 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 372.6644 212 Tm
0.0095 Tc
0.0949 Tw
[( to be written to disk.)]TJ
-28.91 -2.4038 TD
0.0098 Tc
0.0984 Tw
[(Once the merge starts, the situation is more complex.  We picture the rolling merge process in a)]TJ
0 -1.1538 TD
0.0206 Tc
0.2054 Tw
(two component LSM-tree as having a conceptual cursor which slowly circulates in quantized)Tj
T*
0.0068 Tc
0.068 Tw
(steps through equal key values of the C)Tj
9.36 0 0 9.36 262.4085 161 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 267.8331 163 Tm
0.0051 Tc
0.0509 Tw
[( tree and C)]TJ
9.36 0 0 9.36 321.4547 161 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 326.8793 163 Tm
0.0082 Tc
0.0813 Tw
[( tree components, drawing indexing data out)]TJ
-24.5076 -1.25 TD
0.0112 Tc
0.1115 Tw
(from the C)Tj
9.36 0 0 9.36 124.0269 148 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 129.6054 150 Tm
0.0077 Tc
0.0767 Tw
[( tree to the C)]TJ
9.36 0 0 9.36 194.0374 148 Tm
0 Tc
0 Tw
(1)Tj
/TT2 1 Tf
10.87 0 0 10.87 199.6159 150 Tm
( )Tj
/TT6 1 Tf
10.4 0 0 10.4 202.5284 150 Tm
0.0103 Tc
0.1029 Tw
[(tree on disk.  The rolling merge cursor has a position at the leaf level)]TJ
-12.5508 -1.25 TD
0.0219 Tc
0.2193 Tw
(of the C)Tj
9.36 0 0 9.36 114.8063 135 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 120.9249 137 Tm
0.026 Tc
0.2592 Tw
[( tree and within each higher directory level as well.  At each level, all currently)]TJ
-4.7043 -1.25 TD
0.0206 Tc
0.2057 Tw
(merging multi-page blocks of the C)Tj
9.36 0 0 9.36 250.6733 122 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 256.4608 124 Tm
0.0153 Tc
0.1534 Tw
[( tree will in general be split into two blocks:  the "empty-)]TJ
-17.7366 -1.25 TD
0.016 Tc
0.1597 Tw
(ing" block whose entries have been depleted but which retains information not yet reached by)Tj
0 -1.1538 TD
0.0269 Tc
0.2692 Tw
(the merge cursor, and the "filling" block which reflects the result of the merge up to this)Tj
T*
0.0212 Tc
0.2117 Tw
[(moment.  There will be an analogous "filling node" and "emptying node" defining the cursor)]TJ
T*
0.0232 Tc
0.232 Tw
[(which will certainly be buffer resident.  For concurrent access purposes, both the emptying)]TJ
ET
endstream
endobj
25 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
27 0 obj
<<
/Length 8404
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-7-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0076 Tc
0.0757 Tw
(block and the filling block on each level contain an integral number of page-sized nodes of the C)Tj
9.36 0 0 9.36 534.7424 708 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 72 697 Tm
0.0275 Tc
0.2749 Tw
(tree, which simply happen to be buffer resident. \(During the merge step that restructures)Tj
0 -1.1538 TD
0.0155 Tc
0.1545 Tw
(individual nodes, other types of concurrent access to the entries on those nodes are blocked.\))Tj
T*
0.0147 Tc
0.1471 Tw
(Whenever a complete flush of all buffered nodes to disk is required, all buffered information at)Tj
T*
0.0227 Tc
0.2271 Tw
(each level must be written to new positions on disk \(with positions reflected in superior di-)Tj
T*
0.0173 Tc
0.1728 Tw
[(rectory information, and a sequential log entry for recovery purposes\).  At a later point, when)]TJ
T*
0.0116 Tc
0.1159 Tw
(the filling block in buffer on some level of the C)Tj
9.36 0 0 9.36 305.1484 635 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 310.792 637 Tm
0.0115 Tc
0.1156 Tw
[( tree fills and must be flushed again, it goes to)]TJ
-22.9608 -1.25 TD
0.0142 Tc
0.1426 Tw
[(a new position.  Old information that might still be needed during recovery is never overwritten)]TJ
0 -1.1538 TD
0.0132 Tc
0.1314 Tw
[(on disk, only invalidated as new writes succeed with more up-to-date information.  A somewhat)]TJ
T*
0.0183 Tc
0.1824 Tw
(more detailed explanation of the rolling merge process is presented in Section 4, where con-)Tj
T*
0.009 Tc
0.0908 Tw
(currency and recovery designs are considered.)Tj
0 -2.3077 TD
0.0157 Tc
0.1564 Tw
(It is an important efficiency consideration of the LSM-tree that when the rolling merge process)Tj
0 -1.1538 TD
0.0111 Tc
0.1102 Tw
(on a particular level of the C)Tj
9.36 0 0 9.36 211.8241 550 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 217.4447 552 Tm
0.0123 Tc
0.1232 Tw
[( tree passes through nodes at a relatively high rate, all reads and)]TJ
-13.9851 -1.25 TD
0.0163 Tc
0.1637 Tw
[(writes are in multi-page blocks.  By eliminating seek time and rotational latency, we expect to)]TJ
0 -1.1538 TD
0.0161 Tc
0.1603 Tw
[(gain a large advantage over random page I/O involved in normal B-tree entry insertion.  \(This)]TJ
T*
0.0153 Tc
0.1529 Tw
[(advantage is analyzed below, in Section 3.2.\)  The idea of always writing multi-page blocks to)]TJ
T*
0.0263 Tc
0.2639 Tw
(new locations was inspired by the Log-Structured File System devised by Rosenblum and)Tj
T*
0.2634 Tw
[(Ousterhout [23], from which the Log-Structured Merge-tree takes its name.  Note that the)]TJ
T*
0.0126 Tc
0.126 Tw
(continuous use of new disk space for fresh multi-page block writes implies that the area of disk)Tj
T*
0.0081 Tc
0.0805 Tw
[(being written will wrap, and old discarded blocks must be reused.  This bookkeeping can be done)]TJ
T*
0.0176 Tc
0.1761 Tw
[(in a memory table;  old multi-page blocks are invalidated and reused as single units, and re-)]TJ
T*
0.0187 Tc
0.1863 Tw
[(covery is guaranteed by the checkpoint.  In the Log-Structured File System, the reuse of old)]TJ
T*
0.0226 Tc
0.2264 Tw
(blocks involves significant I/O because blocks are typically only partially freed up, so reuse)Tj
T*
0.0217 Tc
0.2177 Tw
[(requires a block read and block write.  In the LSM-Tree, blocks are totally freed up on the)]TJ
T*
0.0123 Tc
0.1234 Tw
(trailing edge of the rolling merge, so no extra I/O is involved.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 381 Tm
0.0377 Tc
0.3769 Tw
[(2.2  Finds in the LSM-tree Index)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 356 Tm
0.0131 Tc
0.1304 Tw
(When an exact-match find or range find requiring immediate response is performed through the)Tj
T*
0.0185 Tc
0.1843 Tw
(LSM-tree index, first the C)Tj
9.36 0 0 9.36 205.6504 342 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 211.409 344 Tm
0.0135 Tc
0.1342 Tw
[( tree and then the C)]TJ
9.36 0 0 9.36 313.1183 342 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 318.8769 344 Tm
0.0153 Tc
0.1526 Tw
[( tree is searched for the value or values de-)]TJ
-23.7382 -1.25 TD
0.01 Tc
0.1005 Tw
[(sired.  This may imply a slight CPU overhead compared to the B-tree case, since two directories)]TJ
0 -1.1538 TD
0.0112 Tc
0.1111 Tw
[(may need to be searched.  In LSM-trees with more than two components, there may also be an)]TJ
T*
0.0184 Tc
0.1831 Tw
[(I/O overhead.  To anticipate Chapter 3 somewhat, we define a multi component LSM-tree as)]TJ
T*
0.0212 Tc
0.2123 Tw
[(having components C)]TJ
9.36 0 0 9.36 181.2055 293 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 186.8561 295 Tm
0.0084 Tc
0.0841 Tw
(, C)Tj
9.36 0 0 9.36 201.2816 293 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 206.9322 295 Tm
0.0084 Tc
0.0841 Tw
(, C)Tj
9.36 0 0 9.36 221.3576 293 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 227.0082 295 Tm
0.0045 Tc
0.0449 Tw
[(, . . .,   C)]TJ
9.36 0 0 9.36 269.6687 293 Tm
0.0443 Tc
0 Tw
(K-1)Tj
10.4 0 0 10.4 285.4793 295 Tm
0.0097 Tc
0.0969 Tw
[( and C)]TJ
9.36 0 0 9.36 318.7427 293 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 325.5197 295 Tm
0.0157 Tc
0.1563 Tw
(, indexed tree structures of increasing size,)Tj
-24.3769 -1.25 TD
0.0277 Tc
0.2768 Tw
(where C)Tj
9.36 0 0 9.36 115.6208 280 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 121.4843 282 Tm
0.0207 Tc
0.2062 Tw
[( is memory resident and all other components are disk resident.  There are asyn-)]TJ
-4.7581 -1.25 TD
0.0232 Tc
0.2321 Tw
(chronous rolling merge processes in train between all component pairs \(C)Tj
9.36 0 0 9.36 452.8173 267 Tm
0.0453 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 464.4913 269 Tm
0.012 Tc
0.1203 Tw
(, C)Tj
9.36 0 0 9.36 479.4068 267 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 481.7403 269 Tm
0.0204 Tc
0.204 Tw
(\) that move)Tj
-39.3981 -1.25 TD
0.0191 Tc
0.1919 Tw
(entries out from the smaller to the larger component each time the smaller component, C)Tj
9.36 0 0 9.36 525.3465 254 Tm
0.0411 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 536.9036 256 Tm
0 Tc
(,)Tj
-44.7023 -1.25 TD
0.0104 Tc
0.1036 Tw
[(exceeds its threshold size.  As a rule, in order to guarantee that all entries in the LSM-tree have)]TJ
0 -1.1538 TD
0.0062 Tc
0.0612 Tw
[(been examined, it is necessary for an exact-match find or range find to access each component C)]TJ
9.36 0 0 9.36 538.0212 229 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 72 218 Tm
0.0157 Tc
0.1571 Tw
[(through its index structure.  However, there are a number of possible optimizations where this)]TJ
T*
0.008 Tc
0.0801 Tw
(search can be limited to an initial subset of the components.)Tj
0 -2.3077 TD
0.0236 Tc
0.2359 Tw
(First, where unique index values are guaranteed by the logic of generation, as when time-)Tj
0 -1.1538 TD
0.0084 Tc
0.0836 Tw
(stamps are guaranteed to be distinct, a matching indexed find is complete if it locates the desired)Tj
T*
0.0129 Tc
0.1291 Tw
(value in an early C)Tj
9.36 0 0 9.36 166.0531 156 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 168.3236 158 Tm
0.015 Tc
0.1499 Tw
[( component.  As another example, we could limit our search when the find)]TJ
-9.2619 -1.25 TD
0.0167 Tc
0.1673 Tw
(criterion uses recent timestamp values so that the entries sought could not yet have migrated)Tj
0 -1.1538 TD
0.0139 Tc
0.1398 Tw
[(out to the largest components.  As the merge cursor circulates through the \(C)]TJ
9.36 0 0 9.36 457.5763 131 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 459.8318 133 Tm
0.0084 Tc
0.0832 Tw
(, C)Tj
9.36 0 0 9.36 474.2482 131 Tm
0.0385 Tc
0 Tw
(i+1)Tj
10.4 0 0 10.4 488.0794 133 Tm
0.013 Tc
0.1302 Tw
(\) pairs, we)Tj
-40.0076 -1.25 TD
0.0155 Tc
0.1547 Tw
(will often have reason to retain entries in C)Tj
9.36 0 0 9.36 288.6658 118 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 290.9583 120 Tm
0.0148 Tc
0.1483 Tw
[( that have been inserted in the recent past \(in the)]TJ
-21.0537 -1.4423 TD
0.0098 Tc
0.0985 Tw
(last  )Tj
/TT11 1 Tf
14 0 0 14 96.6229 105 Tm
0 Tc
0 Tw
<006f>Tj
/TT6 1 Tf
9.36 0 0 9.36 103.5134 103 Tm
(i)Tj
10.4 0 0 10.4 105.8449 105 Tm
0.0177 Tc
0.1766 Tw
[( seconds\), allowing only the older entries to go out to C)]TJ
9.36 0 0 9.36 389.7505 103 Tm
0.055 Tc
0 Tw
(i+1)Tj
10.4 0 0 10.4 404.0466 105 Tm
0.0166 Tc
0.1664 Tw
[(.  In cases where the most)]TJ
-31.9276 -1.3462 TD
0.0123 Tc
0.1234 Tw
(frequent find references are to recently inserted values, many finds can be completed in the C)Tj
9.36 0 0 9.36 534.5367 89 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 72 78 Tm
0.0098 Tc
0.0976 Tw
(tree, and so the C)Tj
9.36 0 0 9.36 160.5679 76 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 166.1445 78 Tm
0.0115 Tc
0.1155 Tw
[( tree fulfills a valuable memory buffering function.  This point was made also)]TJ
ET
endstream
endobj
28 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
31 0 obj
<<
/Length 7081
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-8-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0189 Tc
0.1891 Tw
[(in [23], and represents an important efficiency consideration.  For example, indexes to short-)]TJ
0 -1.1538 TD
0.0165 Tc
0.1657 Tw
(term transaction UNDO logs accessed in the event of an abort will have a large proportion of)Tj
T*
0.0104 Tc
0.1039 Tw
(accesses in a relatively short time-span after creation, and we can expect most of these indexes)Tj
T*
0.0216 Tc
0.216 Tw
[(to remain memory resident.  By keeping track of the start-time for each transaction we can)]TJ
0 -1.3462 TD
0.0199 Tc
0.1994 Tw
(guarantee that all logs for a transaction started in the last )Tj
/TT11 1 Tf
14 0 0 14 372.4265 660 Tm
0 Tc
0 Tw
<006f>Tj
/TT6 1 Tf
9.36 0 0 9.36 379.4 658 Tm
(0)Tj
10.4 0 0 10.4 385.3066 660 Tm
0.0224 Tc
0.2238 Tw
[( seconds, for example, will be)]TJ
-30.1256 -1.3462 TD
0.0073 Tc
0.0734 Tw
(found in component C)Tj
9.36 0 0 9.36 177.5644 644 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 182.965 646 Tm
0.0074 Tc
0.0736 Tw
(, without recourse to disk components.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 619 Tm
0.0403 Tc
0.403 Tw
[(2.3  Deletes, Updates and Long-Latency Finds in the LSM-tree)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 594 Tm
0.0191 Tc
0.1912 Tw
(We note that deletes can share with inserts the valuable properties of deferral and batching.)Tj
0 -1.1538 TD
0.0131 Tc
0.1309 Tw
(When an indexed row is deleted, if a key value entry is not found in the appropriate position in)Tj
T*
0.0069 Tc
0.0693 Tw
(the C)Tj
9.36 0 0 9.36 97.9374 568 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 103.369 570 Tm
0.0037 Tc
0.0378 Tw
[( tree, a )]TJ
/TT10 1 Tf
3.5377 0 TD
0.009 Tc
0.0908 Tw
(delete node entry)Tj
/TT6 1 Tf
8.0632 0 TD
0.0062 Tc
0.0611 Tw
[(  can be placed in that position, also indexed by the key value, but)]TJ
-14.6172 -1.25 TD
0.0091 Tc
0.0917 Tw
[(noting an entry Row ID \(RID\) to delete.  The actual delete can be done at a later time during the)]TJ
0 -1.1538 TD
0.0088 Tc
0.089 Tw
[(rolling merge process, when the actual index entry is encountered:  we say the delete node entry)]TJ
/TT10 1 Tf
T*
0.0178 Tc
0.1781 Tw
(migrates out)Tj
/TT6 1 Tf
5.894 0 TD
0.0118 Tc
0.118 Tw
[( to larger components during merge and )]TJ
/TT10 1 Tf
19.353 0 TD
0.0163 Tc
0 Tw
(annihilates )Tj
/TT6 1 Tf
5.419 0 TD
0.0119 Tc
0.1193 Tw
(the associated entry when it is)Tj
-30.666 -1.1538 TD
0.0071 Tc
0.0709 Tw
[(encountered.  In the meantime, find requests must be filtered through delete node entries so as to)]TJ
T*
0.0247 Tc
0.2475 Tw
[(avoid returning references to deleted records.  This filtering is easily performed during the)]TJ
T*
0.0149 Tc
0.1492 Tw
(search for the relevant keyvalue, since the delete node entry will be located in the appropriate)Tj
T*
0.0203 Tc
0.2032 Tw
(keyvalue position of an earlier component than the entry itself, and in many cases this filter)Tj
T*
0.0206 Tc
0.2056 Tw
[(will reduce the overhead of determining an entry is deleted.  Updates of records that cause)]TJ
T*
0.0087 Tc
0.0869 Tw
(changes to indexed values are unusual in any kind of applications, but such updates can be han-)Tj
T*
0.0073 Tc
0.0734 Tw
(dled by LSM-trees in a deferred manner if we view an update as a delete followed by an insert.)Tj
0 -2.3077 TD
0.0112 Tc
0.1128 Tw
[(We sketch another type of operation for efficient index modification.  A process known as )]TJ
/TT10 1 Tf
42.2805 0 TD
0.035 Tc
0 Tw
(predi-)Tj
-42.2805 -1.1538 TD
0.0162 Tc
0.1616 Tw
(cate deletion)Tj
/TT6 1 Tf
6.0425 0 TD
0.0107 Tc
0.1062 Tw
[( provides a means of performing batch deletes by simply )]TJ
/TT10 1 Tf
26.9502 0 TD
0.0295 Tc
0 Tw
(asserting)Tj
/TT6 1 Tf
4.3233 0 TD
0.0083 Tc
0.0831 Tw
[(  a predicate, for)]TJ
-37.3161 -1.1538 TD
0.0171 Tc
0.1708 Tw
(example the predicate that all index values with timestamps more than 20 days old are to be)Tj
T*
0.0096 Tc
0.0965 Tw
[(deleted.  When the affected entries in the oldest \(largest\) component become resident during the)]TJ
T*
0.013 Tc
0.13 Tw
(normal course of the rolling merge, this assertion causes them simply to be dropped during the)Tj
T*
0.0108 Tc
0.1079 Tw
[(merge process.  Yet another type of operation, a long-latency find, provide an efficient means of)]TJ
T*
0.0163 Tc
0.1638 Tw
(responding to a query where the results can wait for the circulation period of the slowest cur-)Tj
T*
0.0081 Tc
0.0811 Tw
[(sor.  A )]TJ
/TT10 1 Tf
3.4756 0 TD
0.0176 Tc
0.1762 Tw
(find note entry)Tj
/TT6 1 Tf
6.9538 0 TD
0.0153 Tc
0.1532 Tw
[( is inserted in component C)]TJ
9.36 0 0 9.36 318.7424 339 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 324.455 341 Tm
0.015 Tc
0.1495 Tw
(, and the find is actually performed over an)Tj
-24.2745 -1.25 TD
0.0161 Tc
0.1607 Tw
[(extended period of time as it migrates out to later components.  Once the find note entry has)]TJ
0 -1.1538 TD
0.0157 Tc
0.1562 Tw
(circulated out to the appropriate region of the largest relevant component of the LSM-tree, the)Tj
T*
0.0124 Tc
0.1239 Tw
(accumulated list of RIDs for the long-latency find is complete.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 278 Tm
0.0489 Tc
0.4888 Tw
[(3.  Cost-Performance and the Multi-Component LSM-Tree)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 253 Tm
0.0183 Tc
0.1825 Tw
(In this section we analyze the cost-performance of an LSM-tree, starting with an LSM-tree of)Tj
T*
0.0189 Tc
0.1897 Tw
[(two components.  We analyze the LSM-tree by analogy with a B-tree providing the same in-)]TJ
T*
0.0191 Tc
0.1916 Tw
(dexing capabilities, comparing the I/O resources utilized for a high volume of new insertions.)Tj
T*
0.011 Tc
0.1095 Tw
(As we will argue in Section 5, other disk-based access methods are comparable to the B-tree in)Tj
T*
0.0137 Tc
0.1365 Tw
[(I/O cost for inserts of new index entries.  The most important reason for the comparison of the)]TJ
T*
0.017 Tc
0.1706 Tw
(LSM-tree and B-tree that we perform here is that these two structures are easily comparable,)Tj
T*
0.0151 Tc
0.1505 Tw
(both containing an entry for each row indexed in collation sequence at a leaf level, with upper)Tj
T*
0.0106 Tc
0.1059 Tw
[(level directory information that channels access along a path of page-sized nodes.  The analysis)]TJ
T*
0.0191 Tc
0.191 Tw
(of I/O advantage for new entry inserts to the LSM-tree is effectively illustrated by analogy to)Tj
T*
0.0138 Tc
0.1378 Tw
[(the less efficient but well understood behavior of the B-tree.)]TJ
0 -2.3077 TD
0.0109 Tc
0.1081 Tw
(In Section 3.2 following, we compare the I/O insert costs and demonstrate that the small ratio of)Tj
0 -1.1538 TD
0.0107 Tc
0.1063 Tw
[(cost for an LSM-tree of two components to that of a B-tree is a product of two factors.  The first)]TJ
T*
0.0203 Tc
0.2027 Tw
(factor, COST)Tj
/TT11 1 Tf
9 0 0 9 137.3185 95 Tm
0 Tc
0 Tw
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 142.6359 97 Tm
0.0467 Tc
(/COST)Tj
9.36 0 0 9.36 176.8448 95 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 183.5649 97 Tm
0.0136 Tc
0.1351 Tw
(, corresponds to the advantage gained in the LSM-tree by performing all)Tj
-10.7274 -1.25 TD
0.017 Tc
0.1706 Tw
(I/O in multi-page blocks, thus utilizing disk arms much more efficiently by saving a great deal)Tj
ET
endstream
endobj
32 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
34 0 obj
<<
/Length 9185
>>
stream
BT
/TT2 1 Tf
12 0 0 12 290 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-9-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0107 Tc
0.107 Tw
[(of seek and rotational latency time.  The COST)]TJ
/TT11 1 Tf
9 0 0 9 302.201 708 Tm
0 Tc
0 Tw
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 307.4604 710 Tm
0.0099 Tc
0.0994 Tw
[( term represents the disk arm cost of reading or)]TJ
-22.6404 -1.25 TD
0.0069 Tc
0.0691 Tw
(writing a page on disk as part of a multi-page block, and COST)Tj
9.36 0 0 9.36 374.1167 695 Tm
0 Tc
0 Tw
(P)Tj
10.4 0 0 10.4 380.6418 697 Tm
0.0071 Tc
0.0714 Tw
[( represents the cost of reading or)]TJ
-29.6771 -1.25 TD
0.0146 Tc
0.1458 Tw
[(writing a page at random.  The second factor that determines I/O cost ratio between the LSM-)]TJ
0 -1.1538 TD
0.0148 Tc
0.1483 Tw
(tree and the B-tree is given as 1/M, representing the batching efficiency to be gained during a)Tj
T*
0.0107 Tc
0.1066 Tw
[(merge step.  M is the average number of entries merged from C)]TJ
9.36 0 0 9.36 385.7165 658 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 391.2781 660 Tm
0.0102 Tc
0.1018 Tw
[( into a page-sized leaf node of)]TJ
-30.6998 -1.25 TD
0 Tc
0 Tw
(C)Tj
9.36 0 0 9.36 80.2415 645 Tm
(1)Tj
10.4 0 0 10.4 85.9541 647 Tm
0.0154 Tc
0.1537 Tw
[(.  Inserting multiple entries per leaf is an advantage over a \(large\) B-tree where each entry)]TJ
-1.3417 -1.25 TD
0.0096 Tc
0.0958 Tw
[(inserted normally requires two I/Os to read and write the leaf node on which it resides.  Because)]TJ
0 -1.1538 TD
0.0144 Tc
0.1439 Tw
(of the Five minute rule, it is unlikely in Example 1.2 that a leaf page read in from a B-tree will)Tj
T*
0.0174 Tc
0.1744 Tw
[(be re-referenced for a second insert during the short time it remains in buffer.  Thus there is)]TJ
T*
0.0125 Tc
0.1245 Tw
[(no batching effect in a B-tree index:  each leaf node is read in, an insert of a new entry is per-)]TJ
T*
0.0286 Tc
0.2854 Tw
[(formed, and it is written out again.  In an LSM-tree however, there will be an important)]TJ
T*
0.013 Tc
0.1303 Tw
(batching effect as long as the C)Tj
9.36 0 0 9.36 230.1414 572 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 235.792 574 Tm
0.0141 Tc
0.1414 Tw
[( component is sufficiently large in comparison to the C)]TJ
9.36 0 0 9.36 506.2499 572 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 511.9005 574 Tm
0.0153 Tc
0.1528 Tw
[( com-)]TJ
-42.2981 -1.25 TD
0.0119 Tc
0.1192 Tw
[(ponent.  For example, with 16 byte index entries, we can expect 250 entries in a fully packed 4)]TJ
0 -1.1538 TD
0.0108 Tc
0.1073 Tw
[(KByte node.  If the C)]TJ
9.36 0 0 9.36 175.8984 547 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 181.534 549 Tm
0.0113 Tc
0.1136 Tw
[( component is 1/25 the size of the C)]TJ
9.36 0 0 9.36 361.1475 547 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 366.7831 549 Tm
0.0153 Tc
0.1532 Tw
[( component, we will expect \(about\))]TJ
-28.3445 -1.25 TD
0.0133 Tc
0.1328 Tw
(10 new entries entering each new C)Tj
9.36 0 0 9.36 250.9006 534 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 256.5132 536 Tm
0.0099 Tc
0.0989 Tw
[( node of 250 entries during a node I/O.  It is clear that the)]TJ
-17.7417 -1.25 TD
0.0193 Tc
0.1936 Tw
(LSM-tree has an efficiency advantage over the B-tree because of these two factors, and the)Tj
0 -1.1538 TD
0.011 Tc
0.1092 Tw
("rolling merge" process is fundamental to gaining this advantage.)Tj
0 -2.3077 TD
0.0119 Tc
0.1197 Tw
(The factor COST)Tj
/TT11 1 Tf
9 0 0 9 154.9492 485 Tm
0 Tc
0 Tw
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 160.1627 487 Tm
0.0338 Tc
(/COST)Tj
9.36 0 0 9.36 193.7016 485 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 200.2906 487 Tm
0.0094 Tc
0.0943 Tw
[( corresponding to the ratio of efficiency of multi-page block over single)]TJ
-12.3356 -1.25 TD
0.0103 Tc
0.103 Tw
(page I/O is a constant, and we can do nothing with the LSM-tree structure to have any effect on)Tj
0 -1.1538 TD
0.0144 Tc
0.1447 Tw
[(it.  However the batching efficiency 1/M of a merge step is proportional to the ratio in size be-)]TJ
T*
0.0172 Tc
0.1725 Tw
(tween the C)Tj
9.36 0 0 9.36 133.0558 448 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 138.7834 450 Tm
0.0115 Tc
0.1156 Tw
[( and the C)]TJ
9.36 0 0 9.36 191.5777 448 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 197.3053 450 Tm
0.015 Tc
0.1498 Tw
[( components;  the larger the C)]TJ
9.36 0 0 9.36 351.2305 448 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 356.9581 450 Tm
0.0167 Tc
0.1671 Tw
[( component in comparison to the C)]TJ
9.36 0 0 9.36 534.4144 448 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 72 437 Tm
0.009 Tc
0.0902 Tw
[(component, the more efficiency is gained in the merge;  up to a certain point, this means that we)]TJ
T*
0.0128 Tc
0.1274 Tw
(can save additional money on disk arm cost by using a larger C)Tj
9.36 0 0 9.36 388.0721 423 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 393.7077 425 Tm
0.0136 Tc
0.136 Tw
[( component, but this entails a)]TJ
-30.9334 -1.25 TD
0.0131 Tc
0.1307 Tw
(larger memory cost to contain the C)Tj
9.36 0 0 9.36 249.6543 410 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 255.2679 412 Tm
0.012 Tc
0.12 Tw
[( component.  There is an optimal mix of sizes to minimize)]TJ
-17.6219 -1.25 TD
0.02 Tc
0.1996 Tw
(the total cost of disk arms and memory capacity, but the solution can be quite expensive in)Tj
0 -1.1538 TD
0.018 Tc
0.1793 Tw
(terms of memory for a large C)Tj
9.36 0 0 9.36 226.738 385 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 232.5696 387 Tm
0.0163 Tc
0.1636 Tw
[(.   It is this consideration that motivates the need for a multi-)]TJ
-15.4394 -1.25 TD
0.0186 Tc
0.1856 Tw
[(component LSM-tree, which is investigated in Section 3.3.  A three component LSM-tree has)]TJ
0 -1.1538 TD
0.0091 Tc
0.0918 Tw
(memory resident component C)Tj
9.36 0 0 9.36 219.6196 360 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 225.0242 362 Tm
0.0069 Tc
0.0688 Tw
[( and disk resident components C)]TJ
9.36 0 0 9.36 382.2913 360 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 387.6959 362 Tm
0.0043 Tc
0.0434 Tw
[( and C)]TJ
9.36 0 0 9.36 419.5093 360 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 424.9139 362 Tm
0.008 Tc
0.08 Tw
(, where the components)Tj
-33.934 -1.25 TD
0.014 Tc
0.1404 Tw
[(increase in size with increasing subscript.  There is a rolling merge processes in train between)]TJ
0 -1.1538 TD
0 Tc
0 Tw
(C)Tj
9.36 0 0 9.36 79.8685 335 Tm
(0)Tj
10.4 0 0 10.4 85.3221 337 Tm
0.0054 Tc
0.054 Tw
[( and C)]TJ
9.36 0 0 9.36 117.4235 335 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 122.8771 337 Tm
0.0073 Tc
0.0729 Tw
[( as well as a separate rolling merge between C)]TJ
9.36 0 0 9.36 349.3962 335 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 354.8498 337 Tm
0.0054 Tc
0.054 Tw
[( and C)]TJ
9.36 0 0 9.36 386.9512 335 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 392.4048 337 Tm
0.0072 Tc
0.0718 Tw
[( that move entries out from the)]TJ
-30.8082 -1.25 TD
0.0179 Tc
0.179 Tw
(smaller to the larger component each time the smaller component exceeds its threshold size.)Tj
0 -1.1538 TD
0.0122 Tc
0.1217 Tw
(The advantage of an LSM-tree of three components is that batching efficiency can be geometri-)Tj
T*
0.0091 Tc
0.0912 Tw
(cally improved by choosing C)Tj
9.36 0 0 9.36 213.7129 298 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 219.1665 300 Tm
0.0075 Tc
0.0749 Tw
[( to optimize the combined ratio of size between C)]TJ
9.36 0 0 9.36 457.1846 298 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 462.6382 300 Tm
0.0054 Tc
0.054 Tw
[( and C)]TJ
9.36 0 0 9.36 494.7396 298 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 500.1932 300 Tm
0.0064 Tc
0.0648 Tw
[( and be-)]TJ
-41.1724 -1.25 TD
0.0054 Tc
0.0542 Tw
(tween C)Tj
9.36 0 0 9.36 111.1079 285 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 116.4445 287 Tm
0.0029 Tc
0.0284 Tw
[( and C)]TJ
9.36 0 0 9.36 147.8579 285 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 153.1945 287 Tm
0.0027 Tc
0.0273 Tw
[(.  As a result, the size of the C)]TJ
9.36 0 0 9.36 295.4038 285 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 300.7404 287 Tm
0.0045 Tc
0.0455 Tw
[( memory component can be made much smaller in)]TJ
-21.9943 -1.25 TD
0.0161 Tc
0.1601 Tw
(proportion to the total index, with a significant improvement in cost.)Tj
0 -2.3077 TD
0.0195 Tc
0.1953 Tw
(Section 3.4 derives a mathematical procedure for arriving at the optimal relative sizes of the)Tj
0 -1.1538 TD
0.0231 Tc
0.2306 Tw
(different components of a multi-component LSM-tree to minimize total cost for memory and)Tj
T*
0.0389 Tc
0 Tw
(disk.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 200 Tm
0.0307 Tc
0.3068 Tw
[(3.1  The Disk Model)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 175 Tm
0.0159 Tc
0.1587 Tw
(The advantage of the LSM-tree over the B-tree lies mainly in the area of reduced cost for I/O)Tj
T*
0.0113 Tc
0.1135 Tw
(\(although disk components that are 100% full offer a capacity cost advantage as well over other)Tj
T*
0.0211 Tc
0.2105 Tw
[(known flexible disk structures\).  Part of this I/O cost advantage for the LSM-tree is the fact)]TJ
T*
0.0063 Tc
0.0624 Tw
[(that a page I/O can be amortized along with many other pages of a multi-page block.)]TJ
/TT4 1 Tf
0 -2.3077 TD
0.0323 Tc
0.323 Tw
[(Definition 3.1.1.  I/O Costs and Data Temperature.  )]TJ
/TT6 1 Tf
28.5922 0 TD
0.0289 Tc
0.2895 Tw
(As we store data of a particular)Tj
-28.5922 -1.1538 TD
0.0141 Tc
0.1415 Tw
(kind on disk, rows in a table or entries in an index, we find that as we increase the amount of)Tj
T*
0.0095 Tc
0.0956 Tw
(data stored, the disk arms see more and more utilization under normal use in a given application)Tj
T*
0.0142 Tc
0.1422 Tw
[(environment.  We are paying for two things when we buy a disk:  first, disk capacity, and sec-)]TJ
ET
endstream
endobj
35 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
37 0 obj
<<
/Length 8653
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-10-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0141 Tc
0.1413 Tw
[(ond, disk I/O rate.  Usually one of these two will be a limiting factor in any kind of use.  If ca-)]TJ
0 -1.1538 TD
0.0207 Tc
0.2072 Tw
(pacity is the limiting factor, we will fill up the disks and find that the disk arms that provide)Tj
T*
0.013 Tc
0.13 Tw
[(the I/Os are only fractionally utilized by the application;  on the other hand we may find that as)]TJ
T*
0.0228 Tc
0.2282 Tw
(we add data the disk arms reach their full utilization rate when the disk is only fractionally)Tj
T*
0.0149 Tc
0.1492 Tw
(full, and this means that the I/O rate is the limiting factor.)Tj
0 -2.3077 TD
0.0065 Tc
0.0655 Tw
(A random page I/O during peak use has a )Tj
/TT10 1 Tf
19.6961 0 TD
0.0207 Tc
0 Tw
(cost)Tj
/TT6 1 Tf
1.9167 0 TD
0.0061 Tc
0.0604 Tw
[(,  COST)]TJ
9.36 0 0 9.36 336.0294 636 Tm
0 Tc
0 Tw
(P)Tj
10.4 0 0 10.4 342.5545 638 Tm
0.0058 Tc
0.0574 Tw
(, which is based on a fair rent for the disk)Tj
-26.0149 -1.25 TD
0.0144 Tc
0.1445 Tw
(arm, whereas the cost of a disk page I/O as part of a large multi-page block I/O will be repre-)Tj
0 -1.1538 TD
0.0093 Tc
0.0933 Tw
(sented as COST)Tj
/TT11 1 Tf
9 0 0 9 152.1757 611 Tm
0 Tc
0 Tw
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 157.3272 613 Tm
0.0065 Tc
0.0658 Tw
(, and this quantity is a good deal smaller because it amortizes seek time and ro-)Tj
-8.2045 -1.25 TD
0.0096 Tc
0.0964 Tw
[(tational latency over multiple pages.  We adopt the following nomenclature for storage costs:)]TJ
1.25 -2.3077 TD
0.007 Tc
0 Tw
(COST)Tj
9.36 0 0 9.36 114.1814 574 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 119.439 576 Tm
0.0013 Tc
0.0132 Tw
[( = cost of 1 MByte of disk storage)]TJ
-3.3114 -1.25 TD
0.0108 Tc
0 Tw
(COST)Tj
9.36 0 0 9.36 114.3374 561 Tm
0 Tc
(m)Tj
10.4 0 0 10.4 122.2554 563 Tm
0.0022 Tc
0.0224 Tw
[( = cost of 1 MByte of memory storage)]TJ
-3.5822 -1.25 TD
0.0203 Tc
0 Tw
(COST)Tj
9.36 0 0 9.36 114.7334 548 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 121.1595 550 Tm
0.0045 Tc
0.0453 Tw
[( = disk arm cost to provide 1 page/second I/O rate, for random pages)]TJ
-3.4769 -1.4423 TD
0.0381 Tc
0 Tw
(COST)Tj
/TT11 1 Tf
9 0 0 9 115.4734 535 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 120.6839 537 Tm
0.0082 Tc
0.0816 Tw
[( = disk arm cost to provide 1 page/second I/O rate, as part of multi-page block I/O)]TJ
-4.6811 -2.4038 TD
0.0052 Tc
0.0522 Tw
(Given an application referencing a body of data with S MBytes of storage and H random pages per)Tj
0 -1.1538 TD
0.0227 Tc
0.2271 Tw
(second of I/O transfer \(we assume no data is buffered\), the rent for disk arms is given by)Tj
0 -1.3462 TD
0 Tc
0 Tw
(H)Tj
9.36 0 0 9.36 79.9535 489 Tm
(.)Tj
10.4 0 0 10.4 82.707 486 Tm
0.041 Tc
(COST)Tj
9.36 0 0 9.36 113.3005 484 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 119.9115 486 Tm
0.0075 Tc
0.075 Tw
[( and the rent for disk media is given by S)]TJ
9.36 0 0 9.36 318.8629 489 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 321.6164 486 Tm
0.041 Tc
(COST)Tj
9.36 0 0 9.36 352.2098 484 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 357.7224 486 Tm
0.0084 Tc
0.0834 Tw
[(.  Depending on which cost is the lim-)]TJ
-27.4733 -1.25 TD
0.0113 Tc
0.1134 Tw
[(iting factor the other comes for free, so the calculated cost for accessing this disk resident data,)]TJ
0 -1.1538 TD
0.0065 Tc
0.0659 Tw
(COST-D, is given by:)Tj
1.25 -2.5 TD
-0.016 Tc
0 Tw
(COST-D = max\(S)Tj
9.36 0 0 9.36 164.4389 438 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 166.9654 435 Tm
-0.0197 Tc
(COST)Tj
9.36 0 0 9.36 195.0348 433 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 200.0924 435 Tm
-0.0121 Tc
(, H)Tj
9.36 0 0 9.36 213.0039 438 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 215.5304 435 Tm
-0.0197 Tc
(COST)Tj
9.36 0 0 9.36 243.5998 433 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 249.6659 435 Tm
(\))Tj
-17.0833 -2.4038 TD
0.0163 Tc
0.1626 Tw
[(COST-D will also be the total cost for supporting data access for this application, COST-TOT,)]TJ
0 -1.1538 TD
0.0072 Tc
0.072 Tw
[(under the assumption given that none of the disk pages are buffered in memory.  In this case, the)]TJ
T*
0.0199 Tc
0.1987 Tw
(total cost increases linearly with the random I/O rate H even while the total storage require-)Tj
T*
0.0262 Tc
0.2617 Tw
[(ment S remains constant.  Now the point of memory buffering is to replace disk I/O with)]TJ
T*
0.014 Tc
0.1401 Tw
[(memory buffers at a certain point of increasing I/O rate to the same total storage S.  If we as-)]TJ
T*
0.0074 Tc
0.0738 Tw
(sume under these circumstances that memory buffers can be populated in advance to support the)Tj
T*
0.0128 Tc
0.1275 Tw
(random I/O requests, the cost for disk drops to the cost for disk media alone, so the calculated)Tj
T*
0.1266 Tw
(cost of accessing this buffer resident data, COST-B, is simply the cost of memory plus the cost)Tj
T*
0.0054 Tc
0.0541 Tw
(of disk media:)Tj
1.25 -2.5 TD
-0.0323 Tc
0 Tw
(COST-B = S)Tj
9.36 0 0 9.36 139.7185 291 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 142.169 288 Tm
-0.0401 Tc
(COST)Tj
9.36 0 0 9.36 169.3905 286 Tm
0 Tc
(m)Tj
10.4 0 0 10.4 176.7364 288 Tm
-0.0261 Tc
( + S)Tj
9.36 0 0 9.36 194.4415 291 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 196.892 288 Tm
-0.0401 Tc
(COST)Tj
9.36 0 0 9.36 224.1134 286 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 72 263 Tm
0.016 Tc
0.16 Tw
(Now the total cost for supporting data access for this application is the minimum of these two)Tj
0 -1.1538 TD
0.0042 Tc
0.042 Tw
(calculated costs:)Tj
1.25 -2.5 TD
-0.0128 Tc
0 Tw
(COST-TOT = min\(max\(S)Tj
9.36 0 0 9.36 197.6083 228 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 200.1488 225 Tm
-0.0161 Tc
(COST)Tj
9.36 0 0 9.36 228.3703 223 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 233.4549 225 Tm
-0.0099 Tc
(, H)Tj
9.36 0 0 9.36 246.4353 228 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 248.9758 225 Tm
-0.0161 Tc
(COST)Tj
9.36 0 0 9.36 277.1973 223 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 283.2953 225 Tm
-0.009 Tc
(\), S)Tj
9.36 0 0 9.36 299.0982 228 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 301.6387 225 Tm
-0.0161 Tc
(COST)Tj
9.36 0 0 9.36 329.8602 223 Tm
0 Tc
(m)Tj
10.4 0 0 10.4 337.4761 225 Tm
-0.0105 Tc
( + S)Tj
9.36 0 0 9.36 355.8292 228 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 358.3697 225 Tm
-0.0161 Tc
(COST)Tj
9.36 0 0 9.36 386.5912 223 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 391.6758 225 Tm
(\))Tj
-30.7381 -2.4038 TD
0.005 Tc
0.0505 Tw
(There are three cost regimes in the graph of COST-TOT as the page access rate H increases for a)Tj
0 -1.1538 TD
0.0087 Tc
0.0867 Tw
[(given volume of data S.  See Figure 3.1, where we graph COST-TOT/MByte vs H/S, or accesses)]TJ
T*
0.0213 Tc
0.214 Tw
[(per second per megabyte.  If S is small, COST-TOT is limited by the cost of disk medium,)]TJ
0 -1.3462 TD
0 Tc
0 Tw
(S)Tj
9.36 0 0 9.36 79.3007 165 Tm
(.)Tj
10.4 0 0 10.4 82.0372 162 Tm
0.0364 Tc
(COST)Tj
9.36 0 0 9.36 112.4427 160 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 117.9213 162 Tm
0.0076 Tc
0.076 Tw
[(, a constant for fixed S.  As H/S increases, the cost comes to be dominated by disk arm)]TJ
-4.4155 -1.4423 TD
0.0136 Tc
0.1355 Tw
(use, H)Tj
9.36 0 0 9.36 104.3134 150 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 107.1089 147 Tm
0.0521 Tc
(COST)Tj
9.36 0 0 9.36 138.1664 145 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 144.8784 147 Tm
0.0109 Tc
0.1087 Tw
[(, and is proportional to increasing H/S for fixed S.  Finally, at the point where the)]TJ
-7.0075 -1.4423 TD
0.0086 Tc
0.0851 Tw
(Five Minute rule dictates memory residence, the dominant factor becomes S)Tj
9.36 0 0 9.36 438.2249 135 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 440.9394 132 Tm
0.0304 Tc
(COST)Tj
9.36 0 0 9.36 471.0929 130 Tm
0 Tc
(m)Tj
10.4 0 0 10.4 479.2308 132 Tm
0.0033 Tc
0.0329 Tw
[( + S)]TJ
9.36 0 0 9.36 498.8399 135 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 501.5544 132 Tm
0.0304 Tc
(COST)Tj
9.36 0 0 9.36 531.7079 130 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 537.1404 132 Tm
(,)Tj
-44.725 -1.25 TD
0.0221 Tc
0.2208 Tw
[(which is dominated by the memory term for present prices,  COST)]TJ
9.36 0 0 9.36 416.3421 117 Tm
0 Tc
0 Tw
(m)Tj
10.4 0 0 10.4 425.156 119 Tm
0.021 Tc
0.2097 Tw
[( >> COST)]TJ
9.36 0 0 9.36 478.0773 117 Tm
0 Tc
0 Tw
(d)Tj
10.4 0 0 10.4 483.9619 119 Tm
0.0312 Tc
0.3116 Tw
(. Following)Tj
-39.6117 -1.25 TD
0.0048 Tc
0.0482 Tw
[(Copeland et al. [6],  we define the )]TJ
/TT10 1 Tf
15.7352 0 TD
0.0095 Tc
0 Tw
(temperature )Tj
/TT6 1 Tf
5.8785 0 TD
0.0053 Tc
0.0526 Tw
(of a body of data as H/S, and we name these three)Tj
-21.6137 -1.1538 TD
0.009 Tc
0.0907 Tw
(cost regimes )Tj
/TT10 1 Tf
6.2451 0 TD
0.0231 Tc
0 Tw
(cold)Tj
/TT6 1 Tf
1.9268 0 TD
0.0023 Tc
(, )Tj
/TT10 1 Tf
0.5835 0 TD
0.0308 Tc
(warm)Tj
/TT6 1 Tf
2.5674 0 TD
0.0048 Tc
0.0485 Tw
(, and )Tj
/TT10 1 Tf
2.6277 0 TD
0.0234 Tc
0 Tw
(hot)Tj
/TT6 1 Tf
1.4602 0 TD
0.0074 Tc
0.0742 Tw
[(.  Hot data has a high enough access rate H, and thus tempera-)]TJ
-15.4108 -1.1538 TD
0.0162 Tc
0.1612 Tw
[(ture H/S, to justify memory buffer residence \(see [6]\).  At the other extreme, cold data is disk)]TJ
ET
endstream
endobj
38 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT6 6 0 R
/TT10 13 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
40 0 obj
<<
/Length 5540
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-11-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0163 Tc
0.1628 Tw
[(capacity limited:  the disk volume that it must occupy comes with enough disk arms to satisfy)]TJ
0 -1.1538 TD
0.0123 Tc
0.1228 Tw
[(the I/O rate.  In between is warm data, whose access requirements must be met by limiting the)]TJ
T*
0.0073 Tc
0.0736 Tw
[(data capacity used under each disk arm, so that disk arms are the limit of use.  These ranges are)]TJ
T*
0.0092 Tc
0.092 Tw
(divided as follows:)Tj
0 -2.3077 TD
0.0184 Tc
0 Tw
(     T)Tj
9.36 0 0 9.36 93.772 648 Tm
0.0021 Tc
(f )Tj
10.4 0 0 10.4 99.216 650 Tm
0.0068 Tc
0.0679 Tw
[(=  COST)]TJ
9.36 0 0 9.36 141.8668 648 Tm
0 Tc
0 Tw
(d)Tj
10.4 0 0 10.4 147.3154 650 Tm
0.0286 Tc
(/COST)Tj
9.36 0 0 9.36 180.5793 648 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 187.1143 650 Tm
0.0086 Tc
0.0859 Tw
[( = temperature division point between cold and warm data \("freezing"\))]TJ
-11.0687 -1.25 TD
0.0187 Tc
0 Tw
(     T)Tj
9.36 0 0 9.36 93.793 635 Tm
0 Tc
(b)Tj
10.4 0 0 10.4 99.2466 637 Tm
0.0053 Tc
0.0526 Tw
[( =  COST)]TJ
9.36 0 0 9.36 144.9588 635 Tm
0 Tc
0 Tw
(m)Tj
10.4 0 0 10.4 153.1268 637 Tm
0.0291 Tc
(/COST)Tj
9.36 0 0 9.36 186.4207 635 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 192.9607 637 Tm
0.0086 Tc
0.0852 Tw
[( = temperature division point between warm and hot data \("boiling"\))]TJ
-11.6308 -2.4038 TD
0.0163 Tc
0.1622 Tw
[(Similarly-defined ranges exist for the multi-page block access case using COST)]TJ
/TT11 1 Tf
9 0 0 9 468.52 610 Tm
0 Tc
0 Tw
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 473.8644 612 Tm
0.0146 Tc
0.1464 Tw
(. The division)Tj
-38.6408 -1.25 TD
0.01 Tc
0.1001 Tw
(between the warm and hot regions is a generalization of the Five Minute Rule [13]. )Tj
/TT8 1 Tf
10 0 0 10 478.3759 599 Tm
0 Tc
0 Tw
()Tj
ET
1 i 
119 438 11 -2 re
f
164 528 m
166 528 l
166 526 l
130 436 l
128 436 l
128 438 l
f
120 556 m
123 544 l
117 544 l
120 556 l
f*
120 544 1 -115 re
f
337 430 m
325 427 l
325 433 l
337 430 l
f*
121 430 204 -1 re
f
164 528 184 -2 re
f
BT
/TT6 1 Tf
10.4 0 0 10.4 340 435 Tm
(   Temperature H/S)Tj
T*
(\(accesses/sec/Mbyte\))Tj
-24.9039 12.9808 TD
(COST-TOT/Mbyte)Tj
9.36 0 0 9.36 209 554 Tm
(Hot Data)Tj
-3.8462 -6.9444 TD
(Warm Data)Tj
ET
147 491 m
159 495 l
159 489 l
147 491 l
f*
159 492 12 -1 re
f
224 527 m
221 539 l
227 539 l
224 527 l
f*
224 549 1 -12 re
f
125 437 m
128 425 l
122 425 l
125 437 l
f*
BT
9.36 0 0 9.36 108 407 Tm
(Cold Data)Tj
ET
125 430 1 -12 re
f
BT
/TT4 1 Tf
10.4 0 0 10.4 72 382 Tm
0.0161 Tc
0.1607 Tw
(Figure 3.1)Tj
/TT6 1 Tf
5.045 0 TD
0.0107 Tc
0.1069 Tw
[(.  Graph of cost of access per MByte vs. Temperature)]TJ
-5.045 -2.3077 TD
0.0136 Tc
0.1358 Tw
(As stressed in [6], it is straightforward to calculate the temperature of a database table when it)Tj
0 -1.1538 TD
0.0228 Tc
0.2275 Tw
[(is accessed uniformly.  However, the relevance of this temperature depends on the access)]TJ
T*
0.0177 Tc
0.1772 Tw
[(method:  the temperature that is relevant involves the actual disk access rate, not the logical)]TJ
T*
0.0317 Tc
0.3175 Tw
[(insert rate \(including batched buffered inserts\).  One way to express what an LSM-tree)]TJ
T*
0.0108 Tc
0.1081 Tw
(achieves is to say that it reduces the actual disk accesses and thus lowers the effective temper-)Tj
T*
0.007 Tc
0.0701 Tw
[(ature of the indexed data.  This idea is revisited in the conclusions of Section 6.)]TJ
/TT4 1 Tf
0 -2.3077 TD
0.0459 Tc
0.4591 Tw
(Multi-page block I/O Advantage)Tj
/TT6 1 Tf
T*
0.0095 Tc
0.0949 Tw
(The advantage to be gained by multi-page block I/O is central to several earlier access methods,)Tj
0 -1.1538 TD
0.0241 Tc
0.2414 Tw
[(such as Bounded Disorder files [16], SB-trees [21], and Log Structured files [23].  A 1989)]TJ
T*
0.0218 Tc
0.2178 Tw
(IBM publication analyzing DB2 utility performance on IBM 3380 disk [29] gave the following)Tj
T*
0.007 Tc
0.0699 Tw
[(analysis:  ". . . The time to complete a  [read of a single page]  could be estimated to be about 20)]TJ
T*
0.0142 Tc
0.1422 Tw
[(ms \(assumes 10ms seek, 8.3ms rotational delay, 1.7ms read\)  . . .  The time to perform a se-)]TJ
T*
0.01 Tc
0.1 Tw
(quential prefetch read [of 64 contiguous pages] could be estimated to be about 125ms \(assumes)Tj
T*
0.02 Tc
0.2005 Tw
(10ms seek, 8.3ms rotational delay, 106.9ms read of 64 records [pages]\), or about 2 ms per)Tj
0 -1.3462 TD
0.052 Tc
0 Tw
(page.)Tj
12.48 0 0 12.48 100.7304 164 Tm
0 Tc
(")Tj
10.4 0 0 10.4 105.6205 164 Tm
0.0133 Tc
0.1328 Tw
[(   Thus the ratio of 2 ms per page for multi-page block I/O to 20 ms for random I/O im-)]TJ
-3.2327 -1.25 TD
0.0088 Tc
0.0886 Tw
(plies a ratio of rental costs for the disk arm, COST)Tj
/TT11 1 Tf
9 0 0 9 316.033 149 Tm
0 Tc
0 Tw
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 321.2734 151 Tm
0.0372 Tc
(/COST)Tj
9.36 0 0 9.36 354.9874 149 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 361.6104 151 Tm
0.0085 Tc
0.0842 Tw
[(, equal to about 1/10.  An analysis of)]TJ
-27.8472 -1.25 TD
0.0077 Tc
0.0772 Tw
(a more recent SCSI-2 disk read of a 4 KByte page gives us a 9 ms seek, 5.5 ms rotational delay,)Tj
0 -1.1538 TD
0.0114 Tc
0.1145 Tw
[(and 1.2 ms read, totalling 16 ms.  Reading 64 contiguous 4 KByte pages requires a 9 ms seek,)]TJ
T*
0.0139 Tc
0.1396 Tw
(5.5 ms rotational delay, and 80 ms read for 64 pages, or a total of 95 ms, about 1.5 ms/page.)Tj
T*
-0.003 Tc
0 Tw
(Once again COST)Tj
/TT11 1 Tf
9 0 0 9 156.5072 100 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 161.4467 102 Tm
-0.0034 Tc
(/COST)Tj
9.36 0 0 9.36 193.0506 100 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 199.2936 102 Tm
-0.0024 Tc
( is again equal to about 1/10.)Tj
ET
endstream
endobj
41 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
45 0 obj
<<
/Length 8125
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-12-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0101 Tc
0.1007 Tw
(We analyze a workstation server system with SCSI-2 disks holding one GByte and costing about)Tj
0 -1.1538 TD
0.0151 Tc
0.1507 Tw
[($1000, and a peak rate of approximately 60-70 I/Os per second.  The nominal usable I/O rate)]TJ
T*
0.0135 Tc
0.1348 Tw
[(to avoid long I/O queues is lower, about 40 I/Os per second.  The multi-block I/O advantage is)]TJ
T*
0.0514 Tc
0 Tw
(significant.)Tj
/TT4 1 Tf
1.25 -2.3077 TD
0.047 Tc
0.4698 Tw
[( Typical Workstation Costs, 1995:)]TJ
/TT6 1 Tf
-1.25 -1.1538 TD
0.0399 Tc
1.413 Tw
[( COST)]TJ
9.36 0 0 9.36 120.5494 636 Tm
0 Tc
0 Tw
(m)Tj
10.4 0 0 10.4 128.7944 638 Tm
0.0116 Tc
0.1164 Tw
[( = $100/MByte)]TJ
-3.7302 -1.25 TD
0.0242 Tc
0 Tw
(COST)Tj
9.36 0 0 9.36 119.8975 623 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 125.285 625 Tm
0.0063 Tc
0.0624 Tw
[( = $1/MByte)]TJ
-3.3928 -1.25 TD
0.0547 Tc
0 Tw
(COST)Tj
9.36 0 0 9.36 121.1655 610 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 127.9005 612 Tm
0.0161 Tc
0.1605 Tw
[( = $25/\(IOs/sec\))]TJ
-3.6443 -1.25 TD
0.0564 Tc
0 Tw
(COST)Tj
/TT11 1 Tf
9 0 0 9 121.2374 597 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 126.5789 599 Tm
0.0167 Tc
0.1676 Tw
[( = $2.5/\(IOs/sec\))]TJ
-5.248 -1.4423 TD
1.4529 Tc
0 Tw
( T)Tj
9.36 0 0 9.36 96.8117 582 Tm
0 Tc
(f)Tj
10.4 0 0 10.4 99.6002 584 Tm
0.0105 Tc
0.1048 Tw
[( = COST)]TJ
9.36 0 0 9.36 143.285 582 Tm
0 Tc
0 Tw
(d)Tj
10.4 0 0 10.4 148.8666 584 Tm
0.0441 Tc
(/COST)Tj
9.36 0 0 9.36 182.9405 582 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 189.6346 584 Tm
0.0105 Tc
0.1048 Tw
[( = .04 IOs/\(sec)]TJ
9.36 0 0 9.36 262.4544 587 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 265.2429 584 Tm
0.0146 Tc
0.1459 Tw
[(MByte\)  \("freezing point"\))]TJ
-16.8503 -1.4423 TD
0 Tc
0 Tw
(T)Tj
9.36 0 0 9.36 96.7917 567 Tm
(b)Tj
10.4 0 0 10.4 102.3573 569 Tm
0.01 Tc
0.1003 Tw
[( = COST)]TJ
9.36 0 0 9.36 145.9131 567 Tm
0 Tc
0 Tw
(m)Tj
10.4 0 0 10.4 154.2491 569 Tm
0.0422 Tc
(/COST)Tj
9.36 0 0 9.36 188.223 567 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 194.898 569 Tm
0.0091 Tc
0.0916 Tw
[( = 4 IOs/\(sec)]TJ
9.36 0 0 9.36 258.2304 572 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 261.0109 569 Tm
0.0134 Tc
0.1335 Tw
[(MByte\)  \("boiling point"\))]TJ
-18.1741 -2.4038 TD
0.0135 Tc
0.1345 Tw
(We use the T)Tj
9.36 0 0 9.36 139.7235 542 Tm
0 Tc
0 Tw
(b)Tj
10.4 0 0 10.4 145.4231 544 Tm
0.0144 Tc
0.1445 Tw
[( value to derive the reference interval )]TJ
/TT11 1 Tf
10 0 0 10 335.951 544 Tm
0 Tc
0 Tw
<006f>Tj
/TT6 1 Tf
10.4 0 0 10.4 340.7577 544 Tm
0.0153 Tc
0.1526 Tw
[( for the Five Minute Rule, which asserts)]TJ
-25.8421 -1.25 TD
0.1528 Tw
[(that data sustaining an I/O rate of one page every  seconds is incurring the same cost as the)]TJ
0 -1.1538 TD
0.003 Tc
0.0298 Tw
[(memory needed to hold it.  That common cost is:)]TJ
1.7308 -2.5 TD
0 Tc
0 Tw
(\(1/)Tj
/TT11 1 Tf
10 0 0 10 102.1367 493 Tm
<006f>Tj
/TT6 1 Tf
10.4 0 0 10.4 106.5264 493 Tm
(\))Tj
9.36 0 0 9.36 109.9896 496 Tm
(.)Tj
10.4 0 0 10.4 112.5901 493 Tm
0.0025 Tc
(COST)Tj
9.36 0 0 9.36 141.5836 491 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 147.8266 493 Tm
0.0006 Tc
0.0059 Tw
[( = pagesize)]TJ
9.36 0 0 9.36 201.4995 496 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 204.1 493 Tm
0.0025 Tc
(COST)Tj
9.36 0 0 9.36 233.0934 491 Tm
0 Tc
(m)Tj
10.4 0 0 10.4 72 466 Tm
0.0149 Tc
0.1488 Tw
(Solving for )Tj
/TT11 1 Tf
10 0 0 10 128.9794 466 Tm
0 Tc
0 Tw
<006f>Tj
/TT6 1 Tf
10.4 0 0 10.4 133.787 466 Tm
0.0098 Tc
0.0977 Tw
(, we see )Tj
/TT11 1 Tf
10 0 0 10 179.3733 466 Tm
0 Tc
0 Tw
<006f>Tj
/TT6 1 Tf
10.4 0 0 10.4 184.181 466 Tm
0.0181 Tc
0.1806 Tw
[( = \(1/pagesize\))]TJ
9.36 0 0 9.36 259.8398 469 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 262.6883 466 Tm
0.0592 Tc
(\(COST)Tj
9.36 0 0 9.36 298.121 464 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 304.9581 466 Tm
0.0582 Tc
(/COST)Tj
9.36 0 0 9.36 339.762 464 Tm
0 Tc
(m)Tj
10.4 0 0 10.4 348.3009 466 Tm
0.0181 Tc
0.1806 Tw
(\) = 1/\(pagesize)Tj
9.36 0 0 9.36 423.9597 469 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 426.8082 466 Tm
(T)Tj
9.36 0 0 9.36 433.766 464 Tm
(b)Tj
10.4 0 0 10.4 439.4666 466 Tm
0.014 Tc
0.1402 Tw
(\), and for the values)Tj
-35.3333 -1.4423 TD
0.0113 Tc
0.1138 Tw
(given above, with a page of .004 MBytes, we have )Tj
/TT11 1 Tf
10 0 0 10 324.3331 451 Tm
0 Tc
0 Tw
<006f>Tj
/TT6 1 Tf
10.4 0 0 10.4 329.0527 451 Tm
0.0107 Tc
0.1064 Tw
[( = 1/\(.004)]TJ
9.36 0 0 9.36 376.6072 454 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 379.4027 451 Tm
0.0138 Tc
0.1381 Tw
[(4\)  62.5 seconds/IO.)]TJ
/TT4 1 Tf
-29.558 -2.3077 TD
0.0268 Tc
0.2678 Tw
(Example 3.1.)Tj
/TT6 1 Tf
6.6488 0 TD
0.0143 Tc
0.1435 Tw
[(  To achieve a rate of 1000 TPS in the TPC-A application of Example 1.1, there)]TJ
-6.6488 -1.1538 TD
0.0188 Tc
0.1889 Tw
(will be H = 2000 I/Os per second to the Account table, itself consisting of 100,000,000 rows)Tj
0 -1.3462 TD
0.0077 Tc
0.0765 Tw
(of 100 bytes, a total of S =10 GBytes. The disk storage cost here is S)Tj
9.36 0 0 9.36 407.7759 404 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 410.5194 401 Tm
0.0383 Tc
(COST)Tj
9.36 0 0 9.36 441.0009 399 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 446.4935 401 Tm
0.0131 Tc
0.1305 Tw
(= $10,000 whereas)Tj
-36.009 -1.4423 TD
0.0135 Tc
0.1347 Tw
(the disk I/O cost is H)Tj
9.36 0 0 9.36 177.4471 389 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 180.3226 386 Tm
0.0735 Tc
(COST)Tj
9.36 0 0 9.36 212.2681 384 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 219.1721 386 Tm
0.0164 Tc
0.1641 Tw
[( = $50,000. The temperature T = H/S = 2000/10,000 = 0.2, well)]TJ
-14.1512 -1.25 TD
0.0139 Tc
0.1392 Tw
[(above freezing \(a factor of 5\), but also well below the boiling point.  This warm data uses only)]TJ
0 -1.1539 TD
0.0157 Tc
0.1565 Tw
[(1/5 of its disk capacity for data storage.  We are paying for the disk arms and not for the ca-)]TJ
T*
0.0164 Tc
0.1644 Tw
[(pacity.  The situation is similar when we consider the 20 day Acct-ID||Timestamp index to the)]TJ
T*
0.0154 Tc
0.154 Tw
[(History table of Example 1.2.  Such a B-tree index, as we calculated in Example 1.2, requires)]TJ
T*
0.0187 Tc
0.1877 Tw
[(about 9.2 GBytes of leaf-level entries.  Given that a growing tree is only about 70% full, the)]TJ
T*
0.0229 Tc
0.2288 Tw
(entire tree will require 13.8 GBytes, but it has the same I/O rate \(for inserts alone\) as the)Tj
T*
0.0131 Tc
0.1311 Tw
(Account table, which implies a comparable temperature. )Tj
/TT8 1 Tf
10 0 0 10 350.3127 301 Tm
0 Tc
0 Tw
()Tj
/TT4 1 Tf
12.48 0 0 12.48 72 275 Tm
0.042 Tc
0.4197 Tw
[(3.2  Comparison of LSM-tree and B-tree I/O costs)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 250 Tm
0.0116 Tc
0.1163 Tw
(We will be considering I/O costs of index operations which we call )Tj
/TT10 1 Tf
31.5212 0 TD
0.0371 Tc
0 Tw
(mergeable:)Tj
/TT6 1 Tf
5.3741 0 TD
0.0116 Tc
0.1168 Tw
[(  inserts, deletes,)]TJ
-36.8953 -1.1538 TD
0.0155 Tc
0.1547 Tw
[(updates, and long-latency finds.  The following discussion presents an analysis to compare an)]TJ
T*
0.0211 Tc
0.2101 Tw
(LSM-tree to a B-tree.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0514 Tc
0.5147 Tw
(B-tree Insert Cost Formula.)Tj
/TT6 1 Tf
T*
0.0161 Tc
0.1604 Tw
[(Consider the disk arm rental cost of performing a B-tree insert.  We must first access the po-)]TJ
0 -1.1538 TD
0.0114 Tc
0.1148 Tw
(sition in the tree where the entry should be placed, and this entails a search down nodes of the)Tj
T*
0.0083 Tc
0.0829 Tw
[(tree.  We assume that successive inserts to the tree are to )]TJ
/TT10 1 Tf
27.5577 0 TD
0.0323 Tc
0 Tw
(random)Tj
/TT6 1 Tf
3.5845 0 TD
0.0074 Tc
0.0737 Tw
[(  positions at the leaf level, so)]TJ
-31.1421 -1.1538 TD
0.0164 Tc
0.1642 Tw
(that node pages in the path of access will not be consistently buffer resident because of past)Tj
T*
0.0228 Tc
0.228 Tw
[(inserts.  A succession of inserts of ever increasing key-values, an )]TJ
/TT10 1 Tf
33.2371 0 TD
0.0578 Tc
0 Tw
(insert-on-the-right)Tj
/TT6 1 Tf
8.9901 0 TD
0.0131 Tc
0.1307 Tw
[(  situ-)]TJ
-42.2272 -1.1538 TD
0.0153 Tc
0.1529 Tw
[(ation, is a relatively common case that does not obey this assumption.  We note that such an)]TJ
T*
0.037 Tc
0.37 Tw
(insert-on-the-right situation can already be quite efficiently handled by the B-tree data)Tj
T*
0.0182 Tc
0.1822 Tw
[(structure, since there is little I/O as the B-tree grows consistently to the right;  indeed this is)]TJ
ET
endstream
endobj
46 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT10 13 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
48 0 obj
<<
/Length 10062
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-13-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0152 Tc
0.1523 Tw
[(the basic situation in which a B-tree load takes place.  There are a number of other proposed)]TJ
0 -1.1538 TD
0.0178 Tc
0.1781 Tw
(structures to deal with indexing log records by ever-increasing value [8].)Tj
0 -2.3077 TD
0.1766 Tw
(In [21], the )Tj
/TT10 1 Tf
5.7633 0 TD
0.0395 Tc
0.395 Tw
(effective depth)Tj
/TT6 1 Tf
7.4922 0 TD
0.0199 Tc
0.1991 Tw
[(  of a B-tree, symbolized by D)]TJ
9.36 0 0 9.36 366.9728 672 Tm
0 Tc
0 Tw
(e)Tj
10.4 0 0 10.4 372.9684 674 Tm
0.0236 Tc
0.2353 Tw
(, was defined to be the average)Tj
-28.9393 -1.25 TD
0.2355 Tw
(number of pages not found in buffer during a random key-value search down the directory)Tj
0 -1.1538 TD
0.0196 Tc
0.1958 Tw
[(levels of a B-tree.  For B-trees of the size used to index Account-ID||Timestamp in Example)]TJ
T*
0.0139 Tc
0.1397 Tw
(1.2, the value for D)Tj
9.36 0 0 9.36 168.5798 635 Tm
0 Tc
0 Tw
(e)Tj
10.4 0 0 10.4 174.3014 637 Tm
0.0141 Tc
0.1419 Tw
[( is typically about 2.)]TJ
-9.8367 -2.4038 TD
0.013 Tc
0.1294 Tw
(To perform an insert to a B-tree, we perform a key-value search to a leaf level page \(D)Tj
9.36 0 0 9.36 503.7414 610 Tm
0 Tc
0 Tw
(e)Tj
10.4 0 0 10.4 509.4 612 Tm
0.0148 Tc
0.1483 Tw
[( I/Os\),)]TJ
-42.0577 -1.25 TD
0.1479 Tw
[(update it, and \(in the steady state\) write out a corresponding dirty leaf page \(1 I/O\).   We can)]TJ
0 -1.1538 TD
0.016 Tc
0.1596 Tw
(show that the relatively infrequent node splits have an insignificant effect on our analysis, and)Tj
T*
0.0134 Tc
0.1336 Tw
[(therefore ignore them.  The pages read and written in this process are all random access, with)]TJ
T*
0.0122 Tc
0.1223 Tw
(cost COST)Tj
9.36 0 0 9.36 125.2673 561 Tm
0 Tc
0 Tw
(P)Tj
10.4 0 0 10.4 131.8074 563 Tm
0.0065 Tc
0.0654 Tw
(, so the total I/O cost for a B-tree insert, COST)Tj
9.36 0 0 9.36 355.2155 561 Tm
0.0217 Tc
0 Tw
(B-ins)Tj
10.4 0 0 10.4 377.5556 563 Tm
0.006 Tc
0.0597 Tw
[( is given by:)]TJ
-29.3804 -2.5962 TD
0.1834 Tc
0 Tw
(\(3.1\))Tj
3.4615 0 TD
0.0084 Tc
(COST)Tj
9.36 0 0 9.36 137.2375 534 Tm
0.0054 Tc
(B-ins)Tj
10.4 0 0 10.4 158.8175 536 Tm
0.0017 Tc
0.0175 Tw
[( = COST)]TJ
9.36 0 0 9.36 200.0493 534 Tm
0 Tc
0 Tw
(P)Tj
10.4 0 0 10.4 206.3674 539 Tm
(.)Tj
0.2778 -0.2885 TD
0.0063 Tc
(\(D)Tj
9.36 0 0 9.36 220.3627 534 Tm
0 Tc
(e)Tj
10.4 0 0 10.4 225.6312 536 Tm
0.0011 Tc
0.0101 Tw
[( + 1\))]TJ
/TT4 1 Tf
-14.7722 -2.4038 TD
0.0523 Tc
0.5228 Tw
(LSM-tree Insert Cost Formula.)Tj
/TT6 1 Tf
0 -2.3077 TD
0.0116 Tc
0.1165 Tw
(To evaluate the cost of an insert into the LSM-tree, we need to think in terms of amortization of)Tj
0 -1.1538 TD
0.017 Tc
0.1706 Tw
(multiple inserts, since a single insert to the memory component C)Tj
9.36 0 0 9.36 401.8192 473 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 407.5318 475 Tm
0.0174 Tc
0.174 Tw
[( only occasionally has any)]TJ
-32.2627 -1.25 TD
0.008 Tc
0.0801 Tw
[(I/O effect.  As we explained at the beginning of this Section, the performance advantage an LSM-)]TJ
0 -1.1538 TD
0.0117 Tc
0.1169 Tw
(tree has over a B-tree is based on two different )Tj
/TT10 1 Tf
22.81 0 TD
0.039 Tc
0 Tw
(batching)Tj
/TT6 1 Tf
4.0931 0 TD
0.0107 Tc
0.1063 Tw
[(  effects.  The first is the already men-)]TJ
-26.903 -1.1538 TD
0.0153 Tc
0.1528 Tw
(tioned reduced cost of a page I/O, COST)Tj
/TT11 1 Tf
9 0 0 9 277.7833 436 Tm
0 Tc
0 Tw
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 283.1768 438 Tm
0.0121 Tc
0.1216 Tw
[(.  The second is based on the idea that the delay in)]TJ
-20.3055 -1.25 TD
0.0154 Tc
0.1536 Tw
(merging newly inserted entries into the C)Tj
9.36 0 0 9.36 276.5972 423 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 282.2487 425 Tm
0.0138 Tc
0.1377 Tw
[( tree usually allows time for numerous entries to ac-)]TJ
-20.2162 -1.25 TD
0.0164 Tc
0.164 Tw
(cumulate in C)Tj
9.36 0 0 9.36 141.2162 410 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 146.8828 412 Tm
0.0128 Tc
0.1281 Tw
[(;  thus several entries will get merged into each C)]TJ
9.36 0 0 9.36 394.1608 410 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 399.8274 412 Tm
0.0122 Tc
0.1219 Tw
[( tree leaf page during its trip)]TJ
-31.5219 -1.25 TD
0.0112 Tc
0.1125 Tw
[(from disk to memory and back.  By contrast, we have been assuming that the B-tree leaf pages)]TJ
0 -1.1538 TD
0.0123 Tc
0.1234 Tw
(are too infrequently referenced in memory for more than one entry insert to take place.)Tj
/TT13 1 Tf
13.044 0 0 13.044 72 361 Tm
0 Tc
0 Tw
(D)Tj
/TT4 1 Tf
12.48 0 0 12.48 83.265 361 Tm
(e)Tj
10.4 0 0 10.4 91.5647 361 Tm
0.0398 Tc
0.3981 Tw
[(finition 3.2.1.  The Batch-Merge Parameter M.)]TJ
/TT6 1 Tf
25.5182 0 TD
0.0339 Tc
0.3395 Tw
[(  To quantify this multiple-entries-)]TJ
-27.3994 -1.25 TD
0.0121 Tc
0.1209 Tw
(per-leaf batching effect, define the parameter M for a given LSM-tree as the average number of)Tj
0 -1.1538 TD
0.0127 Tc
0.1271 Tw
(entries in the C)Tj
9.36 0 0 9.36 148.0241 334 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 153.6827 336 Tm
0.0116 Tc
0.116 Tw
[( tree inserted into )]TJ
/TT10 1 Tf
8.7009 0 TD
0.0471 Tc
0 Tw
(each)Tj
/TT6 1 Tf
2.3569 0 TD
0.0108 Tc
0.1075 Tw
[(  single page leaf node of the C)]TJ
9.36 0 0 9.36 425.1822 334 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 430.8408 336 Tm
0.0134 Tc
0.1334 Tw
[( tree during the rolling)]TJ
-34.5039 -1.25 TD
0.0125 Tc
0.1251 Tw
[(merge.  We assert that the parameter M is a relatively stable value characterizing an LSM-tree.)]TJ
0 -1.1538 TD
0.013 Tc
0.1298 Tw
(In fact, the value for M is determined by index entry size and the ratio in size between the leaf)Tj
T*
0.0061 Tc
0.0603 Tw
(level of the C)Tj
9.36 0 0 9.36 135.4648 297 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 140.9074 299 Tm
0.0053 Tc
0.0531 Tw
[( tree and that of the C)]TJ
9.36 0 0 9.36 246.082 297 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 251.5246 299 Tm
0.0074 Tc
0.0741 Tw
[( tree.  We define the following new size parameters:)]TJ
-16.012 -2.4038 TD
0 Tc
0 Tw
(S)Tj
9.36 0 0 9.36 92.6857 272 Tm
(e)Tj
10.4 0 0 10.4 98.4533 274 Tm
0.0154 Tc
0.154 Tw
[( = entry \(index entry\) size in bytes)]TJ
-1.2936 -1.25 TD
0 Tc
0 Tw
(S)Tj
9.36 0 0 9.36 92.0517 259 Tm
(p)Tj
10.4 0 0 10.4 97.3443 261 Tm
0.0022 Tc
0.0217 Tw
[( = page size in bytes)]TJ
-1.187 -1.25 TD
0 Tc
0 Tw
(S)Tj
9.36 0 0 9.36 92.2217 246 Tm
(0)Tj
10.4 0 0 10.4 97.6403 248 Tm
0.0048 Tc
0.0485 Tw
[( = size in MBytes of C)]TJ
9.36 0 0 9.36 202.6209 246 Tm
0.0029 Tc
0 Tw
(0 )Tj
10.4 0 0 10.4 210.748 248 Tm
0.0096 Tc
0.0965 Tw
(component leaf level)Tj
-12.0912 -1.25 TD
0 Tc
0 Tw
(S)Tj
9.36 0 0 9.36 92.2117 233 Tm
(1)Tj
10.4 0 0 10.4 97.6233 235 Tm
0.0047 Tc
0.0468 Tw
[( = size in MBytes of C)]TJ
9.36 0 0 9.36 202.4799 233 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 207.8915 235 Tm
0.0076 Tc
0.0755 Tw
[( component leaf level.)]TJ
-13.0665 -2.4038 TD
0.0138 Tc
0.1373 Tw
[(Then the number of entries to a page is approximately S)]TJ
9.36 0 0 9.36 353.1344 208 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 358.785 210 Tm
0.0404 Tc
(/S)Tj
9.36 0 0 9.36 369.4511 208 Tm
0 Tc
(e)Tj
10.4 0 0 10.4 375.1017 210 Tm
0.0119 Tc
0.1191 Tw
(, and the fraction of entries of the)Tj
-29.1444 -1.25 TD
0.0176 Tc
0.1761 Tw
(LSM-tree sitting in component C)Tj
9.36 0 0 9.36 233.5524 195 Tm
0.0043 Tc
0.0423 Tw
(0  )Tj
10.4 0 0 10.4 244.871 197 Tm
0.0104 Tc
0.1042 Tw
(is S)Tj
9.36 0 0 9.36 263.7237 195 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 269.3843 197 Tm
0.0373 Tc
(/\(S)Tj
9.36 0 0 9.36 283.8378 195 Tm
0.0061 Tc
(0 )Tj
10.4 0 0 10.4 292.3269 197 Tm
0.0103 Tc
0.103 Tw
(+ S)Tj
9.36 0 0 9.36 309.6185 195 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 315.2791 197 Tm
0.0126 Tc
0.1261 Tw
(\), so the parameter M is given by:)Tj
-23.3922 -2.5962 TD
0.1834 Tc
0 Tw
[(\(3.2\))-488.5(M)]TJ
9.36 0 0 9.36 118.1853 168 Tm
0 Tc
( )Tj
10.4 0 0 10.4 121.2428 170 Tm
0.0234 Tc
0.2337 Tw
(= \(S)Tj
9.36 0 0 9.36 144.0087 168 Tm
0.0733 Tc
0 Tw
(p/)Tj
10.4 0 0 10.4 153.1868 170 Tm
0 Tc
(S)Tj
9.36 0 0 9.36 161.3425 168 Tm
0.0781 Tc
(e\))Tj
10.4 0 0 10.4 171.127 173 Tm
0 Tc
(.)Tj
0.3267 -0.2885 TD
0.0173 Tc
0.1727 Tw
[( \(S)]TJ
9.36 0 0 9.36 190.1499 168 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 196.2705 170 Tm
0.0748 Tc
(/\(S)Tj
9.36 0 0 9.36 211.894 168 Tm
0.0122 Tc
(0 )Tj
10.4 0 0 10.4 221.0711 170 Tm
0.0207 Tc
0.2067 Tw
(+ S)Tj
9.36 0 0 9.36 239.7657 168 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 245.8863 170 Tm
0.117 Tc
(\)\))Tj
-16.7198 -2.4038 TD
0.0132 Tc
0.1319 Tw
(Note that the larger the component C)Tj
9.36 0 0 9.36 256.2866 143 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 261.8932 145 Tm
0.0113 Tc
0.1124 Tw
[( in comparison to C)]TJ
9.36 0 0 9.36 358.3856 143 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 363.9921 145 Tm
0.0114 Tc
0.1142 Tw
(, the larger will be the parameter M.)Tj
-28.0762 -1.4423 TD
0.0151 Tc
0.1513 Tw
(Typical implementations might have S)Tj
9.36 0 0 9.36 259.0925 128 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 264.6541 130 Tm
0.0096 Tc
0.0964 Tw
(= 40)Tj
2.1089 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.2968 -0.2885 TD
(S)Tj
9.36 0 0 9.36 297.0841 128 Tm
0.0047 Tc
(0 )Tj
10.4 0 0 10.4 305.4222 130 Tm
0.0106 Tc
0.1058 Tw
(and the number of entries per disk page, S)Tj
9.36 0 0 9.36 515.4143 128 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 520.9758 130 Tm
0.0323 Tc
(/S)Tj
9.36 0 0 9.36 531.474 128 Tm
0 Tc
(e)Tj
10.4 0 0 10.4 537.0356 130 Tm
(,)Tj
-44.715 -1.25 TD
0.0145 Tc
0.1451 Tw
[(of 200, so that M = 5.  Given the parameter M, we can now give a rough formula for the cost)]TJ
0 -1.1538 TD
0.0777 Tc
0 Tw
(COST)Tj
9.36 0 0 9.36 104.1214 103 Tm
0.0587 Tc
(LSM-ins)Tj
10.4 0 0 10.4 142.292 105 Tm
0.0169 Tc
0.1689 Tw
[( of an entry insert into the LSM-tree.  We simply amortize the per-page cost of)]TJ
-6.7589 -1.4423 TD
0.0116 Tc
0.1162 Tw
(bringing the C)Tj
9.36 0 0 9.36 140.8612 88 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 146.3967 90 Tm
0.009 Tc
0.0907 Tw
[( tree leaf node into memory and writing it out again, 2)]TJ
25.0634 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.2954 -0.2885 TD
0.044 Tc
(COST)Tj
/TT11 1 Tf
9 0 0 9 440.8497 88 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 446.1031 90 Tm
0.0091 Tc
0.0915 Tw
(, over the M inserts)Tj
-35.9715 -1.25 TD
0.0081 Tc
0.0806 Tw
(that are merged into an C)Tj
9.36 0 0 9.36 196.2243 75 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 201.7069 77 Tm
0.008 Tc
0.0795 Tw
[( tree leaf node during this time.)]TJ
ET
endstream
endobj
49 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
/TT11 29 0 R
/TT13 50 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
52 0 obj
<<
/Length 8405
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-14-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 696 Tm
0.1834 Tc
(\(3.3\))Tj
3.4615 0 TD
-0.006 Tc
(COST)Tj
9.36 0 0 9.36 136.6414 694 Tm
-0.0045 Tc
(LSM-ins)Tj
10.4 0 0 10.4 170.675 696 Tm
-0.0037 Tc
( = 2)Tj
1.6812 0.2885 TD
0 Tc
(.)Tj
0.2778 -0.2885 TD
-0.006 Tc
(COST)Tj
/TT11 1 Tf
9 0 0 9 219.6903 694 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 224.6297 696 Tm
-0.0095 Tc
(/M)Tj
-14.6759 -2.4038 TD
0.0183 Tc
0.1825 Tw
(Note that we have ignored the relatively insignificant costs associated with I/Os for index up-)Tj
0 -1.1538 TD
0.0086 Tc
0.0859 Tw
(dates in both the LSM-tree and B-tree cases.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0375 Tc
0.3747 Tw
(A Comparison of LSM-tree and B-tree Insert Costs)Tj
/TT6 1 Tf
T*
0.0164 Tc
0.1646 Tw
(If we compare the cost formulas \(3.1\) and \(3.3\) for inserts to the two data structures, we see)Tj
0 -1.1538 TD
0.023 Tc
0.2301 Tw
(the ratio:)Tj
0 -2.5 TD
0.1834 Tc
0 Tw
(\(3.4\))Tj
3.4615 0 TD
0.0257 Tc
(COST)Tj
9.36 0 0 9.36 137.9575 571 Tm
0.0193 Tc
(LSM-ins)Tj
10.4 0 0 10.4 173.5521 573 Tm
0.0226 Tc
(/COST)Tj
9.36 0 0 9.36 206.506 571 Tm
0.0169 Tc
(B-ins)Tj
10.4 0 0 10.4 228.6211 573 Tm
0.0028 Tc
0.0278 Tw
[( = K)]TJ
9.36 0 0 9.36 248.1041 571 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 253.5017 576 Tm
(.)Tj
0.2881 -0.2885 TD
0.023 Tc
(\(COST)Tj
/TT11 1 Tf
9 0 0 9 290.0459 571 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 295.1683 573 Tm
0.0226 Tc
(/COST)Tj
9.36 0 0 9.36 328.1223 571 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 334.5963 573 Tm
(\))Tj
9.36 0 0 9.36 338.1876 576 Tm
(.)Tj
10.4 0 0 10.4 340.8841 573 Tm
0.0215 Tc
(\(1/M\))Tj
-25.8542 -2.4038 TD
0.0235 Tc
0.2344 Tw
(where K)Tj
9.36 0 0 9.36 114.2979 546 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 120.0685 548 Tm
0.016 Tc
0.1591 Tw
[( is a \(near\) constant, 2/\(D)]TJ
9.36 0 0 9.36 250.1607 546 Tm
0 Tc
0 Tw
(e)Tj
10.4 0 0 10.4 255.9312 548 Tm
0.0151 Tc
0.1512 Tw
[( + 1\),  with a value of approximately 0.67 for index sizes)]TJ
-17.6857 -1.25 TD
0.0107 Tc
0.1066 Tw
[(we have been considering.  This formula shows that the cost ratio of an insert into the LSM-tree)]TJ
0 -1.1538 TD
0.0145 Tc
0.1456 Tw
(to one in the B-tree is directly proportional to each of two batching effects we have discussed:)Tj
T*
0.0453 Tc
0 Tw
(COST)Tj
/TT11 1 Tf
9 0 0 9 102.7734 509 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 108.0349 511 Tm
0.0398 Tc
(/COST)Tj
9.36 0 0 9.36 141.8838 509 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 148.5338 511 Tm
0.0095 Tc
0.0947 Tw
(, a small fraction corresponding to the ratio of cost for a page I/O in a multi-page)Tj
-7.359 -1.25 TD
0.0093 Tc
0.0936 Tw
(block to a random page I/O, and 1/M, where M is the number of entries batched per page during)Tj
0 -1.1538 TD
0.0155 Tc
0.1544 Tw
[(the rolling merge.  Typically the product of the two ratios will give a cost ratio improvement of)]TJ
T*
0.0163 Tc
0.1626 Tw
[(nearly two orders of magnitude.  Naturally, such improvement will only be possible in regimes)]TJ
T*
0.1633 Tw
(where the index has a relatively high temperature as a B-tree, so that it is possible to greatly)Tj
T*
0.0086 Tc
0.0856 Tw
(reduce the number of disks when moving to an LSM-tree index.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0167 Tc
0.167 Tw
(Example 3.2. )Tj
/TT6 1 Tf
6.8883 0 TD
0.0118 Tc
0.1182 Tw
[( If we assume that an index of the kind in Example 1.2 takes up 1 GByte of disk)]TJ
-6.8883 -1.1538 TD
0.0088 Tc
0.0876 Tw
[(space but is required to sit on 10 GBytes to achieve necessary disk arm access rates, then there)]TJ
T*
0.0212 Tc
0.2128 Tw
[(is certainly room for improvement in saving money on disk arm costs.  If the ratio of insert)]TJ
T*
0.0176 Tc
0.1762 Tw
(costs given in Equation \(3.4\) is 0.02 = 1/50, then the we can shrink the index and disk cost:)Tj
T*
0.009 Tc
0.0901 Tw
(the LSM-tree will need to take up only 0.7 GBytes on disk because of closely packed entries and)Tj
T*
0.0106 Tc
0.1056 Tw
[(reduced disk arm utilization.  However, we see that )]TJ
/TT10 1 Tf
24.3439 0 TD
0.0125 Tc
0.1248 Tw
(the more efficient LSM-tree can only reduce)Tj
-24.3439 -1.1538 TD
0.0077 Tc
0.0764 Tw
(cost down to what is needed for disk capacity)Tj
/TT6 1 Tf
21.0241 0 TD
0.0063 Tc
0.0638 Tw
[(.  If we had started with a 1 GByte B-tree which was)]TJ
-21.0241 -1.1538 TD
0.0151 Tc
0.1512 Tw
(constrained to sit on 35 GBytes to receive needed disk arm service, the ratio of cost improve-)Tj
T*
0.0128 Tc
0.1281 Tw
(ment of 1/50 could have been fully realized. )Tj
/TT8 1 Tf
10 0 0 10 292.1469 330 Tm
0 Tc
0 Tw
()Tj
/TT4 1 Tf
12.48 0 0 12.48 72 304 Tm
0.0548 Tc
0.5483 Tw
[(3.3  Multi-Component LSM-trees)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 279 Tm
0.0122 Tc
0.1222 Tw
(The parameter M for a given LSM-tree was defined as the average number of entries in the C)Tj
9.36 0 0 9.36 534.5447 277 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 72 266 Tm
0.0128 Tc
0.128 Tw
(tree inserted into each single page leaf node of the C)Tj
9.36 0 0 9.36 336.4807 264 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 342.1232 266 Tm
0.0124 Tc
0.124 Tw
[( tree during the rolling merge.  We have)]TJ
-25.9734 -1.25 TD
0.0089 Tc
0.0897 Tw
(been thinking of the quantity M as being greater than 1 because of the delay period during which)Tj
0 -1.1538 TD
0.0233 Tc
0.2329 Tw
(new entries can accumulate in the C)Tj
9.36 0 0 9.36 262.6521 239 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 268.5727 241 Tm
0.0205 Tc
0.2053 Tw
[( tree before being merged into nodes of the C)]TJ
9.36 0 0 9.36 507.2413 239 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 513.1619 241 Tm
0.0209 Tc
0.2085 Tw
[( tree.)]TJ
-42.4194 -1.25 TD
0.0223 Tc
0.2228 Tw
(However, it should be clear from equation \(3.2\) that if the C)Tj
9.36 0 0 9.36 383.9077 226 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 389.8703 228 Tm
0.0236 Tc
0.2353 Tw
[( tree were extremely large in)]TJ
-30.5645 -1.25 TD
0.0234 Tc
0.2337 Tw
(comparison to the C)Tj
9.36 0 0 9.36 176.9768 213 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 182.8484 215 Tm
0.0186 Tc
0.1855 Tw
[( tree, or entries were extremely large and fit only a small number to a)]TJ
-10.6585 -1.25 TD
0.0122 Tc
0.1225 Tw
(page, the quantity M)Tj
9.36 0 0 9.36 172.6018 200 Tm
0 Tc
0 Tw
( )Tj
10.4 0 0 10.4 175.3783 202 Tm
0.0096 Tc
0.0959 Tw
(might be )Tj
/TT10 1 Tf
4.3916 0 TD
0.0142 Tc
0.1424 Tw
(less than)Tj
/TT6 1 Tf
4.2729 0 TD
0.0091 Tc
0.0914 Tw
[( 1.  Such a value for M means that on the average more)]TJ
-18.6047 -1.1538 TD
0.0116 Tc
0.1161 Tw
(than one C)Tj
9.36 0 0 9.36 126.5068 188 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 132.0824 190 Tm
0.0104 Tc
0.1042 Tw
[( tree page must be brought in and out of memory for each entry which is merged in)]TJ
-5.7772 -1.25 TD
0.0202 Tc
0.2017 Tw
(from the C)Tj
9.36 0 0 9.36 126.8429 175 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 132.7234 177 Tm
0.0187 Tc
0.1865 Tw
[( tree.  In the case where M is extremely small in terms of formula \(3.4\), specifi-)]TJ
-5.8388 -1.4423 TD
0.0106 Tc
0.106 Tw
(cally if M < K)Tj
9.36 0 0 9.36 137.1883 160 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 142.9169 162 Tm
( )Tj
0.3057 0.2885 TD
(.)Tj
0.3058 -0.2885 TD
0.0205 Tc
0.2048 Tw
[( COST)]TJ
/TT11 1 Tf
9 0 0 9 184.2507 160 Tm
0 Tc
0 Tw
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 189.6872 162 Tm
0.0614 Tc
(/COST)Tj
9.36 0 0 9.36 224.6611 160 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 231.5321 162 Tm
0.0167 Tc
0.1673 Tw
(, this could even cancel the batching effect of multi-page disk)Tj
-15.3396 -1.25 TD
0.0099 Tc
0.0993 Tw
(reads, so we would do better to use a normal B-tree for inserts in place of an LSM-tree.)Tj
0 -2.3077 TD
0.0123 Tc
0.1228 Tw
(To avoid a small value for M the only course with a two-component LSM-tree is to increase the)Tj
0 -1.1538 TD
0.0113 Tc
0.1125 Tw
[(size of the C)]TJ
9.36 0 0 9.36 134.8353 111 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 140.4939 113 Tm
0.0132 Tc
0.1314 Tw
[( component relative to that of C)]TJ
9.36 0 0 9.36 297.6033 111 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 303.2618 113 Tm
0.016 Tc
0.16 Tw
[(.  Consider a two-component LSM-tree of given)]TJ
-22.2367 -1.25 TD
0.015 Tc
0.1504 Tw
(total leaf entry size S \(S = S)Tj
9.36 0 0 9.36 216.2417 98 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 222.0803 100 Tm
0.0091 Tc
0.0916 Tw
[( + S)]TJ
9.36 0 0 9.36 243.1533 98 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 248.9919 100 Tm
0.0213 Tc
0.2122 Tw
[(, an approximately stable value\), and assume we have a)]TJ
-17.0185 -1.25 TD
0.0097 Tc
0.0967 Tw
(constant rate R in bytes per second of new entry inserts into C)Tj
9.36 0 0 9.36 377.156 85 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 382.6956 87 Tm
0.0099 Tc
0.0993 Tw
[(.  For simplicity, we assume that)]TJ
ET
endstream
endobj
53 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT10 13 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
55 0 obj
<<
/Length 11489
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-15-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0073 Tc
0.0733 Tw
(no entries inserted into C)Tj
9.36 0 0 9.36 192.6427 708 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 198.0753 710 Tm
0.0067 Tc
0.0674 Tw
[( are deleted before they get out to component C)]TJ
9.36 0 0 9.36 428.532 708 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 433.9646 710 Tm
0.0082 Tc
0.0818 Tw
(, and therefore entries)Tj
-34.8043 -1.25 TD
0.0159 Tc
0.1588 Tw
(must migrate out to component C)Tj
9.36 0 0 9.36 239.1355 695 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 244.7941 697 Tm
0.0126 Tc
0.1263 Tw
[( through the rolling merge at the same rate that they are in-)]TJ
-16.6148 -1.25 TD
0.0152 Tc
0.152 Tw
(serted into C)Tj
9.36 0 0 9.36 136.1781 682 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 141.8437 684 Tm
0.0101 Tc
0.1013 Tw
[( to keep the size of C)]TJ
9.36 0 0 9.36 248.1757 682 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 253.8413 684 Tm
0.0117 Tc
0.1171 Tw
[( near its threshold size.  \(Given that the total size S is ap-)]TJ
-17.4847 -1.25 TD
0.0256 Tc
0.2554 Tw
(proximately stable, this also implies that the insertion rate into C)Tj
9.36 0 0 9.36 410.2955 669 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 416.2921 671 Tm
0.0221 Tc
0.2213 Tw
[( must be balanced by a)]TJ
-33.105 -1.25 TD
0.0088 Tc
0.0887 Tw
(constant deletion rate from C)Tj
9.36 0 0 9.36 211.8903 656 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 217.3439 658 Tm
0.0073 Tc
0.0732 Tw
(, possibly using a succession of )Tj
/TT10 1 Tf
14.9653 0 TD
0.0135 Tc
0.1343 Tw
(predicate deletes)Tj
/TT6 1 Tf
7.9794 0 TD
0.0055 Tc
0.0549 Tw
[(.\)  As we vary the)]TJ
-36.9201 -1.25 TD
0.0093 Tc
0.0937 Tw
(size of C)Tj
9.36 0 0 9.36 115.2784 643 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 120.847 645 Tm
0.0107 Tc
0.1064 Tw
[(, we affect the circulation speed of the merge cursor.  A constant migration rate out to)]TJ
-4.6968 -1.25 TD
0 Tc
0 Tw
(C)Tj
9.36 0 0 9.36 80.2415 630 Tm
(1)Tj
10.4 0 0 10.4 85.9541 632 Tm
0.0155 Tc
0.1547 Tw
[( in bytes per second requires that the rolling merge cursor move through entries of C)]TJ
9.36 0 0 9.36 512.2354 630 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 517.9479 632 Tm
0.0079 Tc
0.0789 Tw
[( at a)]TJ
-42.8796 -1.25 TD
0.0101 Tc
0.1006 Tw
(constant rate in bytes per second, and therefore as the size of C)Tj
9.36 0 0 9.36 386.7917 617 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 392.3383 619 Tm
0.0125 Tc
0.1248 Tw
[( decreases the circulation rate)]TJ
-30.8018 -1.25 TD
0.0221 Tc
0.2213 Tw
(from smallest to largest index values in C)Tj
9.36 0 0 9.36 287.3537 604 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 293.2673 606 Tm
0.0175 Tc
0.1754 Tw
[( will increase;  as a result, the I/O rate for multi-)]TJ
-21.2757 -1.25 TD
0.0108 Tc
0.1077 Tw
(page blocks in C)Tj
9.36 0 0 9.36 154.0399 591 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 159.5945 593 Tm
0.0092 Tc
0.0924 Tw
[( to perform the rolling merge must also increase.  If a C)]TJ
9.36 0 0 9.36 430.3473 591 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 435.9019 593 Tm
0.0088 Tc
0.0873 Tw
[( size of a single entry)]TJ
-34.9906 -1.25 TD
0.0266 Tc
0.2661 Tw
(were possible, at this conceptual extreme point we would require a circulation through all)Tj
0 -1.1538 TD
0.0205 Tc
0.2052 Tw
(multi-page blocks of C)Tj
9.36 0 0 9.36 185.9759 566 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 191.7424 568 Tm
0.0167 Tc
0.1672 Tw
[( for each newly inserted entry, an immense demand on I/O.  The ap-)]TJ
-11.5137 -1.25 TD
0.0081 Tc
0.0806 Tw
(proach of merging C)Tj
9.36 0 0 9.36 170.3346 553 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 175.7672 555 Tm
0.0049 Tc
0.0493 Tw
[( and C)]TJ
9.36 0 0 9.36 207.7406 553 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 213.1731 555 Tm
0.0073 Tc
0.0736 Tw
(, rather than accessing relevant nodes of C)Tj
9.36 0 0 9.36 420.0867 553 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 425.5193 555 Tm
0.0073 Tc
0.0731 Tw
[( for each newly inserted)]TJ
-33.9922 -1.25 TD
0.0137 Tc
0.1369 Tw
[(entry as is done with the B-tree, would become a millstone around our necks.  By comparison,)]TJ
0 -1.1538 TD
0.0129 Tc
0.1284 Tw
(larger size C)Tj
9.36 0 0 9.36 134.787 528 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 140.3856 530 Tm
0.013 Tc
0.1297 Tw
[( components will slow down the circulation of the merge cursor and decrease the)]TJ
-6.5755 -1.25 TD
0.0116 Tc
0.1167 Tw
[(I/O cost of inserts.  However, this will increase the cost of the memory-resident component C)]TJ
9.36 0 0 9.36 527.4366 515 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 533.0021 517 Tm
(.)Tj
-44.3271 -2.4038 TD
0.0107 Tc
0.1064 Tw
(Now there is a canonical size for C)Tj
9.36 0 0 9.36 243.7473 490 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 249.3309 492 Tm
0.0106 Tc
0.1057 Tw
[( determined by the point at which the total cost of the LSM-)]TJ
-17.051 -1.25 TD
0.0202 Tc
0.202 Tw
(tree, memory cost for C)Tj
9.36 0 0 9.36 193.8805 477 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 199.72 479 Tm
0.0179 Tc
0.1785 Tw
[( plus media/disk arm cost for the C)]TJ
9.36 0 0 9.36 379.3322 477 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 385.1718 479 Tm
0.0208 Tc
0.2074 Tw
[( component, is minimized.  To)]TJ
-30.1127 -1.25 TD
0.0072 Tc
0.0723 Tw
(arrive at this balance, we start with a large C)Tj
9.36 0 0 9.36 286.916 464 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 292.3836 466 Tm
0.0082 Tc
0.0821 Tw
[( component and pack the C)]TJ
9.36 0 0 9.36 425.9703 464 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 431.4379 466 Tm
0.01 Tc
0.1002 Tw
[( component closely on)]TJ
-34.5613 -1.25 TD
0.0119 Tc
0.1194 Tw
[(disk media.  If the C)]TJ
9.36 0 0 9.36 172.7179 451 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 178.4225 453 Tm
0.0139 Tc
0.1395 Tw
[( component is sufficiently large, we will have a very small I/O rate to C)]TJ
9.36 0 0 9.36 531.2554 451 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 536.96 453 Tm
(.)Tj
-44.7077 -1.25 TD
0.0102 Tc
0.1023 Tw
(We can now decrease the size of C)Tj
9.36 0 0 9.36 246.5378 438 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 252.0923 440 Tm
0.0127 Tc
0.1268 Tw
(, trading off expensive memory for inexpensive disk space,)Tj
-17.3166 -1.25 TD
0.0189 Tc
0.1892 Tw
(until the I/O rate to service C)Tj
9.36 0 0 9.36 221.6964 425 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 227.609 427 Tm
0.0196 Tc
0.1959 Tw
[( increases to a point where the disk arms sitting over the C)]TJ
9.36 0 0 9.36 534.241 425 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 72 414 Tm
0.0145 Tc
0.1453 Tw
[(component media are running at full rate.  At this point, further savings in memory cost for C)]TJ
9.36 0 0 9.36 534.4316 412 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 72 401 Tm
0.017 Tc
0.17 Tw
(will result in increased media cost, as we are required to spread out the C)Tj
9.36 0 0 9.36 448.1946 399 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 453.9852 401 Tm
0.0246 Tc
0.2463 Tw
[( component over)]TJ
-36.7293 -1.25 TD
0.0099 Tc
0.0988 Tw
(fractionally full disks to reduce the disk arm load, and at some point as we continue to shrink C)Tj
9.36 0 0 9.36 534.6239 386 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 72 375 Tm
0.0112 Tc
0.1126 Tw
[(we will reach a minimum cost point.  Now it is common in the two component LSM-tree that the)]TJ
0 -1.1538 TD
0.0212 Tc
0.2117 Tw
(canonical size we determine for C)Tj
9.36 0 0 9.36 246.341 361 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 252.1566 363 Tm
0.0164 Tc
0.1641 Tw
[( will still be quite expensive in terms of memory use.  An)]TJ
-17.3228 -1.25 TD
0.0152 Tc
0.1523 Tw
[(alternative is to consider adopting an LSM-tree of three or more components.  Conceptually, if)]TJ
0 -1.1538 TD
0.0131 Tc
0.1309 Tw
(the size of the C)Tj
9.36 0 0 9.36 154.9111 336 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 160.6547 338 Tm
0.0159 Tc
0.1589 Tw
[( component is so large that the memory cost is a significant factor, then we)]TJ
-8.5245 -1.25 TD
0.017 Tc
0.1698 Tw
(consider creating another intermediate size disk based component between the two extremes.)Tj
0 -1.1538 TD
0.0102 Tc
0.1019 Tw
(This will permit us to limit the cost of disk arms while reducing the size of the C)Tj
9.36 0 0 9.36 460.0605 311 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 465.6521 313 Tm
0.0204 Tc
0.2042 Tw
[( component.)]TJ
-34.3896 -2.4038 TD
0.01 Tc
0 Tw
[(    )-2307.6(   C)]TJ
9.36 0 0 9.36 160.4729 286 Tm
0 Tc
(K)Tj
10.4 0 0 10.4 166.8279 288 Tm
0.0018 Tc
0.0119 Tw
[( )-14.6(tree)-2689.2(     .   .    .           C)]TJ
9.36 0 0 9.36 301.9543 286 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 307.3689 288 Tm
0.0058 Tc
0.0094 Tw
[( )-47.9(tree)-2973.5(        C)]TJ
9.36 0 0 9.36 391.9042 286 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 397.3278 288 Tm
0.006 Tc
0.0598 Tw
[( tree)]TJ
ET
1 i 
172 278 m
173 278 l
228 225 l
228 224 l
227 224 l
172 277 l
f
172 278 m
173 278 l
173 277 l
117 224 l
116 224 l
116 225 l
f
116 225 112 -1 re
f
109 225 1 -14 re
f
109 218 321 -1 re
f
373 225 1 -14 re
f
401 271 m
402 271 l
402 270 l
382 250 l
381 250 l
381 251 l
f
401 271 m
402 271 l
424 251 l
424 250 l
423 250 l
401 270 l
f
381 251 43 -1 re
f
BT
13.8715 0 0 13.7218 214.0275 203.7807 Tm
0 Tc
0 Tw
[(Disk)-9663.6(Memor)]TJ
ET
q
375 201 58 17 re
W n
BT
13.8715 0 0 13.7218 418.2063 203.7807 Tm
(y)Tj
ET
Q
311 278 m
312 278 l
312 277 l
277 244 l
276 244 l
276 245 l
f
311 278 m
312 278 l
347 245 l
347 244 l
346 244 l
311 277 l
f
276 245 71 -1 re
f
430 225 1 -14 re
f
0 G
0 J 0 j 1 w 10 M []0 d
363 263.5 m
377.628 263.5 389.5 260.812 389.5 257.5 c
336.5 257.5 m
336.5 260.812 348.372 263.5 363 263.5 c
S
350 271 m
358 273 l
358 269 l
350 271 l
f*
358 271 13 -1 re
f
BT
10.789 0 0 10.6725 350.0446 272.8066 Tm
(merge)Tj
ET
263 263.5 m
277.628 263.5 289.5 260.812 289.5 257.5 c
S
BT
10.789 0 0 10.6725 264.0339 273.8071 Tm
(merge)Tj
ET
263 271 m
272 273 l
272 269 l
263 271 l
f*
272 271 12 -1 re
f
BT
10.789 0 0 10.6725 204.0262 273.8071 Tm
(merge)Tj
ET
203 271 m
212 273 l
212 269 l
203 271 l
f*
212 271 12 -1 re
f
203.5 257.5 m
203.5 260.812 215.372 263.5 230 263.5 c
S
BT
/TT4 1 Tf
10.789 0 0 10.6725 230.0294 259.8017 Tm
(.  .  .)Tj
10.4 0 0 10.4 108 178 Tm
0.0252 Tc
0.2517 Tw
(Figure 3.1.)Tj
/TT6 1 Tf
5.5303 0 TD
0.0177 Tc
0.1772 Tw
[(  An LSM-tree of K+1 components)]TJ
-8.9919 -2.3077 TD
0.0071 Tc
0.0712 Tw
(In general, an LSM-tree of K+1 components has components C)Tj
9.36 0 0 9.36 374.609 152 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 380.0096 154 Tm
0.0037 Tc
0.0369 Tw
(, C)Tj
9.36 0 0 9.36 393.7971 152 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 399.1976 154 Tm
0.0037 Tc
0.0369 Tw
(, C)Tj
9.36 0 0 9.36 412.9851 152 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 418.3857 154 Tm
0.0024 Tc
0.0242 Tw
(, . . ., C)Tj
9.36 0 0 9.36 453.1593 152 Tm
0.0194 Tc
0 Tw
(K-1)Tj
10.4 0 0 10.4 468.2709 154 Tm
0.0042 Tc
0.0426 Tw
[( and C)]TJ
9.36 0 0 9.36 500.0623 152 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 506.5403 154 Tm
0.0073 Tc
0.0731 Tw
(, which)Tj
-41.7827 -1.25 TD
0.0136 Tc
0.1351 Tw
[(are indexed tree structures of increasing size;  the C)]TJ
9.36 0 0 9.36 332.7336 139 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 338.3772 141 Tm
0.0155 Tc
0.1552 Tw
[( component tree is memory resident and)]TJ
-25.6132 -1.25 TD
0.0136 Tc
0.1351 Tw
(all other components are disk resident \(but with popular pages buffered in memory as with any)Tj
0 -1.1538 TD
0.0149 Tc
0.1493 Tw
[(disk resident access tree\).  Under pressure from inserts, there are asynchronous rolling merge)]TJ
T*
0.0297 Tc
0.2968 Tw
(processes in train between all component pairs \(C)Tj
9.36 0 0 9.36 339.3984 102 Tm
0.059 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 351.4564 104 Tm
0.0157 Tc
0.1566 Tw
(, C)Tj
9.36 0 0 9.36 366.8639 102 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 369.2744 104 Tm
0.0245 Tc
0.2454 Tw
(\), that move entries out from the)Tj
-28.5841 -1.25 TD
0.0143 Tc
0.1431 Tw
[(smaller to the larger component each time the smaller component,  C)]TJ
9.36 0 0 9.36 416.856 89 Tm
0.0307 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 428.1191 91 Tm
0.0159 Tc
0.1582 Tw
(, exceeds its threshold)Tj
ET
endstream
endobj
56 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
58 0 obj
<<
/Length 10758
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-16-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.016 Tc
0.1599 Tw
[(size.  During the life of a long-lived entry inserted in an LSM-tree, it starts in the C)]TJ
9.36 0 0 9.36 488.8727 708 Tm
0 Tc
0 Tw
(0)Tj
0.6199 0.2137 TD
( )Tj
10.4 0 0 10.4 497.5738 710 Tm
0.0248 Tc
0.2476 Tw
(tree and)Tj
-40.9206 -1.25 TD
0.0093 Tc
0.0934 Tw
(eventually migrates out to the C)Tj
9.36 0 0 9.36 226.2141 695 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 232.7971 697 Tm
0.0094 Tc
0.0943 Tw
(, through a series of K asynchronous rolling merge steps.)Tj
-15.4613 -2.4038 TD
0.0215 Tc
0.2156 Tw
(The spotlight here is on performance under insert traffic because we are assuming that the)Tj
0 -1.1538 TD
0.024 Tc
0.2406 Tw
[(LSM-Tree exists in an insert-mostly environment.  LSM-tree finds of three or more compo-)]TJ
T*
0.0111 Tc
0.1103 Tw
(nents suffer somewhat in performance, typically by one extra page I/O per disk component.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 622 Tm
0.0382 Tc
0.3822 Tw
[(3.4  LSM-trees:  Component Sizes)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 597 Tm
0.0228 Tc
0.2275 Tw
(In the current Section, we derive a formula for the I/O cost for inserts into an LSM-tree of)Tj
T*
0.0136 Tc
0.1357 Tw
(several components and demonstrate mathematically how to choose optimal threshold sizes for)Tj
T*
0.013 Tc
0.1299 Tw
[(the various components.  An extended Example 3.3 illustrates the system cost for a B-tree, the)]TJ
T*
0.0077 Tc
0.0765 Tw
(improved system cost for an LSM-tree of two components, and the greater savings to be had with)Tj
T*
0.0098 Tc
0.098 Tw
(an LSM-tree of three components.)Tj
0 -2.3077 TD
0.0122 Tc
0.122 Tw
(We define the )Tj
/TT10 1 Tf
6.9853 0 TD
0.037 Tc
0 Tw
(size)Tj
/TT6 1 Tf
1.9264 0 TD
0.0135 Tc
0.1342 Tw
[(  of an LSM-tree component, S\(C)]TJ
9.36 0 0 9.36 329.9999 523 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 332.2524 525 Tm
0.0115 Tc
0.1155 Tw
(\), as the number of bytes of entries it con-)Tj
-25.0243 -1.25 TD
0.0132 Tc
0.1314 Tw
[(tains at the leaf level;  the size of component C)]TJ
9.36 0 0 9.36 308.0154 510 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 310.2908 512 Tm
0.0121 Tc
0.121 Tw
[( is denoted by S)]TJ
9.36 0 0 9.36 391.9213 510 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 394.1967 512 Tm
0.0143 Tc
0.1435 Tw
(, S\(C)Tj
9.36 0 0 9.36 420.1232 510 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 422.3987 512 Tm
0.0081 Tc
0.0808 Tw
(\) = S)Tj
9.36 0 0 9.36 446.7531 510 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 449.0285 512 Tm
0.011 Tc
0.1096 Tw
(, and S is the total)Tj
-36.2527 -1.4423 TD
0.0112 Tc
0.1123 Tw
[(size of all leaf level entries in all components,  S = )]TJ
/TT11 1 Tf
14 0 0 14 325.1136 497 Tm
0 Tc
0 Tw
<0059>Tj
/TT6 1 Tf
9.36 0 0 9.36 334.1258 495 Tm
0.0036 Tc
(i )Tj
10.4 0 0 10.4 339.2158 497 Tm
0 Tc
(S)Tj
9.36 0 0 9.36 346.7615 495 Tm
(i)Tj
10.4 0 0 10.4 349.023 497 Tm
0.0127 Tc
0.1267 Tw
[(.   We assume there is some relatively)]TJ
-26.6368 -1.3462 TD
0.0138 Tc
0.1383 Tw
(steady rate R of insertion, in bytes per second, to component C)Tj
9.36 0 0 9.36 387.6685 481 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 393.319 483 Tm
0.0125 Tc
0.125 Tw
[( of the LSM-tree, and for sim-)]TJ
-30.8961 -1.25 TD
0.0172 Tc
0.1717 Tw
(plicity that all newly inserted entries live to circulate out to component C)Tj
9.36 0 0 9.36 435.3723 468 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 442.2813 470 Tm
0.0157 Tc
0.1563 Tw
[( by a succession of)]TJ
-35.604 -1.25 TD
0.0074 Tc
0.0738 Tw
[(rolling merge steps.  We also assume that each of the components, C)]TJ
9.36 0 0 9.36 407.1887 455 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 412.6273 457 Tm
0.0044 Tc
0.044 Tw
(, C)Tj
9.36 0 0 9.36 426.5117 455 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 431.9503 457 Tm
0.0026 Tc
0.0257 Tw
(, . . . , C)Tj
9.36 0 0 9.36 469.9874 455 Tm
0.0232 Tc
0 Tw
(K-1)Tj
10.4 0 0 10.4 485.204 457 Tm
0.0055 Tc
0.0551 Tw
(, has a size)Tj
-39.7312 -1.25 TD
0.0088 Tc
0.0871 Tw
[(close to a maximum threshold size to be determined by the current analysis.  The component C)]TJ
9.36 0 0 9.36 533.6128 442 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 72 431 Tm
0.0203 Tc
0.2025 Tw
(is assumed to have a relatively stable size, because of deletes balancing inserts over some)Tj
0 -1.1538 TD
0.0099 Tc
0.0988 Tw
[(standard time period.  The deletes from component C)]TJ
9.36 0 0 9.36 331.7356 417 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 338.3206 419 Tm
0.0083 Tc
0.0831 Tw
[( can be thought of as taking place without)]TJ
-25.6078 -1.25 TD
0.0064 Tc
0.0648 Tw
(any addition to the rate of insertion R to component C)Tj
9.36 0 0 9.36 328.6269 404 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 334.0515 406 Tm
(.)Tj
-25.1973 -2.4038 TD
0.0072 Tc
0.0718 Tw
(Given an LSM-tree of K components with a fixed total size S and memory component size S)Tj
9.36 0 0 9.36 513.6117 379 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 519.0443 381 Tm
0.0061 Tc
0.0605 Tw
(, the)Tj
-42.985 -1.25 TD
0.0171 Tc
0.1712 Tw
(tree is totally described by the variables r)Tj
9.36 0 0 9.36 280.7361 366 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 283.0396 368 Tm
0.0138 Tc
0.1382 Tw
[(, i = 1, . . . ,K, representing size ratios between ad-)]TJ
-20.2923 -1.25 TD
0.0199 Tc
0.1987 Tw
(jacent pairs of components, r)Tj
9.36 0 0 9.36 219.8014 353 Tm
0 Tc
0 Tw
(i)Tj
0.2459 0.2137 TD
( )Tj
10.4 0 0 10.4 224.9803 355 Tm
0.0126 Tc
0.1256 Tw
(= S)Tj
9.36 0 0 9.36 242.5789 353 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 244.8804 355 Tm
0.0505 Tc
(/S)Tj
9.36 0 0 9.36 255.7566 353 Tm
0.0371 Tc
(i-1,)Tj
10.4 0 0 10.4 270.1472 355 Tm
0.0153 Tc
0.1527 Tw
[(  As detailed below, the total page I/O rate to perform)]TJ
-19.0526 -1.25 TD
0.0103 Tc
0.1029 Tw
(all ongoing merge operations between component pairs \(C)Tj
9.36 0 0 9.36 355.3585 340 Tm
0.0184 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 366.2766 342 Tm
0.0049 Tc
0.0487 Tw
(, C)Tj
9.36 0 0 9.36 380.225 340 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 382.4075 342 Tm
0.0079 Tc
0.0786 Tw
(\) can be expressed as a function)Tj
-29.8469 -1.25 TD
0.0167 Tc
0.167 Tw
(of R, the rate of insertions into C)Tj
9.36 0 0 9.36 239.3814 327 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 245.223 329 Tm
0.0152 Tc
0.1523 Tw
(, and the ratios r)Tj
9.36 0 0 9.36 329.5541 327 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 331.8876 329 Tm
0.0182 Tc
0.1818 Tw
[(.  We assume that blocks of the different)]TJ
-24.9892 -1.25 TD
0.0152 Tc
0.1518 Tw
(components are striped across different disk arms in a mixed way to achieve a balance in uti-)Tj
0 -1.1538 TD
0.0138 Tc
0.1389 Tw
[(lization, so that minimizing H is the same as minimizing the total disk arm cost \(at least in any)]TJ
T*
0.0148 Tc
0.1485 Tw
[(range where disk arms rather than media capacity constitute the gating cost\).  It is a standard)]TJ
T*
0.0199 Tc
0.1988 Tw
(calculus minimization problem to find the values for r)Tj
9.36 0 0 9.36 341.3392 278 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 343.6567 280 Tm
0.0163 Tc
0.1634 Tw
[( which minimize the total I/O rate H for)]TJ
-26.1208 -1.25 TD
0.0101 Tc
0.1011 Tw
[(a given R.  It turns out that the assumption that the total size S is fixed leads to a rather difficult)]TJ
0 -1.1538 TD
0.0188 Tc
0.1887 Tw
(problem with a somewhat complex recurrence relation between the r)Tj
9.36 0 0 9.36 417.4397 253 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 419.7202 255 Tm
0.0139 Tc
0.1397 Tw
[( values.  However, if we)]TJ
-33.4346 -1.25 TD
0.0197 Tc
0.1967 Tw
(make the comparable assumption that the largest component size S)Tj
9.36 0 0 9.36 416.8593 240 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 423.7303 242 Tm
0.0138 Tc
0.1383 Tw
[( is fixed \(along with the)]TJ
-33.8202 -1.25 TD
0.0219 Tc
0.2195 Tw
(memory size S)Tj
9.36 0 0 9.36 148.2979 227 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 154.0735 229 Tm
0.018 Tc
0.1796 Tw
(\), as we will show in Theorem 3.1, this minimization problem is solved when)Tj
-7.8917 -1.25 TD
0.0114 Tc
0.1142 Tw
(all of the values r)Tj
9.36 0 0 9.36 157.6285 214 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 159.893 216 Tm
0.0127 Tc
0.1267 Tw
[( are equal to a single constant value r.  We show in Theorem 3.2 the slightly)]TJ
-8.4513 -1.25 TD
0.0183 Tc
0.1826 Tw
(more precise solution relating the r)Tj
9.36 0 0 9.36 247.8795 201 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 250.172 203 Tm
0.0155 Tc
0.1551 Tw
[( values where the total size S is held constant, and argue)]TJ
-17.1319 -1.25 TD
0.022 Tc
0.2206 Tw
(that the constant value r for r)Tj
9.36 0 0 9.36 225.2446 188 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 227.6521 190 Tm
0.0238 Tc
0.2378 Tw
[( gives similar results in all areas of real interest.  Assuming)]TJ
-14.9666 -1.4423 TD
0.0087 Tc
0.088 Tw
[(such a constant value r for all r)]TJ
9.36 0 0 9.36 223.0318 173 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 225.2493 175 Tm
0.0096 Tc
0.0959 Tw
[( factors, we have S)]TJ
9.36 0 0 9.36 319.5779 173 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 321.7954 175 Tm
0.004 Tc
0.0409 Tw
[( = r)]TJ
9.36 0 0 9.36 338.129 178 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 340.3465 178 Tm
(.)Tj
0.2963 -0.2885 TD
(S)Tj
9.36 0 0 9.36 350.8267 173 Tm
(0)Tj
10.4 0 0 10.4 356.3783 175 Tm
0.0079 Tc
0.0793 Tw
[(.  Thus the total size S is given by the)]TJ
-27.3441 -1.4423 TD
0.0132 Tc
0.1316 Tw
[(sum of the individual component sizes,  S = S)]TJ
9.36 0 0 9.36 300.6187 158 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 306.2823 160 Tm
0.0054 Tc
0.0539 Tw
[( + r)]TJ
1.6021 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.3023 -0.2885 TD
(S)Tj
9.36 0 0 9.36 333.6341 158 Tm
(0)Tj
10.4 0 0 10.4 339.2977 160 Tm
0.0054 Tc
0.0539 Tw
[( + r)]TJ
9.36 0 0 9.36 355.9593 163 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 361.6229 163 Tm
(.)Tj
0.3023 -0.2885 TD
(S)Tj
9.36 0 0 9.36 372.3131 158 Tm
(0)Tj
10.4 0 0 10.4 377.9767 160 Tm
0.0049 Tc
0.0488 Tw
[( + . . . + r)]TJ
9.36 0 0 9.36 423.2519 163 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 430.0439 163 Tm
(.)Tj
0.3023 -0.2885 TD
(S)Tj
9.36 0 0 9.36 440.7341 158 Tm
(0)Tj
10.4 0 0 10.4 446.3977 160 Tm
0.0128 Tc
0.1278 Tw
(, and we can solve)Tj
-35.9998 -1.25 TD
0.0086 Tc
0.0859 Tw
(for r in terms of S and S)Tj
9.36 0 0 9.36 190.3025 145 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 195.9111 147 Tm
(.)Tj
-11.9145 -2.4038 TD
0.0138 Tc
0.1388 Tw
(Thus in Theorem 3.1 we show that to minimize the total I/O rate H of a multi-component LSM-)Tj
0 -1.1538 TD
0.0119 Tc
0.1193 Tw
[(tree, with fixed  S)]TJ
9.36 0 0 9.36 159.0832 108 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 165.8992 110 Tm
0.0087 Tc
0.0863 Tw
(, S)Tj
9.36 0 0 9.36 179.7829 108 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 185.4655 110 Tm
0.016 Tc
0.1601 Tw
(, and insertion rate R, we size intermediate components in a geometric)Tj
-10.9101 -1.25 TD
0.0128 Tc
0.1276 Tw
[(progression between the smallest and largest.  We will see, as in the case of a two-component)]TJ
0 -1.1538 TD
0.0215 Tc
0.2149 Tw
(LSM-tree, that if we allow S)Tj
9.36 0 0 9.36 216.0294 83 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 221.952 85 Tm
0.0163 Tc
0.1634 Tw
[( to vary while R and S)]TJ
9.36 0 0 9.36 337.0422 83 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 344.1453 85 Tm
0.0217 Tc
0.2173 Tw
[( remain constant, and express H as a)]TJ
ET
endstream
endobj
59 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
61 0 obj
<<
/Length 11797
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-17-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0117 Tc
0.1175 Tw
(function of S)Tj
9.36 0 0 9.36 133.8444 708 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 139.413 710 Tm
0.0118 Tc
0.118 Tw
(, then H increases with decreasing S)Tj
9.36 0 0 9.36 319.9998 708 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 325.5684 710 Tm
0.0094 Tc
0.0942 Tw
[(.  We can now minimize the total cost of the)]TJ
-24.3816 -1.25 TD
0.0168 Tc
0.1685 Tw
(LSM-tree, memory plus disk arm cost, by varying the size of S)Tj
9.36 0 0 9.36 387.4645 695 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 393.2161 697 Tm
0.0172 Tc
0.1719 Tw
[(.  The appropriate process to)]TJ
-30.8862 -1.25 TD
0.0122 Tc
0.1217 Tw
(arrive at an optimal total cost for a given number of components is illustrated below in Example)Tj
0 -1.1538 TD
0.0133 Tc
0.1329 Tw
[(3.3.  The only remaining free variable in the total cost is the number of components, K+1.  We)]TJ
T*
0.0091 Tc
0.0915 Tw
(discuss the tradeoffs for this value at the end of the current Section.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0218 Tc
0.2186 Tw
(Theorem 3.1)Tj
/TT6 1 Tf
6.3498 0 TD
0.0139 Tc
0.1391 Tw
(. Given an LSM-tree of K+1 components, with a fixed largest-component size S)Tj
9.36 0 0 9.36 530.3028 634 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 537.0319 636 Tm
(,)Tj
-44.7146 -1.25 TD
0.0116 Tc
0.116 Tw
(insert rate R, and memory component size S)Tj
9.36 0 0 9.36 291.2997 621 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 296.8473 623 Tm
0.0089 Tc
0.0896 Tw
(, the total page I/O rate H to perform all merges is)Tj
-21.6199 -1.25 TD
0.0165 Tc
0.1657 Tw
(minimized when the ratios r)Tj
9.36 0 0 9.36 210.1184 608 Tm
0 Tc
0 Tw
(i)Tj
0.2424 0.2137 TD
( )Tj
10.4 0 0 10.4 215.2254 610 Tm
0.0108 Tc
0.1073 Tw
(= S)Tj
9.36 0 0 9.36 232.577 608 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 234.8455 610 Tm
0.0431 Tc
(/S)Tj
9.36 0 0 9.36 245.5677 608 Tm
0.0338 Tc
(i-1)Tj
10.4 0 0 10.4 256.9177 610 Tm
0.0115 Tc
0.1155 Tw
[( are all equal to a common value r.  Thus the total size S)]TJ
-17.7806 -1.25 TD
0.0087 Tc
0.088 Tw
[(is given by the sum of the individual component sizes,)]TJ
0 -2.5 TD
0.1834 Tc
-0.0601 Tw
[(\(3.5\))-488.5(S)172.1( =)172.1( S)]TJ
9.36 0 0 9.36 136.6408 569 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 142.4353 571 Tm
0.0069 Tc
0.0694 Tw
[( + r)]TJ
1.6392 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.3093 -0.2885 TD
(S)Tj
9.36 0 0 9.36 170.4211 569 Tm
(0)Tj
10.4 0 0 10.4 176.2157 571 Tm
0.0069 Tc
0.0694 Tw
[( + r)]TJ
9.36 0 0 9.36 193.2634 574 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 199.058 574 Tm
(.)Tj
0.3093 -0.2885 TD
(S)Tj
9.36 0 0 9.36 209.9961 569 Tm
(0)Tj
10.4 0 0 10.4 215.7907 571 Tm
0.0063 Tc
0.0628 Tw
[( + . . . + r)]TJ
9.36 0 0 9.36 262.1099 574 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 269.06 574 Tm
(.)Tj
0.3093 -0.2885 TD
(S)Tj
9.36 0 0 9.36 279.9981 569 Tm
(0)Tj
10.4 0 0 10.4 285.7927 571 Tm
(,)Tj
-20.557 -2.4038 TD
0.008 Tc
0.0797 Tw
(and we can solve for r in terms of S and S)Tj
9.36 0 0 9.36 277.6753 544 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 283.2209 546 Tm
0.0085 Tc
0.085 Tw
[(.  Similarly, the total page I/O rate H is given by)]TJ
-20.3097 -2.5962 TD
0.1834 Tc
0.2707 Tw
[(\(3.6\))-488.5(H)142.1( =)142.1( \()142.2(2)142.1(R)142.2(/)142.1(S)]TJ
9.36 0 0 9.36 166.3959 517 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 173.0114 519 Tm
(\))Tj
9.36 0 0 9.36 177.4127 522 Tm
(.)Tj
10.4 0 0 10.4 180.7182 519 Tm
0.0266 Tc
(\(K )Tj
9.36 0 0 9.36 197.6087 522 Tm
0.0125 Tc
(. )Tj
10.4 0 0 10.4 204.2187 519 Tm
0.028 Tc
0.2802 Tw
(\(1 + r\) - 1/2\),)Tj
-12.7133 -2.4038 TD
0.0104 Tc
0.1041 Tw
(where S)Tj
9.36 0 0 9.36 111.9909 492 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 117.4475 494 Tm
0.0068 Tc
0.0686 Tw
[( is the number of bytes per page.)]TJ
/TT2 1 Tf
10 0 0 10 276.8256 494 Tm
0 Tc
0 Tw
( )Tj
/TT8 1 Tf
0.2621 0 TD
()Tj
/TT4 1 Tf
10.4 0 0 10.4 72 469 Tm
0.0476 Tc
(Proof.)Tj
/TT6 1 Tf
3.1742 0 TD
0.0161 Tc
0.1607 Tw
[(  Since we have assumed that entries are never deleted until they arrive at component)]TJ
-3.1742 -1.1538 TD
0 Tc
0 Tw
(C)Tj
9.36 0 0 9.36 80.0266 455 Tm
(K)Tj
10.4 0 0 10.4 86.6986 457 Tm
0.0088 Tc
0.0871 Tw
[(, it is clear in the steady state that the rate R in bytes per second of inserts to C)]TJ
9.36 0 0 9.36 474.6725 455 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 480.2351 457 Tm
0.009 Tc
0.0903 Tw
[( is the same)]TJ
-39.2534 -1.25 TD
0.0144 Tc
0.1441 Tw
(as the rate with which entries migrate by rolling merge out from component C)Tj
9.36 0 0 9.36 457.2103 442 Tm
0.0323 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 468.5183 444 Tm
0.0172 Tc
0.1725 Tw
[( to component)]TJ
-38.1268 -1.25 TD
0 Tc
0 Tw
(C)Tj
9.36 0 0 9.36 80.2195 429 Tm
(i)Tj
10.4 0 0 10.4 82.495 431 Tm
0.0116 Tc
0.1161 Tw
(, for all i, 0 < i )Tj
/TT11 1 Tf
7.2859 0 TD
0 Tc
0 Tw
<0029>Tj
/TT6 1 Tf
0.5605 0 TD
0.0116 Tc
0.1161 Tw
[( K.  Consider the case where the component C)]TJ
9.36 0 0 9.36 395.9115 429 Tm
0.0349 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 407.2946 431 Tm
0.0127 Tc
0.1266 Tw
[( is disk resident.  Then the)]TJ
-32.2399 -1.25 TD
0.0242 Tc
0.2428 Tw
(merge from C)Tj
9.36 0 0 9.36 143.642 416 Tm
0.0471 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 155.367 418 Tm
0.0108 Tc
0.1074 Tw
[( to C)]TJ
9.36 0 0 9.36 180.1239 416 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 182.4674 418 Tm
0.0238 Tc
0.237 Tw
[( entails multi-page block reads from component C)]TJ
9.36 0 0 9.36 440.485 416 Tm
0.0471 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 452.21 418 Tm
0.0133 Tc
0.1328 Tw
[( at a rate of R/S)]TJ
9.36 0 0 9.36 534.3015 416 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 72 405 Tm
0.0147 Tc
0.1467 Tw
(pages per second, where S)Tj
9.36 0 0 9.36 208.5418 403 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 214.1554 405 Tm
0.0106 Tc
0.1054 Tw
[( is the number of bytes per page \(we derive this from the rate R in)]TJ
-13.6688 -1.25 TD
0.0238 Tc
0.2377 Tw
[(bytes per second that entries migrate out from C)]TJ
9.36 0 0 9.36 326.1888 390 Tm
0.0527 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 338.0698 392 Tm
0.0224 Tc
0.224 Tw
(, assuming that 100% of all entries en-)Tj
-25.5836 -1.25 TD
0.011 Tc
0.1095 Tw
(countered are deleted from C)Tj
9.36 0 0 9.36 215.0241 377 Tm
0.0212 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 226.0202 379 Tm
0.0089 Tc
0.0895 Tw
[(;  other assumptions are possible in a general case\).  The merge)]TJ
-14.8096 -1.4423 TD
0.0164 Tc
0.1644 Tw
(also entails multi-page reads from C)Tj
9.36 0 0 9.36 253.1721 362 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 255.4346 364 Tm
0.0077 Tc
0.0774 Tw
[( at a rate r)]TJ
9.36 0 0 9.36 307.0138 362 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 309.2763 367 Tm
0.0041 Tc
(. )Tj
0.6048 -0.2885 TD
0.049 Tc
(R/S)Tj
9.36 0 0 9.36 334.4329 362 Tm
0 Tc
(p)Tj
10.4 0 0 10.4 340.0985 364 Tm
0.0143 Tc
0.1432 Tw
[( pages per second \(this follows from the)]TJ
-25.7787 -1.25 TD
0.0139 Tc
0.1396 Tw
(fact that the rolling merge cursor passes over r)Tj
9.36 0 0 9.36 305.0171 349 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 307.2766 351 Tm
0.0065 Tc
0.0652 Tw
[( = S)]TJ
9.36 0 0 9.36 327.6937 349 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 329.9532 351 Tm
0.041 Tc
(/S)Tj
9.36 0 0 9.36 340.6313 349 Tm
0.0321 Tc
(i-1)Tj
10.4 0 0 10.4 351.9334 351 Tm
0.0136 Tc
0.1357 Tw
[( times as many pages belonging to C)]TJ
9.36 0 0 9.36 537.8699 349 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 72 338 Tm
0.0157 Tc
0.1568 Tw
(as it does pages of C)Tj
9.36 0 0 9.36 181.2811 336 Tm
0.0439 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 192.9161 338 Tm
0.0167 Tc
0.1678 Tw
[(\).  Finally, the merge entails multi-page disk writes at a rate of \(r)]TJ
9.36 0 0 9.36 520.6505 336 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 522.976 338 Tm
0.0873 Tc
(+1\))Tj
-43.3631 -1.25 TD
0.0446 Tc
(R/S)Tj
9.36 0 0 9.36 90.7287 323 Tm
0 Tc
(p)Tj
10.4 0 0 10.4 96.3523 325 Tm
0.0127 Tc
0.1265 Tw
[( pages per second to write out newly merged data belonging to C)]TJ
9.36 0 0 9.36 420.5114 323 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 422.7579 325 Tm
0.0101 Tc
0.101 Tw
[(.  Note that here we are)]TJ
-33.7267 -1.25 TD
0.013 Tc
0.1299 Tw
(taking into account the enlarged size of the C)Tj
9.36 0 0 9.36 297.15 310 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 299.3995 312 Tm
0.0154 Tc
0.1535 Tw
[( component resulting from the merge.  Summing)]TJ
-21.8653 -1.25 TD
0.0219 Tc
0.2193 Tw
(over all disk resident components C)Tj
9.36 0 0 9.36 256.1245 297 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 258.448 299 Tm
0.0163 Tc
0.1628 Tw
[(, we have a total rate H of multi-page I/Os in pages per)]TJ
-17.9277 -1.25 TD
0 Tc
0 Tw
(second given by:)Tj
0 -2.5 TD
0.1834 Tc
0.0732 Tw
[(\(3.7\))-488.5(  H)160( =)160( )]TJ
6.9523 0 TD
0.0234 Tc
0 Tw
(\(R/S)Tj
9.36 0 0 9.36 166.0758 258 Tm
0 Tc
(p)Tj
10.4 0 0 10.4 172.6553 260 Tm
0.0322 Tc
0.3225 Tw
(\) \(\(2)Tj
2.3166 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.3512 -0.2885 TD
(r)Tj
9.36 0 0 9.36 204.7774 258 Tm
(1)Tj
10.4 0 0 10.4 211.357 260 Tm
0.033 Tc
0.3302 Tw
(+2\) + \(2)Tj
4.4262 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.3512 -0.2885 TD
(r)Tj
9.36 0 0 9.36 265.419 258 Tm
(2)Tj
10.4 0 0 10.4 271.9986 260 Tm
0.021 Tc
0.2095 Tw
(+2\) + . . . + \(2)Tj
7.6233 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.3512 -0.2885 TD
(r)Tj
9.36 0 0 9.36 359.3102 258 Tm
0.137 Tc
(K-1)Tj
10.4 0 0 10.4 377.7218 260 Tm
0.033 Tc
0.3302 Tw
(+2\) + \(2)Tj
4.4262 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.3512 -0.2885 TD
(r)Tj
9.36 0 0 9.36 431.7838 258 Tm
(K)Tj
10.4 0 0 10.4 439.6759 260 Tm
0.1375 Tc
(+1\)\),)Tj
-35.3535 -2.5962 TD
0.0185 Tc
0.1842 Tw
(where each term of the form \(2)Tj
15.3316 0.2885 TD
0 Tc
0 Tw
(.)Tj
0.3116 -0.2885 TD
(r)Tj
9.36 0 0 9.36 238.5723 231 Tm
(i)Tj
10.4 0 0 10.4 240.9038 233 Tm
0.0212 Tc
0.2115 Tw
(+k\) represents all I/O on component C)Tj
9.36 0 0 9.36 438.2617 231 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 440.5932 233 Tm
0.0059 Tc
0.0589 Tw
[(:  r)]TJ
9.36 0 0 9.36 454.1948 231 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 456.5263 236 Tm
0.0056 Tc
(. )Tj
0.623 -0.2885 TD
0.0674 Tc
(R/S)Tj
9.36 0 0 9.36 482.4449 231 Tm
0 Tc
(p)Tj
10.4 0 0 10.4 488.2815 233 Tm
0.0135 Tc
0.1348 Tw
[( to read in)]TJ
-40.0271 -1.25 TD
0.0203 Tc
0.203 Tw
(pages in C)Tj
9.36 0 0 9.36 128.0519 218 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 130.3964 220 Tm
0.017 Tc
0.1705 Tw
[( for the merge from C)]TJ
9.36 0 0 9.36 241.8089 218 Tm
0.0472 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 253.5369 220 Tm
0.0108 Tc
0.1076 Tw
[( to C)]TJ
9.36 0 0 9.36 278.2978 218 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 280.6423 220 Tm
0.0112 Tc
0.1111 Tw
(, \(r)Tj
9.36 0 0 9.36 294.9677 218 Tm
0.0053 Tc
0 Tw
(i )Tj
10.4 0 0 10.4 300.2447 220 Tm
0.0256 Tc
0.2561 Tw
(+1\) R/S)Tj
9.36 0 0 9.36 340.3176 218 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 346.1862 220 Tm
0.0155 Tc
0.1551 Tw
[( to write out pages in C)]TJ
9.36 0 0 9.36 466.0945 218 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 468.439 220 Tm
0.0181 Tc
0.1811 Tw
[( for that same)]TJ
-38.1191 -1.25 TD
0.0179 Tc
0.1787 Tw
(merge, and R/S)Tj
9.36 0 0 9.36 151.1575 205 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 156.8151 207 Tm
0.0101 Tc
0.1006 Tw
[( to read in pages in C)]TJ
9.36 0 0 9.36 264.262 205 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 266.5215 207 Tm
0.0116 Tc
0.1162 Tw
[( for the merge from C)]TJ
9.36 0 0 9.36 373.933 205 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 376.1925 207 Tm
0.0073 Tc
0.0733 Tw
[( to C)]TJ
9.36 0 0 9.36 400.0594 205 Tm
0.0394 Tc
0 Tw
(i+1)Tj
10.4 0 0 10.4 413.9175 207 Tm
0.0112 Tc
0.1127 Tw
[(.  Clearly there is no term)]TJ
-32.8767 -1.25 TD
0.0122 Tc
0.1218 Tw
(for C)Tj
9.36 0 0 9.36 96.4387 192 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 102.0833 194 Tm
0.0129 Tc
0.1284 Tw
[( and the term for component C)]TJ
9.36 0 0 9.36 255.0353 192 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 261.8053 194 Tm
0.0125 Tc
0.1246 Tw
[( does not have this final addition.  Equation \(3.7\) can be)]TJ
-18.2505 -1.25 TD
0.0322 Tc
0.3225 Tw
(rewritten as:)Tj
0 -3.5577 TD
0.0204 Tc
0.204 Tw
[(\(3.8\)   H = \(2R/Sp\) \()]TJ
/TT11 1 Tf
18 0 0 18 180.7832 143 Tm
0 Tc
0 Tw
<002d>Tj
/TT6 1 Tf
9.36 0 0 9.36 186 131 Tm
(1)Tj
0 2.7778 TD
(K)Tj
10.4 0 0 10.4 196 144 Tm
(r)Tj
9.36 0 0 9.36 200.4643 142 Tm
(i)Tj
10.4 0 0 10.4 203.1448 144 Tm
0.0194 Tc
0.1942 Tw
(+ K - )Tj
3.1164 0.6731 TD
0 Tc
0 Tw
(1)Tj
0.0427 -1.25 TD
(2)Tj
ET
1 i 
236 149 7.24 -0.24 re
f
BT
10.4 0 0 10.4 243 144 Tm
(\))Tj
ET
endstream
endobj
62 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
64 0 obj
<<
/Length 9651
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-18-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 697 Tm
0.0117 Tc
0.117 Tw
(We wish to minimize the value of this function under the condition that:  )Tj
/TT11 1 Tf
18 0 0 18 428.1491 696 Tm
0 Tc
0 Tw
<002e>Tj
/TT6 1 Tf
9.36 0 0 9.36 433 684 Tm
(1)Tj
0 2.7778 TD
(K)Tj
10.4 0 0 10.4 444 697 Tm
(r)Tj
9.36 0 0 9.36 448.1273 695 Tm
(i)Tj
10.4 0 0 10.4 450.6047 697 Tm
0.0164 Tc
0.1642 Tw
[( = \(S)]TJ
9.36 0 0 9.36 477.1261 695 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 484.5662 697 Tm
0.0906 Tc
(/S)Tj
9.36 0 0 9.36 496.2763 695 Tm
0 Tc
(0)Tj
10.4 0 0 10.4 502.4799 697 Tm
0.0223 Tc
0.2234 Tw
(\)= C, a)Tj
-41.3923 -3.75 TD
0.0155 Tc
0.155 Tw
[(constant.  To solve this problem, we minimize )]TJ
/TT11 1 Tf
18 0 0 18 305.0043 657 Tm
0 Tc
0 Tw
<002d>Tj
/TT6 1 Tf
9.36 0 0 9.36 309 645 Tm
(1)Tj
0 2.7778 TD
(K)Tj
10.4 0 0 10.4 319 658 Tm
(r)Tj
9.36 0 0 9.36 323.1103 656 Tm
(i)Tj
10.4 0 0 10.4 325.5778 658 Tm
0.0226 Tc
0.2259 Tw
(, with the term r)Tj
9.36 0 0 9.36 410.6312 656 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 418.0413 658 Tm
0.0274 Tc
0.2738 Tw
[( replaced by C)]TJ
7.6527 0.2885 TD
0 Tc
0 Tw
(.)Tj
/TT11 1 Tf
18 0 0 18 502 657 Tm
<002e>Tj
/TT6 1 Tf
9.36 0 0 9.36 506 645 Tm
(1)Tj
-0.5342 2.7778 TD
0.1303 Tc
(K-1)Tj
10.4 0 0 10.4 517 658 Tm
0 Tc
(r)Tj
9.36 0 0 9.36 521.7562 656 Tm
(i)Tj
0.3051 0.5342 TD
0.1659 Tc
(-1)Tj
10.4 0 0 10.4 536.0403 658 Tm
0 Tc
(.)Tj
-44.6193 -2.4038 TD
0.0165 Tc
0.1659 Tw
(Taking partial derivatives by each of the free variables r)Tj
9.36 0 0 9.36 352.4279 631 Tm
0 Tc
0 Tw
(j)Tj
10.4 0 0 10.4 354.7154 633 Tm
0.0109 Tc
0.1089 Tw
(, j = 1, . . , K-1, and equating them to)Tj
-27.1842 -2.5962 TD
0.0214 Tc
0.2148 Tw
[(zero, we arrive at a set of identical equations of the form:  0 = 1 - )]TJ
34.0385 0.6731 TD
0 Tc
0 Tw
(1)Tj
-0.0962 -1.25 TD
(r)Tj
9.36 0 0 9.36 431.2513 598 Tm
(j)Tj
ET
1 i 
425 611 10.24 -0.24 re
f
BT
10.4 0 0 10.4 435 606 Tm
0.0492 Tc
( C)Tj
1.0538 0.2885 TD
0 Tc
(.)Tj
/TT11 1 Tf
18 0 0 18 450 605 Tm
<002e>Tj
/TT6 1 Tf
9.36 0 0 9.36 454 593 Tm
(1)Tj
-0.5342 2.7778 TD
0.1303 Tc
(K-1)Tj
10.4 0 0 10.4 465 606 Tm
0 Tc
(r)Tj
9.36 0 0 9.36 469.5143 604 Tm
(i)Tj
10.4 0 0 10.4 472.2247 609 Tm
0.1349 Tc
(-1)Tj
1.159 -0.2885 TD
0.0431 Tc
0.4303 Tw
(, which is)Tj
-39.6421 -3.75 TD
0.0158 Tc
0.1578 Tw
(clearly solved when all r)Tj
9.36 0 0 9.36 193.0675 565 Tm
0 Tc
0 Tw
(j)Tj
10.4 0 0 10.4 195.348 567 Tm
0.0151 Tc
0.1513 Tw
[( \(including r)]TJ
9.36 0 0 9.36 254.294 565 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 261.1411 567 Tm
0.0104 Tc
0.1034 Tw
[(\) are equal to  C)]TJ
7.8643 0.2885 TD
0 Tc
0 Tw
(.)Tj
/TT11 1 Tf
18 0 0 18 353 566 Tm
<002e>Tj
/TT6 1 Tf
9.36 0 0 9.36 357 554 Tm
(1)Tj
-1.1752 2.7778 TD
0.2468 Tc
( K-1 )Tj
10.4 0 0 10.4 368 567 Tm
0 Tc
(r)Tj
9.36 0 0 9.36 372.1593 565 Tm
(i)Tj
0.2668 0.5342 TD
0.0894 Tc
(-1)Tj
10.4 0 0 10.4 384.6533 567 Tm
0.0189 Tc
0.1892 Tw
(, or C)Tj
9.36 0 0 9.36 415.1955 570 Tm
0.1006 Tc
0 Tw
(1/K)Tj
10.4 0 0 10.4 432.0706 567 Tm
0.0093 Tc
(. )Tj
/TT8 1 Tf
10 0 0 10 439.0125 567 Tm
0 Tc
()Tj
/TT4 1 Tf
10.4 0 0 10.4 72 530 Tm
0.0149 Tc
0.1488 Tw
(Theorem 3.2.  )Tj
/TT6 1 Tf
7.3795 0 TD
0.0147 Tc
0.147 Tw
(We vary the assumptions of Theorem 3.1 to fix the total size S rather than the)Tj
-7.3795 -1.1538 TD
0.0124 Tc
0.1242 Tw
(size S)Tj
9.36 0 0 9.36 102.3867 516 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 109.0857 518 Tm
0.0119 Tc
0.119 Tw
[( of the largest component.  This minimization problem is much more difficult, but can be)]TJ
-3.5659 -1.25 TD
0.1198 Tw
[(done using Lagrange multipliers.  The results are a sequence of formulas for each r)]TJ
9.36 0 0 9.36 483.0956 503 Tm
0 Tc
0 Tw
(i)Tj
0.2383 0.2137 TD
( )Tj
10.4 0 0 10.4 488.1145 505 Tm
0.0112 Tc
0.1128 Tw
[(in terms of)]TJ
-40.011 -1.25 TD
0.0344 Tc
0.3439 Tw
(higher-indexed r)Tj
9.36 0 0 9.36 156.4603 490 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 158.7967 492 Tm
(:)Tj
-4.8843 -2.4038 TD
(r)Tj
9.36 0 0 9.36 112.1483 465 Tm
0.1027 Tc
(K-1)Tj
10.4 0 0 10.4 129.5969 467 Tm
0.1089 Tc
[(  =)99( r)]TJ
9.36 0 0 9.36 151.4069 465 Tm
0 Tc
(K)Tj
10.4 0 0 10.4 158.886 467 Tm
0.0146 Tc
0.146 Tw
[( + 1)]TJ
-4.8929 -1.25 TD
0 Tc
0 Tw
(r)Tj
9.36 0 0 9.36 112.3413 452 Tm
0.1316 Tc
(K-2)Tj
10.4 0 0 10.4 130.6029 454 Tm
0.1396 Tc
[(  =)126.9( r)]TJ
9.36 0 0 9.36 153.4279 452 Tm
0.1316 Tc
(K-1)Tj
10.4 0 0 10.4 171.6895 454 Tm
0.0225 Tc
0.2251 Tw
[( + 1/r)]TJ
9.36 0 0 9.36 201.7646 452 Tm
0.1974 Tc
0 Tw
(K-1)Tj
10.4 0 0 10.4 72 439 Tm
0.0112 Tc
[(  )-2883.5(r)]TJ
9.36 0 0 9.36 112.4043 437 Tm
0.141 Tc
(K-3)Tj
10.4 0 0 10.4 130.9299 439 Tm
0.1319 Tc
[(  =)119.9(  r)]TJ
9.36 0 0 9.36 157.7624 437 Tm
0.141 Tc
(K-2)Tj
10.4 0 0 10.4 176.288 439 Tm
0.0209 Tc
0.2086 Tw
[(  + 1/\(r)]TJ
9.36 0 0 9.36 214.8758 437 Tm
0.141 Tc
0 Tw
(K-1)Tj
1.9792 0.5342 TD
0 Tc
(.)Tj
10.4 0 0 10.4 236.7089 439 Tm
(r)Tj
9.36 0 0 9.36 241.1131 437 Tm
0.141 Tc
(K-2)Tj
10.4 0 0 10.4 259.6387 439 Tm
0 Tc
(\))Tj
-14.5807 -1.25 TD
0.0014 Tc
0.0141 Tw
[(.   .   .)]TJ
-3.4615 -2.3077 TD
0.0125 Tc
0.1246 Tw
(We omit the proof.)Tj
/TT8 1 Tf
10 0 0 10 163.1952 402 Tm
0 Tc
0 Tw
()Tj
/TT6 1 Tf
10.4 0 0 10.4 72 378 Tm
0.0182 Tc
0.1812 Tw
(As we will see, useful values of r)Tj
9.36 0 0 9.36 241.3292 376 Tm
0 Tc
0 Tw
(i)Tj
0.2512 0.2137 TD
( )Tj
10.4 0 0 10.4 246.6222 378 Tm
0.0183 Tc
0.1826 Tw
(are fairly large, say 20 or more, so the size of the largest)Tj
-16.7906 -1.25 TD
0.0114 Tc
0.1148 Tw
[(component,  S)]TJ
9.36 0 0 9.36 142.9967 363 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 149.6067 365 Tm
0.009 Tc
0.0909 Tw
(, dominates the total size S. Note that in Theorem 3.2 therefore, each r)Tj
9.36 0 0 9.36 493.543 363 Tm
0 Tc
0 Tw
(i)Tj
0.2352 0.2137 TD
( )Tj
10.4 0 0 10.4 498.498 365 Tm
0.0317 Tc
(normally)Tj
-41.0094 -1.25 TD
0.0255 Tc
0.2553 Tw
(differs by only a small fraction from its higher neighbor r)Tj
9.36 0 0 9.36 369.6705 350 Tm
0.075 Tc
0 Tw
(i+1)Tj
10.4 0 0 10.4 384.5276 352 Tm
0.0214 Tc
0.2143 Tw
[(.  In what follows, we base or)]TJ
-30.0507 -1.25 TD
0.0095 Tc
0.0947 Tw
(examples on the approximation of Theorem 3.1.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.047 Tc
0.4702 Tw
(Minimizing Total Cost)Tj
/TT6 1 Tf
T*
0.0066 Tc
0.0661 Tw
(From Theorem 3.1, it can be seen that if we allow S)Tj
9.36 0 0 9.36 320.651 289 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 326.0985 291 Tm
0.0055 Tc
0.0553 Tw
[( to vary while R and S)]TJ
9.36 0 0 9.36 431.9588 289 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 438.4929 291 Tm
0.0088 Tc
0.0888 Tw
[( remain constant and)]TJ
-35.2397 -1.25 TD
0.0142 Tc
0.1422 Tw
(express the total I/O rate H as a function of S)Tj
9.36 0 0 9.36 301.2737 276 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 307.0243 278 Tm
0.0173 Tc
0.1726 Tw
(, then since r increases with decreasing S)Tj
9.36 0 0 9.36 519.0668 276 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 524.8174 278 Tm
0.0116 Tc
0.1165 Tw
[( by)]TJ
-43.5401 -1.25 TD
0.0284 Tc
0.2833 Tw
(equation \(3.5\), and H is proportional to r by equation \(3.6\), clearly H increases with de-)Tj
0 -1.1538 TD
0.0145 Tc
0.145 Tw
(creasing S)Tj
9.36 0 0 9.36 124.1539 251 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 129.6785 253 Tm
0.0091 Tc
0.091 Tw
[(.  We can now minimize the total cost of the LSM-tree as in the two component case)]TJ
-5.546 -1.25 TD
0.0113 Tc
0.1134 Tw
[(by trading off expensive memory for inexpensive disk.  If we calculate the disk media needed to)]TJ
0 -1.1538 TD
0.0185 Tc
0.1849 Tw
(store the LSM-tree and the total I/O rate H that keeps these disk arms fully utilized, this be-)Tj
T*
0.0113 Tc
0.1136 Tw
(comes a starting point in our calculation to determine the size for S)Tj
9.36 0 0 9.36 401.2714 214 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 406.855 216 Tm
0.0114 Tc
0.1144 Tw
[( that minimizes cost.  From)]TJ
-32.1976 -1.25 TD
0.0138 Tc
0.1374 Tw
[(this point as we further decrease the size of C)]TJ
9.36 0 0 9.36 302.587 201 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 308.2756 203 Tm
0.013 Tc
0.1298 Tw
[( the cost of disk media goes up in inverse pro-)]TJ
-22.7188 -1.25 TD
0.0156 Tc
0.1556 Tw
[(portion, since we have entered the region where disk arm cost is the limiting factor.  Example)]TJ
0 -1.1538 TD
0.0192 Tc
0.1925 Tw
(3.3, below, is a numerically based illustration of this process for a two and three component)Tj
T*
0.0123 Tc
0.1232 Tw
[(LSM-tree.  Prior to this example, we offer an analytic derivation for the two component case.)]TJ
0 -2.5 TD
0.0105 Tc
0.105 Tw
(The total cost is the sum of memory cost, COST)Tj
9.36 0 0 9.36 308.1975 138 Tm
0 Tc
0 Tw
(m)Tj
0.8889 0.5342 TD
(.)Tj
10.4 0 0 10.4 319.2929 140 Tm
(S)Tj
9.36 0 0 9.36 326.6956 138 Tm
(0)Tj
10.4 0 0 10.4 332.2502 140 Tm
0.0103 Tc
0.103 Tw
(, and disk cost, itself a maximum over disk)Tj
-25.0241 -1.25 TD
0.0035 Tc
0.0344 Tw
(storage and I/O costs, here based on multi-page block access rate H in pages per second:)Tj
1.25 -2.5 TD
-0.021 Tc
0 Tw
(COST)Tj
9.36 0 0 9.36 113.0174 99 Tm
-0.0112 Tc
(tot)Tj
10.4 0 0 10.4 123.109 101 Tm
-0.0158 Tc
(  = COST)Tj
9.36 0 0 9.36 165.4283 99 Tm
0 Tc
(m)Tj
0.8079 0.5342 TD
(.)Tj
10.4 0 0 10.4 175.5127 101 Tm
(S)Tj
9.36 0 0 9.36 182.2404 99 Tm
(0)Tj
10.4 0 0 10.4 187.289 101 Tm
-0.0166 Tc
( + max[COST)Tj
9.36 0 0 9.36 248.6646 99 Tm
0 Tc
(d)Tj
0.5394 0.5342 TD
(.)Tj
10.4 0 0 10.4 256.2357 101 Tm
(S)Tj
9.36 0 0 9.36 262.9633 99 Tm
(1)Tj
10.4 0 0 10.4 268.0119 101 Tm
-0.0167 Tc
(, COST)Tj
/TT11 1 Tf
9 0 0 9 301.6363 99 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
9.36 0 0 9.36 306.4268 104 Tm
(.)Tj
10.4 0 0 10.4 308.9492 101 Tm
-0.0301 Tc
(H])Tj
-22.7836 -2.4038 TD
0.0089 Tc
0.0892 Tw
(Consider the case of two components, so that in equation \(3.6\), K = 1, r = S)Tj
9.36 0 0 9.36 441.3401 74 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 446.8737 76 Tm
0.0298 Tc
(/S)Tj
9.36 0 0 9.36 457.3199 74 Tm
0.0263 Tc
(0.)Tj
10.4 0 0 10.4 465.618 76 Tm
0.0051 Tc
0.0511 Tw
[(  Let)]TJ
ET
endstream
endobj
65 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
67 0 obj
<<
/Length 9102
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-19-)Tj
/TT6 1 Tf
10.4 0 0 10.4 85 696 Tm
0.0079 Tc
0.0786 Tw
(s = \(COST)Tj
9.36 0 0 9.36 136.7791 694 Tm
0 Tc
0 Tw
(m)Tj
10.4 0 0 10.4 144.95 696 Tm
( )Tj
9.36 0 0 9.36 147.9785 699 Tm
0.0022 Tc
(. )Tj
10.4 0 0 10.4 153.4295 696 Tm
0 Tc
(S)Tj
9.36 0 0 9.36 160.6992 694 Tm
(0)Tj
10.4 0 0 10.4 166.1548 696 Tm
0.0255 Tc
(\)/\(COST)Tj
9.36 0 0 9.36 206.7152 694 Tm
0.0033 Tc
(d )Tj
0.8739 0.5342 TD
0.0022 Tc
(. )Tj
10.4 0 0 10.4 220.3463 696 Tm
0 Tc
(S)Tj
9.36 0 0 9.36 227.6161 694 Tm
(1)Tj
10.4 0 0 10.4 233.0717 696 Tm
0.0063 Tc
0.064 Tw
[(\)  = cost of memory relative to storage cost for S)]TJ
9.36 0 0 9.36 465.3468 694 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 470.8024 696 Tm
0.008 Tc
0.08 Tw
[( data.)]TJ
-37.0964 -2.5962 TD
0.0052 Tc
0.0521 Tw
(t = 2)Tj
9.36 0 0 9.36 106.8797 672 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 109.6523 669 Tm
0.0309 Tc
(\(\(R/S)Tj
9.36 0 0 9.36 135.5205 667 Tm
0 Tc
(p)Tj
10.4 0 0 10.4 141.0701 669 Tm
0.0282 Tc
(\)/S)Tj
9.36 0 0 9.36 155.2386 667 Tm
0 Tc
(1)Tj
10.4 0 0 10.4 160.7882 669 Tm
(\))Tj
9.36 0 0 9.36 164.4805 672 Tm
(.)Tj
10.4 0 0 10.4 167.253 669 Tm
0.0411 Tc
(\(COST)Tj
/TT11 1 Tf
9 0 0 9 201.7407 667 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 207.0062 669 Tm
0.0404 Tc
(/COST)Tj
9.36 0 0 9.36 240.8851 667 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 246.4346 669 Tm
0.0379 Tc
(\)\(COST)Tj
9.36 0 0 9.36 284.6147 667 Tm
0 Tc
(m)Tj
10.4 0 0 10.4 292.9266 669 Tm
0.0404 Tc
(/COST)Tj
9.36 0 0 9.36 326.8055 667 Tm
0 Tc
(d)Tj
10.4 0 0 10.4 332.3551 669 Tm
(\))Tj
-23.7841 -2.5962 TD
0.0049 Tc
0.0489 Tw
[(C =  COST)]TJ
9.36 0 0 9.36 138.1278 640 Tm
0.0144 Tc
0 Tw
(tot)Tj
10.4 0 0 10.4 148.9394 642 Tm
0.0219 Tc
(/\(COST)Tj
9.36 0 0 9.36 185.5496 640 Tm
0 Tc
(d)Tj
0.5777 0.5342 TD
(.)Tj
10.4 0 0 10.4 193.6587 642 Tm
(S)Tj
9.36 0 0 9.36 200.8654 640 Tm
(1)Tj
10.4 0 0 10.4 206.273 642 Tm
0.0044 Tc
0.0441 Tw
[(\)  =   total cost relative to storage cost for S)]TJ
9.36 0 0 9.36 411.9527 640 Tm
0.0027 Tc
0 Tw
(1 )Tj
10.4 0 0 10.4 420.0618 642 Tm
0.0252 Tc
(data)Tj
-33.4675 -2.4038 TD
0.0234 Tc
0.2336 Tw
(then, substituting equation \(3.6\) and simplifying, assuming S)Tj
9.36 0 0 9.36 381.322 615 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 387.1246 617 Tm
0.0542 Tc
(/S)Tj
9.36 0 0 9.36 398.0787 615 Tm
0.008 Tc
(1 )Tj
10.4 0 0 10.4 406.7808 617 Tm
0.0174 Tc
0.1737 Tw
(small, we arrive at a close)Tj
-32.1905 -1.25 TD
0.043 Tc
0 Tw
(approximation:)Tj
1.25 -2.3077 TD
0.0077 Tc
0.0773 Tw
(C  )Tj
/TT11 1 Tf
12 0 0 12 100.1374 580 Tm
0 Tc
0 Tw
<0035>Tj
/TT14 1 Tf
0.5581 0 TD
( )Tj
/TT6 1 Tf
10.4 0 0 10.4 111.0574 580 Tm
0.0146 Tc
0.1459 Tw
[( s  + max\(1, t/s\))]TJ
-3.7555 -2.4038 TD
0.0122 Tc
0.1224 Tw
[(The relative cost C is a function of two variables t and s;  the variable t is a kind of normalized)]TJ
0 -1.1538 TD
0.0237 Tc
0.2362 Tw
[(temperature measuring the basic multi-page block I/O rate required by the application. The)]TJ
T*
0.0077 Tc
0.0772 Tw
[(variable s represents how much memory we decide to use to implement the LSM-tree.  To decide)]TJ
T*
0.0083 Tc
0.0829 Tw
(the size of S)Tj
9.36 0 0 9.36 132.9374 517 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 138.48 519 Tm
0.0077 Tc
0.0771 Tw
(, the simplest rule would be to follow the line s = t, on which C = s + 1 and the disk)Tj
-6.3923 -1.25 TD
0.0149 Tc
0.1494 Tw
[(storage and I/O capacities are fully utilized.  This rule is cost-minimal for t <= 1, but for t > 1,)]TJ
0 -1.3462 TD
0.0239 Tc
0.2395 Tw
(the locus of minimal-C follows the curve s = t)Tj
9.36 0 0 9.36 311.919 495 Tm
0.0762 Tc
0 Tw
(1/2)Tj
10.4 0 0 10.4 327.0697 492 Tm
0.0179 Tc
0.1792 Tw
(, on which C = 2)Tj
9.36 0 0 9.36 414.2274 495 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 417.2559 492 Tm
0.0838 Tc
( t)Tj
9.36 0 0 9.36 423.9848 495 Tm
0.0762 Tc
(1/2)Tj
10.4 0 0 10.4 439.1355 492 Tm
0.0229 Tc
0.2284 Tw
[(.  Putting the result)]TJ
-35.3015 -1.1538 TD
0.0115 Tc
0.1155 Tw
(back in dimensional form we obtain, for t >= 1:)Tj
0 -2.5 TD
0.1834 Tc
0 Tw
(\(3.8\))Tj
3.4615 0 TD
0.0391 Tc
(COST)Tj
9.36 0 0 9.36 138.5174 452 Tm
0.0302 Tc
(min)Tj
10.4 0 0 10.4 154.4485 454 Tm
0.0095 Tc
0.0955 Tw
[( = 2[\(COST)]TJ
9.36 0 0 9.36 210.303 452 Tm
0 Tc
0 Tw
(m)Tj
0.8799 0.5342 TD
(.)Tj
10.4 0 0 10.4 221.2864 454 Tm
(S)Tj
9.36 0 0 9.36 228.6142 452 Tm
(1)Tj
10.4 0 0 10.4 234.1127 454 Tm
0.023 Tc
(\)\(2)Tj
9.36 0 0 9.36 247.5403 457 Tm
0 Tc
(.)Tj
10.4 0 0 10.4 250.2878 454 Tm
0.0391 Tc
(COST)Tj
/TT11 1 Tf
9 0 0 9 280.8052 452 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
9.36 0 0 9.36 286.0227 457 Tm
(.)Tj
10.4 0 0 10.4 288.7702 454 Tm
0.0313 Tc
(R/S)Tj
9.36 0 0 9.36 307.0849 452 Tm
0 Tc
(p)Tj
10.4 0 0 10.4 312.5835 454 Tm
0.0172 Tc
(\)])Tj
9.36 0 0 9.36 319.2942 457 Tm
0.0392 Tc
(1/2)Tj
10.4 0 0 10.4 72 429 Tm
0.0169 Tc
0.1693 Tw
(Thus the total cost of the LSM-tree \(for t )Tj
/TT11 1 Tf
20.2038 0 TD
0 Tc
0 Tw
<002a>Tj
/TT6 1 Tf
0.5658 0 TD
0.0169 Tc
0.1693 Tw
[( 1\) is seen to be twice the geometric mean of the)]TJ
-20.7695 -1.1538 TD
0.0127 Tc
0.1265 Tw
(\(very high\) cost of enough memory to hold all the data in the LSM-tree and the \(extremely low\))Tj
T*
0.0176 Tc
0.1759 Tw
(cost of disk required to support the multi-page block I/O needed to write its inserts to disk in)Tj
T*
0.015 Tc
0.15 Tw
[(the cheapest way.  Half of this total cost is used for memory for S)]TJ
9.36 0 0 9.36 403.7084 391 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 409.4749 393 Tm
0.0139 Tc
0.139 Tw
(, the other half for disk for)Tj
-32.4495 -1.25 TD
0.002 Tc
0.0202 Tw
(I/O access to S)Tj
9.36 0 0 9.36 143.4598 378 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 148.7354 380 Tm
0.0018 Tc
0.0183 Tw
[(.  The cost of disk storage does not show up because t >= 1 ensures that the data is)]TJ
-7.3784 -1.25 TD
0.0131 Tc
0.1308 Tw
[(warm enough to make disk I/O predominate over disk storage at the minimum point.  Note that)]TJ
0 -1.3462 TD
0.011 Tc
0.1093 Tw
(asymptotically, the cost goes as R)Tj
9.36 0 0 9.36 238.7848 356 Tm
0.0282 Tc
0 Tw
(1/2)Tj
10.4 0 0 10.4 252.5885 353 Tm
0.0074 Tc
0.0745 Tw
[( compared to R for the B-tree, as R -> )]TJ
/TT11 1 Tf
14 0 0 14 440.502 353 Tm
0 Tc
0 Tw
<0027>Tj
/TT6 1 Tf
10.4 0 0 10.4 452 353 Tm
(.)Tj
-36.5385 -2.5 TD
0.0096 Tc
0.0959 Tw
(In the case that t <= 1, the cooler case, the minimum cost occurs along s = t, where C = t + 1 <)Tj
0 -1.1538 TD
0.0112 Tc
0.1116 Tw
[(2.  This means that the total cost in this case is always less than twice the basic cost of storing)]TJ
T*
0 Tc
0 Tw
(S)Tj
9.36 0 0 9.36 79.6797 301 Tm
0.0075 Tc
(1 )Tj
10.4 0 0 10.4 88.3228 303 Tm
0.0149 Tc
0.149 Tw
[(on disk.  In this case we size disk by its storage requirements, and then use all its I/O ca-)]TJ
-1.5695 -1.25 TD
0.0145 Tc
0.145 Tw
(pacity to minimize memory use.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0313 Tc
0.3123 Tw
[(Example 3.3.)]TJ
/TT6 1 Tf
6.7464 0 TD
0.0201 Tc
0.2009 Tw
[(  We consider the Account-ID||Timestamp index detailed in Example 3.1.  The)]TJ
-6.7464 -1.1538 TD
0.0224 Tc
0.2238 Tw
(following analysis calculates costs for inserts only, with an insertion rate R of 16,000 bytes)Tj
T*
0.0195 Tc
0.1955 Tw
(per second to the index \(1000 16 byte index entries, not counting overhead\), resulting in an)Tj
T*
0.011 Tc
0.1093 Tw
(index of 576 million entries for 20 days of data, or 9.2 GBytes of data.)Tj
0 -2.3077 TD
0.0262 Tc
0.2622 Tw
[(Using a B-tree to support the index, the disk I/O will be the limiting factor as we saw in)]TJ
0 -1.1538 TD
0.0073 Tc
0.0727 Tw
[(Example 3.1 ó the leaf-level data is warm.  We are required to use enough disk space to provide)]TJ
T*
0.0088 Tc
0.0878 Tw
[(H = 2,000 random I/Os per second to update random pages at the leaf level \(this assumes all di-)]TJ
T*
0.0193 Tc
0.1936 Tw
[(rectory nodes are memory resident\).  Using the typical value COST)]TJ
9.36 0 0 9.36 414.4274 168 Tm
0 Tc
0 Tw
(P)Tj
10.4 0 0 10.4 421.3414 170 Tm
0.0134 Tc
0.1334 Tw
[( = $25 from the table of)]TJ
-33.5905 -1.4423 TD
0.0158 Tc
0.158 Tw
(Section 3.1, we find the cost for I/O is H)Tj
9.36 0 0 9.36 276.3441 158 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 279.2536 155 Tm
0.0825 Tc
(COST)Tj
9.36 0 0 9.36 311.5751 153 Tm
0 Tc
(P)Tj
10.4 0 0 10.4 318.5601 155 Tm
0.017 Tc
0.17 Tw
[( = $50,000.  We calculate the cost to buffer)]TJ
-23.7077 -1.4423 TD
0.0172 Tc
0.1724 Tw
[(upper-level nodes in memory as follows.  Assume leaf nodes that are 70% full, 0.7)]TJ
9.36 0 0 9.36 489.6623 143 Tm
0 Tc
0 Tw
(.)Tj
10.4 0 0 10.4 492.5358 140 Tm
0.0241 Tc
0.2412 Tw
(\(4K/16\) =)Tj
-40.4361 -1.1538 TD
0.0263 Tc
0.2633 Tw
(180 entries per leaf node, and therefore the level above the leaf contains about 576 mil-)Tj
T*
0.0211 Tc
0.2102 Tw
[(lion/180  = 3.2 million entries pointing to subordinate leaves.  If we grant some prefix com-)]TJ
T*
0.0141 Tc
0.141 Tw
(pression so that we can fit 200 entries to a node at this level, this implies about 16,000 pages)Tj
T*
0.0138 Tc
0.1375 Tw
[(of 4 KBytes each, or 64 MBytes, at a cost for memory, COST)]TJ
9.36 0 0 9.36 378.3675 90 Tm
0 Tc
0 Tw
(m)Tj
10.4 0 0 10.4 386.8715 92 Tm
0.0137 Tc
0.1376 Tw
[(, of $100 per MByte, or $6400.)]TJ
-30.2761 -1.25 TD
0.0179 Tc
0.1787 Tw
(We ignore the relatively insignificant cost of node buffering at levels above this, and say that)Tj
ET
endstream
endobj
68 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT11 29 0 R
/TT14 69 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
71 0 obj
<<
/Length 9246
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-20-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0287 Tc
0.2873 Tw
[(the total cost of a B-tree is $50,000 for disk plus $6400 for memory, or a )]TJ
ET
0 G
0 J 0 j 0.493 w 10 M []0 d
1 i 
475.763 709.243 m
540.127 709.243 l
S
BT
10.4 0 0 10.4 475.7634 710 Tm
0.0337 Tc
0.3363 Tw
[(total cost of)]TJ
ET
72 696.243 m
117.502 696.243 l
S
BT
10.4 0 0 10.4 72 697 Tm
0.1088 Tc
0 Tw
($56,400.)Tj
0 -2.4038 TD
0.0059 Tc
0.0589 Tw
(With an LSM-tree of two components, C)Tj
9.36 0 0 9.36 262.3217 670 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 267.6953 672 Tm
0.0037 Tc
0.0365 Tw
[( and C)]TJ
9.36 0 0 9.36 299.3246 670 Tm
0.0135 Tc
0 Tw
(1,)Tj
10.4 0 0 10.4 307.3828 672 Tm
0.0038 Tc
0.039 Tw
[( we need an S)]TJ
9.36 0 0 9.36 376.0157 670 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 381.3893 672 Tm
0.0041 Tc
0.0419 Tw
[( of 9.2 GBytes of disk to store the)]TJ
-29.749 -1.4423 TD
0.0063 Tc
0.0639 Tw
(entries, at a cost of COST)Tj
9.36 0 0 9.36 196.6817 655 Tm
0 Tc
0 Tw
(d)Tj
0.5797 0.5342 TD
(.)Tj
10.4 0 0 10.4 204.8178 657 Tm
(S)Tj
9.36 0 0 9.36 212.0475 655 Tm
(1)Tj
10.4 0 0 10.4 217.4731 657 Tm
0.0061 Tc
0.0603 Tw
[( = $9,200.  We pack this data closely on disk and calculate the total)]TJ
-13.9878 -1.25 TD
0.0294 Tc
0.294 Tw
(I/O rate H supported by an equal cost in disk arms using multi-page block I/O, as H =)Tj
0 -1.1538 TD
0.0544 Tc
0 Tw
(9200/COST)Tj
/TT11 1 Tf
9 0 0 9 132.0088 630 Tm
0 Tc
<002f>Tj
/TT6 1 Tf
10.4 0 0 10.4 137.4063 632 Tm
0.0132 Tc
0.1314 Tw
[( = 3700 pages per second.  Now in Equation \(3.6\) we solve for r after setting the)]TJ
-6.2891 -1.25 TD
0.0124 Tc
0.1239 Tw
(total I/O rate H as above, the rate R to 16,000 bytes/second, and S)Tj
9.36 0 0 9.36 404.9616 617 Tm
0 Tc
0 Tw
(p)Tj
10.4 0 0 10.4 410.5972 619 Tm
0.0111 Tc
0.1104 Tw
[( to 4K.  From the resulting)]TJ
-32.5574 -1.25 TD
0.0121 Tc
0.1212 Tw
(ratio r = S)Tj
9.36 0 0 9.36 122.539 604 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 128.3366 606 Tm
0.0537 Tc
(/S)Tj
9.36 0 0 9.36 139.2808 604 Tm
0.0079 Tc
(0 )Tj
10.4 0 0 10.4 147.9749 606 Tm
0.0133 Tc
0.1328 Tw
[(= 460 and the fact that  S)]TJ
9.36 0 0 9.36 277.7373 604 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 283.5349 606 Tm
0.0186 Tc
0.1853 Tw
[( = 9.2 GBytes, we calculate 20 MBytes of memory)]TJ
-20.3399 -1.25 TD
0.0257 Tc
0.2569 Tw
(for C)Tj
9.36 0 0 9.36 98.5437 591 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 104.6753 593 Tm
0.0248 Tc
0.248 Tw
[(, costing $2,000.  This is the simple s = t solution, with total cost $11,200 and full)]TJ
-3.1419 -1.25 TD
0.017 Tc
0.1704 Tw
[(utilization of disk capacity and I/O capability.  Since t = .22 is less than 1, this is the optimal)]TJ
0 -1.1538 TD
0.0127 Tc
0.1271 Tw
(solution. We add $200 for 2 MBytes of memory to contain merging blocks, and arrive at a )Tj
ET
518.825 567.243 m
540.1 567.243 l
S
BT
10.4 0 0 10.4 518.8248 568 Tm
0.039 Tc
0 Tw
(total)Tj
ET
72 554.243 m
149.82 554.243 l
S
BT
10.4 0 0 10.4 72 555 Tm
0.0171 Tc
0.1459 Tw
[(cost )-40.1(of )-40.1($11,400.  This is )]TJ
12.2406 0 TD
0.0148 Tc
0.1482 Tw
(a significant improvement over the B-tree cost.)Tj
-12.2406 -2.4038 TD
0.1495 Tw
[(Here is a full explanation of the solution.  The insert rate of R= 16,000 bytes/second is turned)]TJ
0 -1.1538 TD
0.0067 Tc
0.0672 Tw
(into 4 pages/second that need to be merged from C)Tj
9.36 0 0 9.36 319.3365 516 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 324.7551 518 Tm
0.0035 Tc
0.0345 Tw
[( to C)]TJ
9.36 0 0 9.36 347.616 516 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 353.0346 518 Tm
0.0044 Tc
0.0443 Tw
[(.  Since C)]TJ
9.36 0 0 9.36 399.9612 516 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 405.3798 518 Tm
0.0055 Tc
0.0548 Tw
[( is 460 times larger than C)]TJ
9.36 0 0 9.36 531.7263 516 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 537.1448 518 Tm
(,)Tj
-44.7255 -1.25 TD
0.01 Tc
0.0995 Tw
(the new entries from C)Tj
9.36 0 0 9.36 183.0475 503 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 188.5721 505 Tm
0.0094 Tc
0.0943 Tw
[( are on the average merged into positions 460 entries apart in C)]TJ
9.36 0 0 9.36 500.8832 503 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 506.4078 505 Tm
0.0072 Tc
0.0721 Tw
[(.  Thus)]TJ
-41.77 -1.25 TD
0.0098 Tc
0.0982 Tw
(merging a page from C)Tj
9.36 0 0 9.36 184.5873 490 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 190.0979 492 Tm
0.0093 Tc
0.0929 Tw
[( requires reading and writing 460 pages of C)]TJ
9.36 0 0 9.36 406.7525 490 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 412.2631 492 Tm
0.0079 Tc
0.0791 Tw
(, a total of 3680 pages per)Tj
-32.7176 -1.25 TD
0.0193 Tc
0.193 Tw
[(second.  But this is exactly what 9.2 disks provide in multiblock I/O capacity, with each pro-)]TJ
0 -1.1538 TD
0.011 Tc
0.1092 Tw
(viding 400 pages/sec, 10 times the nominal random I/O rate of 40 pages/second.)Tj
0 -2.3077 TD
0.019 Tc
0.1906 Tw
(Since this example shows full utilization of disk resources with two components, we have no)Tj
0 -1.1538 TD
0.017 Tc
0.1705 Tw
[(reason to explore the three-component LSM-tree here.  A more complete analysis would con-)]TJ
T*
(sider how occasional finds must be performed in the index, and would consider utilizing more)Tj
T*
0.0132 Tc
0.1313 Tw
[(disk arms.  The following example shows a case where three components provide an improved)]TJ
T*
0.0135 Tc
0.1341 Tw
(cost for a pure insert workload. )Tj
/TT8 1 Tf
10 0 0 10 230.0771 395 Tm
0 Tc
0 Tw
()Tj
/TT4 1 Tf
10.4 0 0 10.4 72 371 Tm
0.0181 Tc
0.1811 Tw
(Example 3.4. )Tj
/TT6 1 Tf
6.9342 0 TD
0.0144 Tc
0.144 Tw
[(Consider Example 3.3, with R increased by a factor of 10.  Note that the B-tree)]TJ
-6.9342 -1.1538 TD
0.0208 Tc
0.2073 Tw
(solution now costs $500,000 for 500 Gbytes of disk to support an I/O rate H = 20,000 I/Os)Tj
T*
0.0133 Tc
0.1329 Tw
[(per second;  of this 491 Gbytes will be unutilized.  But the B-tree is the same size and we still)]TJ
T*
0.0207 Tc
0.2064 Tw
(pay $6400 to buffer the directory in memory, for a )Tj
ET
335.083 334.243 m
448.48 334.243 l
S
BT
10.4 0 0 10.4 335.0834 335 Tm
0.0256 Tc
0.2587 Tw
[(total cost of $506,400. )]TJ
11.6911 0 TD
0.019 Tc
0.1905 Tw
[( In the LSM-tree)]TJ
-36.9876 -1.25 TD
0.0128 Tc
0.1283 Tw
(analysis, the increase of R by a factor of 10 means that t increases by the same factor, to 2.2.)Tj
0 -1.1538 TD
0.0202 Tc
0.2023 Tw
(Since this t is greater than 1, the best 2-component solution will not utililize all the disk ca-)Tj
T*
0.0162 Tc
0.1617 Tw
[(pacity.  We use equation \(3.8\) to calculate the minimum cost of $27,000 for a two-component)]TJ
T*
0.0124 Tc
0.1243 Tw
[(LSM-tree, half of which pays for 13.5 Gbytes of disk and half for 135 Mbytes of memory.  Here)]TJ
T*
0.0277 Tc
0.2768 Tw
[(4.3 Gbytes of disk are unutilized.  With 2Mbytes of memory for buffers, the )]TJ
ET
478.694 273.243 m
540.094 273.243 l
S
BT
10.4 0 0 10.4 478.6939 274 Tm
0.0283 Tc
0.2822 Tw
(total cost is)Tj
ET
72 260.243 m
121 260.243 l
S
BT
10.4 0 0 10.4 72 261 Tm
0.1172 Tc
0 Tw
($27,200.)Tj
0 -2.4038 TD
0.0315 Tc
0.3152 Tw
[(Here is a full explanation of the two-component solution.  The insert rate R = 160,000)]TJ
0 -1.1538 TD
0.0106 Tc
0.1056 Tw
(bytes/sec is turned into 40 pages/second that need to be merged from C)Tj
9.36 0 0 9.36 425.886 222 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 431.4176 224 Tm
0.0053 Tc
0.053 Tw
[( to C)]TJ
9.36 0 0 9.36 454.7575 222 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 460.2891 224 Tm
0.0068 Tc
0.068 Tw
[(.  Since C)]TJ
9.36 0 0 9.36 508.2037 222 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 513.7352 224 Tm
0.006 Tc
0.0599 Tw
[( is 68)]TJ
-42.4745 -1.25 TD
0.0181 Tc
0.1807 Tw
(times larger than C)Tj
9.36 0 0 9.36 169.0686 209 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 174.8202 211 Tm
0.0155 Tc
0.1548 Tw
(, merging a page from C)Tj
9.36 0 0 9.36 298.7134 209 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 304.465 211 Tm
0.015 Tc
0.1501 Tw
[( requires 68 page reads and 68 writes to C)]TJ
9.36 0 0 9.36 521.625 209 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 527.3766 211 Tm
0.0097 Tc
0.0971 Tw
(, a)Tj
-43.7862 -1.25 TD
0.0175 Tc
0.175 Tw
[(total of 5450 pages per second.  But this is exactly what 13.5 disks provide in multiblock I/O)]TJ
0 -1.1538 TD
0.0237 Tc
0 Tw
(capacity.)Tj
0 -2.3077 TD
0.0143 Tc
0.1429 Tw
(With an LSM-tree of three components for the R = 160,000 bytes/second case, the cost of the)Tj
0 -1.1538 TD
0.0088 Tc
0.0885 Tw
[(largest disk component and a cost-balanced I/O rate are calculated as for two components.  With)]TJ
T*
0 Tc
0 Tw
(S)Tj
9.36 0 0 9.36 80.4207 136 Tm
(i)Tj
10.4 0 0 10.4 82.9442 138 Tm
0.1011 Tc
(/S)Tj
9.36 0 0 9.36 94.8724 136 Tm
0.0792 Tc
(i-1)Tj
10.4 0 0 10.4 107.4974 138 Tm
0.0222 Tc
0.222 Tw
[( = r  for i = 1, 2,  by Theorem 3.1, we calculate r = 23 and S)]TJ
9.36 0 0 9.36 437.6747 136 Tm
0.0149 Tc
0 Tw
(0 )Tj
10.4 0 0 10.4 447.1498 138 Tm
0.035 Tc
0.3501 Tw
(= 17 MBytes \(for)Tj
-36.0721 -1.25 TD
0.0216 Tc
0.2168 Tw
(memory cost of $1700\) for fully occupied disk arms. The smaller disk component costs just)Tj
0 -1.1538 TD
0.0115 Tc
0.1154 Tw
(1/23 of the larger. Now increasing the memory size from this point has no good cost effect, and)Tj
T*
0.0149 Tc
0.1493 Tw
(decreasing the memory size will result in a corresponding factor, squared, increase in the cost)Tj
T*
0.0122 Tc
0.1221 Tw
[(of disk.  Since the cost for disk is currently a good deal higher than the cost of memory, we do)]TJ
T*
0.0087 Tc
0.0869 Tw
[(not gain cost effectiveness by memory size reduction.  Thus we have an analogous s = t solution)]TJ
ET
endstream
endobj
72 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
74 0 obj
<<
/Length 8168
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-21-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0131 Tc
0.1307 Tw
[(in the three-component case.  Allowing an additional 4 MBytes of memory for buffering, costing)]TJ
0 -1.1538 TD
0.0279 Tc
0.2786 Tw
($400, for the two rolling merge operations, the total cost for a 3 component LSM-tree is)Tj
T*
0.0224 Tc
0.2243 Tw
(therefore $9,200 for disk plus $2,100 for memory, or a )Tj
ET
0 G
0 J 0 j 0.493 w 10 M []0 d
1 i 
359.609 685.243 m
466.716 685.243 l
S
BT
10.4 0 0 10.4 359.6086 686 Tm
0.0254 Tc
0.2539 Tw
(total cost of $11,300,)Tj
10.5988 0 TD
0.0197 Tc
0.1971 Tw
[( a further sig-)]TJ
-38.2535 -1.25 TD
0.0154 Tc
0.1533 Tw
(nificant improvement over the cost of a 2-component LSM-tree.)Tj
0 -2.3077 TD
0.1548 Tw
[(Here is a full explanation of the three-component solution.  The in-memory component C)]TJ
9.36 0 0 9.36 513.163 647 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 518.8135 649 Tm
0.0124 Tc
0.1244 Tw
[( has)]TJ
-42.9628 -1.25 TD
0.0249 Tc
0.2488 Tw
(17 Mbytes, the smaller disk component C)Tj
9.36 0 0 9.36 288.3726 634 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 294.2772 636 Tm
0.0184 Tc
0.1839 Tw
[( is 23 times larger, at 400 Mbytes, and C)]TJ
9.36 0 0 9.36 506.0325 634 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 511.9371 636 Tm
0.0128 Tc
0.1284 Tw
[( is 23)]TJ
-42.3017 -1.25 TD
0.0175 Tc
0.1752 Tw
(times larger than C)Tj
9.36 0 0 9.36 168.7806 621 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 174.5152 623 Tm
0.0147 Tc
0.1474 Tw
[(, at 9.2 Gbytes.  Each page of the 40 pages/second of data that must be)]TJ
-9.8572 -1.25 TD
0.0138 Tc
0.1381 Tw
(merged from C)Tj
9.36 0 0 9.36 146.0959 608 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 151.6575 610 Tm
0.0058 Tc
0.0577 Tw
[( to C)]TJ
9.36 0 0 9.36 175.1204 608 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 180.682 610 Tm
0.0104 Tc
0.1042 Tw
[( entails 23 pages of reading and 23 of writing, or 1840 pages per second.)]TJ
-10.4502 -1.25 TD
0.0114 Tc
0.1141 Tw
(Similarly, 40 pages/second are being merged from C)Tj
9.36 0 0 9.36 329.0371 595 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 334.5477 597 Tm
0.0049 Tc
0.0495 Tw
[( to C)]TJ
9.36 0 0 9.36 357.7956 595 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 363.3062 597 Tm
0.0089 Tc
0.0897 Tw
(, each of which requires 23 pages of)Tj
-28.0102 -1.25 TD
0.0184 Tc
0.1836 Tw
(reads and writes of C)Tj
9.36 0 0 9.36 181.9178 582 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 187.7403 584 Tm
0.0162 Tc
0.1618 Tw
[(.  The total of the two I/O rates is 3680, exactly the multiblock I/O ca-)]TJ
-11.1289 -1.25 TD
0.0075 Tc
0.075 Tw
(pacity of the 9.2 G of disk.)Tj
0 -2.3077 TD
0.0236 Tc
0.2355 Tw
(An LSM-tree of two or three components will require more I/O for find operations than the)Tj
0 -1.1538 TD
0.0145 Tc
0.1453 Tw
(simple B-tree. The largest component in either case will look very much like the corresponding)Tj
T*
0.0155 Tc
0.1546 Tw
(simple B-tree, but in the LSM-tree case we have not paid the $6,400 for memory for buffering)Tj
T*
0.0108 Tc
0.108 Tw
[(nodes just above the leaf level in the index.  Nodes even higher in the tree are relatively so few)]TJ
T*
0.0073 Tc
0.0735 Tw
[(as to be negligable, and we can assume they are buffered.  Clearly we would be willing to pay for)]TJ
T*
0.021 Tc
0.2098 Tw
(buffering all directory nodes if queries to find entries were sufficiently frequent to justify this)Tj
T*
0.007 Tc
0.0702 Tw
[(cost.  In the three-component case, we need to consider the C)]TJ
9.36 0 0 9.36 371.2244 473 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 376.657 475 Tm
0.0058 Tc
0.0575 Tw
[( component as well.  Since it is 23)]TJ
-29.2939 -1.25 TD
0.0241 Tc
0.2419 Tw
(times smaller than the largest component, we can easily afford to buffer all of its non-leaf)Tj
0 -1.1538 TD
0.0119 Tc
0.1191 Tw
[(nodes, and this cost should be added in the analysis.  The unbuffered leaf access in C)]TJ
9.36 0 0 9.36 499.0786 448 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 504.6842 450 Tm
0.0143 Tc
0.1431 Tw
[( entails)]TJ
-41.6043 -1.25 TD
0.01 Tc
0.0996 Tw
(another additional read for the find in cases where an entry in C)Tj
9.36 0 0 9.36 383.7224 435 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 389.269 437 Tm
0.0088 Tc
0.0884 Tw
[( is being sought, and there is a)]TJ
-30.5066 -1.25 TD
0.0121 Tc
0.1214 Tw
(decision to be made whether to buffer the directory of C)Tj
9.36 0 0 9.36 347.7709 422 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 353.3765 424 Tm
0.0134 Tc
0.1335 Tw
[(.  Thus for the three-component case,)]TJ
-27.0554 -1.25 TD
0.009 Tc
0.0906 Tw
(there may be a few additional page reads over the two I/Os needed for finds in the simple B-tree)Tj
0 -1.1538 TD
0.0133 Tc
0.1324 Tw
[(\(counting one I/O for a page write of a leaf node\).  For the two-component case, there may be)]TJ
T*
0.0116 Tc
0.1166 Tw
[(one additional read.  If we do buy the memory for the buffering of nodes above leaf level of the)]TJ
T*
0.0076 Tc
0.076 Tw
(LSM-tree components, we can meet the B-tree speed in the two-component case and pay for one)Tj
T*
0.0072 Tc
0.0718 Tw
[(extra read only in some cases in the three-component case.  The total cost to add buffering in the)]TJ
T*
0.0199 Tc
0.1988 Tw
[(three-component case would then be $17,700, still far less than the B-tree.  But it may well)]TJ
T*
0.0175 Tc
0.1751 Tw
(be better to use this money in other ways: a full analysis should minimize total cost over the)Tj
T*
0.0138 Tc
0.1385 Tw
(workload, including both updates and retrievals. )Tj
/TT8 1 Tf
10 0 0 10 310.2752 327 Tm
0 Tc
0 Tw
()Tj
/TT6 1 Tf
10.4 0 0 10.4 72 303 Tm
0.0122 Tc
0.1222 Tw
(We have minimized the total I/O needed for merge operations with given S)Tj
9.36 0 0 9.36 439.1948 301 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 444.7714 303 Tm
0.0103 Tc
0.1033 Tw
[( by varying the size)]TJ
-35.8434 -1.25 TD
0.0194 Tc
0.1944 Tw
(ratios r)Tj
9.36 0 0 9.36 107.422 288 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 109.7395 290 Tm
0.0176 Tc
0.1761 Tw
(, with the result of Theorem 3.1, and then minimized the total cost by choosing S)Tj
9.36 0 0 9.36 521.4353 288 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 527.2369 290 Tm
0.0106 Tc
0.1061 Tw
[( to)]TJ
-43.7728 -1.25 TD
0.0112 Tc
0.1113 Tw
[(achieve best disk arm and media cost.  The only remaining variation possible in the LSM-tree is)]TJ
0 -1.1538 TD
0.0125 Tc
0.1253 Tw
[(the total number, K+1, of components provided.  It turns out that as we increase the number of)]TJ
T*
0.012 Tc
0.1199 Tw
(components the size of S)Tj
9.36 0 0 9.36 196.7646 251 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 202.3261 253 Tm
0.0104 Tc
0.1038 Tw
[( continues to decrease until the point is reached where the ratio r be-)]TJ
-12.5314 -1.25 TD
0.0118 Tc
0.1183 Tw
(tween component sizes reaches the value e = 2.71. . . , or until we reach the cold-data regime.)Tj
0 -1.1538 TD
0.0093 Tc
0.0934 Tw
(However, we can see from Example 3.4 that successively smaller S)Tj
9.36 0 0 9.36 399.4609 226 Tm
0.0035 Tc
0 Tw
(0 )Tj
10.4 0 0 10.4 407.665 228 Tm
0.0117 Tc
0.1169 Tw
(components as the number)Tj
-32.2755 -1.25 TD
0.0159 Tc
0.1583 Tw
[(of components increases make less and less difference to total cost;  in an LSM-tree of three)]TJ
0 -1.1538 TD
0.0153 Tc
0.1533 Tw
(components, the memory size S)Tj
9.36 0 0 9.36 231.5374 201 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 237.1279 203 Tm
0.0127 Tc
0.1271 Tw
[( has already been reduced to 17 MBytes.  Furthermore, there)]TJ
-15.8777 -1.25 TD
0.0108 Tc
0.1077 Tw
[(are costs associated with increasing the number of components:  a CPU cost to perform the ad-)]TJ
0 -1.1538 TD
0.0157 Tc
0.1563 Tw
(ditional rolling merges and a memory cost to buffer the nodes of those merges \(which will ac-)Tj
T*
0.0168 Tc
0.168 Tw
(tually swamp the memory cost of C)Tj
9.36 0 0 9.36 250.0866 164 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 255.8152 166 Tm
0.016 Tc
0.1599 Tw
[( in common cost regimes\).  In addition, indexed finds re-)]TJ
-17.6745 -1.25 TD
0.0311 Tc
0.3104 Tw
(quiring immediate response will sometimes have to perform retrieval from all component)Tj
0 -1.1538 TD
0.0139 Tc
0.1398 Tw
[(trees.  These considerations put a strong constraint on the appropriate number of components,)]TJ
T*
0.0092 Tc
0.0927 Tw
(and three components are probably the most that will be seen in practice.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 91 Tm
0.0368 Tc
0.3674 Tw
[(4.  Concurrency and Recovery in the LSM-tree)]TJ
ET
endstream
endobj
75 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
78 0 obj
<<
/Length 8211
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-22-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0193 Tc
0.1936 Tw
(In the current Section we investigate the approaches to be used to provide concurrency and)Tj
0 -1.1538 TD
0.0098 Tc
0.0983 Tw
[(recover for the LSM-tree.  To accomplish this, we need to sketch a more detailed level of design)]TJ
T*
0.0161 Tc
0.1604 Tw
[(for the rolling merge process.  We leave a formal demonstration of correctness of the concur-)]TJ
T*
0.0237 Tc
0.2369 Tw
[(rency and recovery algorithms for a later work, and try here simply to motivate the design)]TJ
T*
-0.0029 Tc
0 Tw
(proposed.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 636 Tm
0.0408 Tc
0.4076 Tw
[(4.1.  Concurrency in the LSM-tree)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 611 Tm
0.0137 Tc
0.1366 Tw
(In general, we are given an LSM-tree of K+1 components, C)Tj
9.36 0 0 9.36 371.5035 609 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 377.1281 611 Tm
0.0079 Tc
0.0791 Tw
(, C)Tj
9.36 0 0 9.36 391.4866 609 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 397.1111 611 Tm
0.0079 Tc
0.0791 Tw
(, C)Tj
9.36 0 0 9.36 411.4696 609 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 417.0942 611 Tm
0.0052 Tc
0.0519 Tw
(, . . ., C)Tj
9.36 0 0 9.36 453.3098 609 Tm
0.0418 Tc
0 Tw
(K-1)Tj
10.4 0 0 10.4 469.0484 611 Tm
0.0091 Tc
0.0912 Tw
[( and C)]TJ
9.36 0 0 9.36 502.1558 609 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 508.9019 611 Tm
0.0083 Tc
0.0828 Tw
(, of in-)Tj
-42.0098 -1.25 TD
0.0153 Tc
0.1528 Tw
(creasing size, where the C)Tj
9.36 0 0 9.36 205.0353 596 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 210.6869 598 Tm
0.0154 Tc
0.1542 Tw
[( component tree is memory resident and all other components are)]TJ
-13.3353 -1.25 TD
0.0135 Tc
0.1348 Tw
[(disk resident.  There are asynchronous rolling merge processes in train between all component)]TJ
0 -1.1538 TD
0.0217 Tc
0.217 Tw
(pairs \(C)Tj
9.36 0 0 9.36 112.4701 571 Tm
0.0413 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 124.0331 573 Tm
0.011 Tc
0.1097 Tw
(, C)Tj
9.36 0 0 9.36 138.8056 571 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 141.1171 573 Tm
0.0178 Tc
0.1775 Tw
(\) that move entries out from the smaller to the larger component each time the)Tj
-6.6459 -1.25 TD
0.0292 Tc
0.2921 Tw
(smaller component, C)Tj
9.36 0 0 9.36 185.3072 558 Tm
0.0444 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 196.9572 560 Tm
0.0201 Tc
0.2011 Tw
[(, exceeds its threshold size.  Each disk resident component is con-)]TJ
-12.0151 -1.25 TD
0.0173 Tc
0.1734 Tw
(structed of page-sized nodes in a B-tree type structure, except that multiple nodes in key se-)Tj
0 -1.1538 TD
0.0227 Tc
0.2271 Tw
[(quence order at all levels below the root sit on multi-page blocks.  Directory information in)]TJ
T*
0.0054 Tc
0.0538 Tw
(upper levels of the tree channels access down through single page nodes and also indicates which)Tj
T*
0.0162 Tc
0.1617 Tw
(sequence of nodes sits on a multi-page block, so that a read or write of such a block can be)Tj
T*
0.0198 Tc
0.1979 Tw
[(performed all at once.  Under most circumstances, each multi-page block is packed full with)]TJ
T*
0.007 Tc
0.0704 Tw
(single page nodes, but as we will see there are a few situations where a smaller number of nodes)Tj
T*
0.0096 Tc
0.0963 Tw
[(exist in such a block.  In that case, the active nodes of the LSM-tree will fall on a contiguous set)]TJ
T*
0.0175 Tc
0.1745 Tw
[(of pages of the multi-page block, though not necessarily the initial pages of the block.  Apart)]TJ
T*
0.0127 Tc
0.1265 Tw
(from the fact that such contiguous pages are not necessarily the initial pages on the multi-page)Tj
T*
0.0266 Tc
0.2666 Tw
(block, the structure of an LSM-tree component is identical to the structure of the SB-tree)Tj
T*
0.0175 Tc
0.1754 Tw
(presented in [21], to which the reader is referred for supporting details.)Tj
0 -2.3077 TD
0.0072 Tc
0.0725 Tw
(A node of a disk-based component C)Tj
9.36 0 0 9.36 250.2017 401 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 252.3672 403 Tm
0.0069 Tc
0.0688 Tw
[( can be individually resident in a single page memory buffer,)]TJ
-17.343 -1.25 TD
0.0185 Tc
0.1849 Tw
(as when equal match finds are performed, or it can be memory resident within its containing)Tj
0 -1.1538 TD
0.0187 Tc
0.1872 Tw
[(multi-page block.  A multi-page block will be buffered in memory as a result of a long range)]TJ
T*
0.0128 Tc
0.1275 Tw
(find or else because the rolling merge cursor is passing through the block in question at a high)Tj
T*
0.0101 Tc
0.1009 Tw
[(rate.  In any event, all non-locked nodes of the C)]TJ
9.36 0 0 9.36 311.4771 352 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 313.7025 354 Tm
0.0138 Tc
0.1374 Tw
[( component are accessible to directory lookup)]TJ
-23.2406 -1.25 TD
0.0145 Tc
0.1453 Tw
(at all times, and disk access will perform lookaside to locate any node in memory, even if it is)Tj
0 -1.1538 TD
0.0148 Tc
0.1479 Tw
[(resident as part of a multi-page block taking part in the rolling merge.  Given these considera-)]TJ
T*
0.019 Tc
0.1908 Tw
(tions, a concurrency approach for the LSM-tree must mediate three distinct types of physical)Tj
T*
0.0571 Tc
0 Tw
(conflict.)Tj
-0.0962 -2.3077 TD
0.0026 Tc
0.0259 Tw
[( )-279.6( )-279.6(\()-25.4(i)-25.4(\))-958.4(A find operation should not access a node of a disk-based component at the same time that a)]TJ
3.0769 -1.1538 TD
0.0118 Tc
0.1181 Tw
(different process performing a rolling merge is modifying the contents of the node.)Tj
-3.0769 -2.3077 TD
0.0588 Tc
0.5889 Tw
[( \(ii\))-805.7(A)48.9( )]TJ
4.1411 0 TD
0.0099 Tc
0.0995 Tw
(find or insert into the C)Tj
9.36 0 0 9.36 226.4468 243 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 232.0614 245 Tm
0.012 Tc
0.12 Tw
[( component should not access the same part of the tree that a)]TJ
-12.4098 -1.25 TD
0.0145 Tc
0.1448 Tw
(different process is simultaneously altering to perform a rolling merge out to C)Tj
9.36 0 0 9.36 490.3828 230 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 496.0273 232 Tm
(.)Tj
-40.868 -2.4038 TD
0.2441 Tc
(\(iii\))Tj
3.0769 0 TD
0.0116 Tc
0.116 Tw
(The cursor for the rolling merge from C)Tj
9.36 0 0 9.36 295.3324 205 Tm
0.0271 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 306.4965 207 Tm
0.0071 Tc
0.0711 Tw
[( out to C)]TJ
9.36 0 0 9.36 348.6892 205 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 350.9207 207 Tm
0.0106 Tc
0.1057 Tw
[( will sometimes need to )]TJ
/TT10 1 Tf
11.4536 0 TD
0.0178 Tc
0.1782 Tw
(move past)Tj
/TT6 1 Tf
4.9515 0 TD
0.0094 Tc
0.0942 Tw
[( the)]TJ
-40.2437 -1.25 TD
0.0165 Tc
0.1651 Tw
(cursor for the rolling merge from C)Tj
9.36 0 0 9.36 277.6833 192 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 279.9768 194 Tm
0.01 Tc
0.0998 Tw
[( out to C)]TJ
9.36 0 0 9.36 323.3365 192 Tm
0.0468 Tc
0 Tw
(i+1)Tj
10.4 0 0 10.4 337.4017 194 Tm
0.015 Tc
0.1505 Tw
(, since the rate of migration out from the)Tj
-22.5386 -1.25 TD
0.0291 Tc
0.2918 Tw
(component C)Tj
9.36 0 0 9.36 171.2236 179 Tm
0.0381 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 182.6966 181 Tm
0.0138 Tc
0.1372 Tw
[( is always at least as great as the rate of migration out from C)]TJ
9.36 0 0 9.36 494.4852 179 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 496.7787 181 Tm
0.0139 Tc
0.1391 Tw
[( and this)]TJ
-37.8633 -1.25 TD
0.0158 Tc
0.1575 Tw
(implies a faster rate of circulation of the cursor attached to the smaller component C)Tj
9.36 0 0 9.36 525.5977 166 Tm
0.0356 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 536.9987 168 Tm
0 Tc
(.)Tj
-41.7306 -1.25 TD
0.0134 Tc
0.134 Tw
(Whatever concurrency method is adopted must permit this passage to take place without)Tj
0 -1.1538 TD
0.0146 Tc
0.1463 Tw
(one process \(migration out )Tj
/TT10 1 Tf
13.0968 0 TD
0.0337 Tc
0 Tw
(to)Tj
/TT6 1 Tf
0.9015 0 TD
0.0741 Tc
( C)Tj
9.36 0 0 9.36 259.8231 141 Tm
0 Tc
(i)Tj
10.4 0 0 10.4 262.0706 143 Tm
0.0127 Tc
0.1274 Tw
(\) being blocked behind the other at the point of intersec-)Tj
-15.2953 -1.25 TD
0.0214 Tc
0.2146 Tw
(tion \(migration out )Tj
/TT10 1 Tf
9.3541 0 TD
0.0648 Tc
0 Tw
(from)Tj
/TT6 1 Tf
2.2592 0 TD
0.1187 Tc
( C)Tj
9.36 0 0 9.36 235.5261 128 Tm
0 Tc
(i)Tj
10.4 0 0 10.4 237.8745 130 Tm
0.0791 Tc
(\).)Tj
-15.9495 -2.4038 TD
0.015 Tc
0.1499 Tw
(Nodes are the unit of locking used in the LSM-tree to avoid physical conflict during concurrent)Tj
0 -1.1538 TD
0.0103 Tc
0.1033 Tw
[(access to disk based components.  Nodes being updated because of rolling merge are locked in)]TJ
T*
0.0134 Tc
0.1337 Tw
[(write mode and nodes being read during a find are locked in read mode;  methods of directory)]TJ
ET
endstream
endobj
79 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
81 0 obj
<<
/Length 8358
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-23-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0169 Tc
0.1696 Tw
[(locking to avoid deadlocks are well understood \(see, for example, [3]\).  The locking approach)]TJ
0 -1.1538 TD
0.0143 Tc
0.1438 Tw
(taken in C)Tj
9.36 0 0 9.36 123.3054 696 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 129.01 698 Tm
0.0142 Tc
0.1422 Tw
[( is dependent on the data structure used.  In the case of a \(2-3\)-tree, for example,)]TJ
-5.4817 -1.25 TD
0.0278 Tc
0.2776 Tw
(we could write lock a subtree falling below a single \(2-3\)-directory node that contains all)Tj
0 -1.1538 TD
0.0131 Tc
0.1303 Tw
(entries in the range affected during a merge to a node of C)Tj
9.36 0 0 9.36 366.2777 671 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 371.9513 673 Tm
0.0159 Tc
0.1587 Tw
[(;   simultaneously, find operations)]TJ
-28.8415 -1.25 TD
0.0181 Tc
0.1806 Tw
(would lock all \(2-3\)-nodes on their access path in read mode so that one type of access will)Tj
0 -1.1538 TD
0.0134 Tc
0.1339 Tw
[(exclude another.  Note that we are only considering concurrency at the lowest physical level of)]TJ
T*
0.0228 Tc
0.2277 Tw
[(multi-level locking, in the sense of [28].  We leave to others the question of more abstract)]TJ
T*
0.0234 Tc
0.2339 Tw
(locks, such as key range locking to preserve transactional isolation, and avoid for now the)Tj
T*
0.0154 Tc
0.1539 Tw
[(problem of phantom updates;  see [4], [14] for a discussion.  Thus read-locks are released as)]TJ
T*
0.0088 Tc
0.0878 Tw
[(soon as the entries being sought at the leaf level have been scanned.  Write locks for \(all\) nodes)]TJ
T*
0.0192 Tc
0.1922 Tw
[(under the cursor are released following each node merged from the larger component.  This)]TJ
T*
0.0225 Tc
0.2245 Tw
(gives an opportunity for a long range find or for a faster cursor to pass a relatively slower)Tj
T*
0.0145 Tc
0.1451 Tw
(cursor position, and thus addresses point \(iii\) above..)Tj
0 -2.3077 TD
0.0122 Tc
0.1221 Tw
(Now assume we are performing a rolling merge between two disk based components, migrating)Tj
0 -1.1538 TD
0.0249 Tc
0.2492 Tw
(entries from C)Tj
9.36 0 0 9.36 146.1147 526 Tm
0.05 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 157.9207 528 Tm
0.0159 Tc
0.1585 Tw
(, which we refer to as the )Tj
/TT10 1 Tf
12.9323 0 TD
0.0402 Tc
0.4021 Tw
(inner component)Tj
/TT6 1 Tf
8.4542 0 TD
0.0173 Tc
0.1728 Tw
[( of this rolling merge, out to C)]TJ
9.36 0 0 9.36 534.5194 526 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 536.8789 528 Tm
(,)Tj
-44.6999 -1.25 TD
0.0138 Tc
0.1375 Tw
[(which we refer to as the )]TJ
/TT10 1 Tf
12.0077 0 TD
0.0324 Tc
0.3239 Tw
(outer component)Tj
/TT6 1 Tf
8.3148 0 TD
0.0173 Tc
0.173 Tw
[(.  The cursor always has a well-defined inner com-)]TJ
-20.3225 -1.1538 TD
0.0159 Tc
0.1586 Tw
(ponent position within a leaf-level node of C)Tj
9.36 0 0 9.36 292.1703 501 Tm
0.0349 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 303.5533 503 Tm
0.0131 Tc
0.1307 Tw
(, pointing to the next entry it is about to migrate)Tj
-22.2647 -1.25 TD
0.0117 Tc
0.117 Tw
(out to C)Tj
9.36 0 0 9.36 111.8283 488 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 114.1018 490 Tm
0.0146 Tc
0.1463 Tw
(, and simultaneously a position in each of the higher directory levels of C)Tj
9.36 0 0 9.36 478.8364 488 Tm
0.0346 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 490.2104 490 Tm
0.0141 Tc
0.1416 Tw
[( along the)]TJ
-40.2125 -1.25 TD
0.0052 Tc
0.0514 Tw
[(path of access to the leaf level node position.  The cursor also has an outer component  position in)]TJ
0 -1.1538 TD
0 Tc
0 Tw
(C)Tj
9.36 0 0 9.36 79.8715 463 Tm
(i)Tj
10.4 0 0 10.4 82.051 465 Tm
0.007 Tc
0.0702 Tw
(, both at the leaf level and at upper levels along the path of access, corresponding to an entry it)Tj
-0.9664 -1.25 TD
0.0116 Tc
0.1169 Tw
[(is about to consider in the merge process.  As the merge cursor progresses through successive)]TJ
0 -1.1538 TD
0.0149 Tc
0.1492 Tw
(entries of the inner and outer components, new leaf nodes of C)Tj
9.36 0 0 9.36 388.907 438 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 391.1775 440 Tm
0.0138 Tc
0.1371 Tw
[( created by the merge are im-)]TJ
-30.6901 -1.25 TD
0.0163 Tc
0.1635 Tw
[(mediately placed in left-to-right sequence in a new buffer resident multi-page block.  Thus the)]TJ
0 -1.1538 TD
0.0145 Tc
0.1448 Tw
(nodes of the C)Tj
9.36 0 0 9.36 146.2777 413 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 148.5602 415 Tm
0.0169 Tc
0.1688 Tw
[( component surrounding the current cursor position will in general be split into)]TJ
-7.3616 -1.25 TD
0.0274 Tc
0.2744 Tw
[(two partially full multi-page block buffers in memory:  the "emptying" block whose entries)]TJ
0 -1.1538 TD
0.0123 Tc
0.1235 Tw
(have been depleted but which retains information not yet reached by the merge cursor, and the)Tj
T*
0.027 Tc
0.2706 Tw
("filling" block which reflects the result of the merge up to this moment but is not yet full)Tj
T*
0.0205 Tc
0.205 Tw
[(enough to write on disk.  For concurrent access purposes, both the emptying block and the)]TJ
T*
0.0114 Tc
0.1148 Tw
(filling block contain an integral number of page-sized nodes of the C)Tj
9.36 0 0 9.36 406.1118 352 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 411.6733 354 Tm
0.0123 Tc
0.1235 Tw
[( tree which simply happen)]TJ
-32.6609 -1.25 TD
0.0174 Tc
0.174 Tw
[(to be buffer resident.  During merge step operations restructuring individual nodes, the nodes)]TJ
0 -1.1538 TD
0.0106 Tc
0.1055 Tw
(involved are locked in write mode, blocking other types of concurrent access to the entries.)Tj
0 -2.3077 TD
0.0174 Tc
0.1737 Tw
(In the most general approach to a rolling merge, we may wish to retain certain entries in the)Tj
0 -1.1538 TD
0.0286 Tc
0.2859 Tw
(component C)Tj
9.36 0 0 9.36 140.0976 291 Tm
0.0374 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 151.5497 293 Tm
0.0146 Tc
0.1465 Tw
[( rather than migrating all entries out to C)]TJ
9.36 0 0 9.36 355.8294 291 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 358.1189 293 Tm
0.0139 Tc
0.1396 Tw
[( as the cursor passes over them.  In)]TJ
-27.5114 -1.25 TD
0.0125 Tc
0.1255 Tw
(this case, the nodes in the C)Tj
9.36 0 0 9.36 214.8339 278 Tm
0.0328 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 226.157 280 Tm
0.0152 Tc
0.1515 Tw
[( component surrounding the merge cursor will also be split into)]TJ
-14.8228 -1.25 TD
0.0131 Tc
0.1311 Tw
[(two buffer resident multi-page blocks, the "emptying" block that contains nodes of  C)]TJ
9.36 0 0 9.36 488.4786 265 Tm
0.0281 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 499.6697 267 Tm
0.0098 Tc
0.0978 Tw
[( that the)]TJ
-41.1221 -1.25 TD
0.0189 Tc
0.1894 Tw
(merge cursor has not yet reached, and the "filling" block with nodes, placed left-to-right, that)Tj
0 -1.1538 TD
0.0177 Tc
0.1768 Tw
(contain entries recently passed over by the merge cursor and retained in component C)Tj
9.36 0 0 9.36 509.6708 240 Tm
0.0365 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 521.0988 242 Tm
0.0068 Tc
0.0687 Tw
[(.  In)]TJ
-43.1826 -1.25 TD
0.0163 Tc
0.1636 Tw
(this most general case then, the merge cursor position is affecting four different nodes at any)Tj
0 -1.1538 TD
0.0076 Tc
0.0757 Tw
[(one time:  the inner and outer component nodes in the emptying blocks where the merge is about)]TJ
T*
0.0113 Tc
0.1134 Tw
(to occur and the inner and outer component nodes in the filling blocks where new information is)Tj
T*
0.0191 Tc
0.1909 Tw
[(being written as the cursor progresses.  Clearly these four nodes may all be less than com-)]TJ
T*
0.0087 Tc
0.0868 Tw
[(pletely full at any moment, and the same is true of the containing blocks.  We take write locks on)]TJ
T*
0.0155 Tc
0.1552 Tw
(all four nodes during the time the merge is actually modifying the node structures and release)Tj
T*
0.0092 Tc
0.0919 Tw
[(these locks at quantized instants to allow a faster cursor to pass by;  we choose to release locks)]TJ
T*
0.0065 Tc
0.0651 Tw
(each time a node in the emptying block in the outer component has been completely depleted, but)Tj
T*
0.0116 Tc
0.1165 Tw
[(the other three nodes will generally be less than full at that time.  This is all right, since we can)]TJ
T*
0.0138 Tc
0.1381 Tw
(perform all operations of access on a tree with nodes that are less than completely full as well)Tj
T*
0.0118 Tc
0.118 Tw
[(as blocks that are less than completely full with nodes.  The case where one cursor passes an-)]TJ
T*
0.0316 Tc
0.316 Tw
(other requires particularly careful thought, because in general the cursor position of the)Tj
T*
0.0134 Tc
0.1331 Tw
(rolling merge being bypassed will be invalidated on its inner component, and provision must be)Tj
ET
endstream
endobj
82 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
84 0 obj
<<
/Length 6833
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-24-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0134 Tc
0.1333 Tw
[(made to reorient the cursor.  Note that all of the above considerations also apply at various di-)]TJ
0 -1.1538 TD
0.0175 Tc
0.1751 Tw
[(rectory levels of both components where changes occur because of the moving cursor.  High)]TJ
T*
0.0313 Tc
0.3122 Tw
[(level directory nodes will not normally be memory resident in a multi-page block buffer,)]TJ
T*
0.0137 Tc
0.1369 Tw
[(however, so a somewhat different algorithm must be used, but there will still be a "filling" node)]TJ
T*
0.0119 Tc
0.1191 Tw
[(and an "emptying" node at every instant.  We leave such complex considerations for later work,)]TJ
T*
0.0125 Tc
0.1253 Tw
(after an implementation of the LSM-tree has provided additional experience.)Tj
0 -2.3077 TD
0.0133 Tc
0.133 Tw
(Up to now we haven't taken any special account of the situation where the rolling merge under)Tj
0 -1.1538 TD
0.0153 Tc
0.1533 Tw
(consideration is directed from the inner component C)Tj
9.36 0 0 9.36 335.374 612 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 340.9946 614 Tm
0.0092 Tc
0.092 Tw
[( to the outer C)]TJ
9.36 0 0 9.36 412.1625 612 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 417.7831 614 Tm
0.0115 Tc
0.1159 Tw
[( component.  In fact, this)]TJ
-33.2484 -1.25 TD
0.0174 Tc
0.1736 Tw
[(is a relatively simple situation by comparison with a disk-based inner component.  As with all)]TJ
0 -1.1538 TD
0.0132 Tc
0.1318 Tw
(such merge steps, one CPU should be totally dedicated to this task so that other accesses are)Tj
T*
0.0144 Tc
0.1442 Tw
[(excluded by write locks for a short a time as possible.  The range of C)]TJ
9.36 0 0 9.36 425.9655 575 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 431.7091 577 Tm
0.0163 Tc
0.1626 Tw
[( entries to be merged)]TJ
-34.5874 -1.25 TD
0.0155 Tc
0.1545 Tw
(should be pre-calculated and a write lock taken on this entry range in advance by the method)Tj
0 -1.1538 TD
0.0094 Tc
0.0942 Tw
[(already explained.  Following this, CPU time is saved by deleting entries from the C)]TJ
9.36 0 0 9.36 477.198 550 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 482.7016 552 Tm
0.0158 Tc
0.1575 Tw
[( component)]TJ
-39.4905 -1.25 TD
0.0123 Tc
0.1226 Tw
[(in a batch fashion, without attempts to rebalance after each individual entry delete;  the C)]TJ
9.36 0 0 9.36 512.213 537 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 517.8105 539 Tm
0.0108 Tc
0.1078 Tw
[( tree)]TJ
-42.8664 -1.25 TD
0.0085 Tc
0.0842 Tw
(can be fully rebalanced after the merge step is complete.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 500 Tm
0.0401 Tc
0.4006 Tw
[(4.2.  Recovery in the LSM-tree)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 475 Tm
0.0214 Tc
0.2147 Tw
(As new entries are inserted into the C)Tj
9.36 0 0 9.36 269.521 473 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 275.4496 475 Tm
0.0242 Tc
0.2426 Tw
[( component of the LSM-tree, and the rolling merge)]TJ
-19.5625 -1.25 TD
0.0211 Tc
0.2108 Tw
(processes migrates entry information out to successively larger components, this work takes)Tj
0 -1.1538 TD
0.0153 Tc
0.1525 Tw
[(place in memory buffered multi-page blocks.  As with any such memory buffered changes, the)]TJ
T*
0.0186 Tc
0.1856 Tw
[(work is not resistant to system failure until it has been written to disk.  We are faced with a)]TJ
T*
0.0163 Tc
0.1627 Tw
[(classical recovery problem:  to reconstruct work that has taken place in memory after a crash)]TJ
T*
0.0142 Tc
0.1428 Tw
[(occurs and memory is lost.  As we mentioned at the beginning of Chapter 2, we don't need to)]TJ
T*
0.0138 Tc
0.1387 Tw
[(create special logs to recover index entries on newly created records:  transactional insert logs)]TJ
T*
0.0106 Tc
0.1059 Tw
(for these new records are written out to a sequential log file in the normal course of events, and)Tj
T*
0.0164 Tc
0.1642 Tw
(it is a simple matter to treat these insert logs \(which normally contain all field values together)Tj
T*
0.0102 Tc
0.1021 Tw
(with the RID where the inserted record has been placed\) as a logical base for reconstructing the)Tj
T*
0.0168 Tc
0.168 Tw
[(index entries.  This new approach to recover an index must be built into the system recovery)]TJ
T*
0.0178 Tc
0.1776 Tw
(algorithm, and may have the effect of extending the time before storage reclamation for such)Tj
T*
0.0137 Tc
0.1361 Tw
(transactional History insert logs can take place, but this is a minor consideration.)Tj
0 -2.3077 TD
0.0234 Tc
0.234 Tw
(To demonstrate recovery of the LSM-tree index, it is important that we carefully define the)Tj
0 -1.1538 TD
0.0107 Tc
0.1065 Tw
(form of a checkpoint and demonstrate that we know where to start in the sequential log file, and)Tj
T*
0.0117 Tc
0.117 Tw
(how to apply successive logs, so as to deterministically replicate updates to the index that need)Tj
T*
0.0036 Tc
0.0351 Tw
[(to be recovered.  The scheme we use is as follows.  When a checkpoint is requested at time T)]TJ
9.36 0 0 9.36 515.3188 268 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 520.6484 270 Tm
0.0034 Tc
0.0336 Tw
(, we)Tj
-43.1393 -1.25 TD
0.0163 Tc
0.1633 Tw
(complete all merge steps in operation so that node locks are released, then postpone all new)Tj
0 -1.1538 TD
0.1622 Tw
[(entry inserts to the LSM-tree until the checkpoint completes;  at this point we create an LSM-)]TJ
T*
0.0154 Tc
0.1538 Tw
(tree checkpoint with the following actions.)Tj
0.4808 -2.3077 TD
0.019 Tc
0.1902 Tw
[(o)-674.8(We write the contents of component C)]TJ
9.36 0 0 9.36 285.3034 207 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 291.069 209 Tm
0.0153 Tc
0.1532 Tw
[( to a known disk location;  following this, entry in-)]TJ
-19.3336 -1.25 TD
0.0044 Tc
0.0446 Tw
(serts to C)Tj
9.36 0 0 9.36 135.8876 194 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 141.2562 196 Tm
0.0052 Tc
0.0515 Tw
[( can begin again, but merge steps continue to be deferred.)]TJ
-6.1785 -1.25 TD
0.0078 Tc
0.0774 Tw
[(o)-686(We flush to disk all dirty memory buffered nodes of disk based components.)]TJ
0 -1.1538 TD
0.0125 Tc
0.1246 Tw
[(o)-681.3(We create a special checkpoint log with the following information:)]TJ
1.25 -1.1538 TD
0.006 Tc
0.06 Tw
[(o)-687.8(The Log Sequence Number, LSN)]TJ
9.36 0 0 9.36 261.0128 157 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 266.3624 159 Tm
0.0038 Tc
0.0382 Tw
(, of the last inserted indexed row at time T)Tj
9.36 0 0 9.36 464.7656 157 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 90 146 Tm
0.0035 Tc
0.0343 Tw
[(o)-690.3(The disk addresses of the roots of all components)]TJ
T*
0.0097 Tc
0.097 Tw
[(o)-684.1(The location of all merge cursors in the various components)]TJ
T*
0.0166 Tc
0.1667 Tw
[(o)-677.2(The current information for dynamic allocation of new multi-page blocks.)]TJ
-1.7308 -2.3077 TD
0.0114 Tc
0.1146 Tw
(Once this checkpoint information has been placed on disk, we can resume regular operations of)Tj
0 -1.1538 TD
0.0079 Tc
0.0788 Tw
[(the LSM-tree.  In the event of a crash and subsequent restart, this checkpoint can be located and)]TJ
ET
endstream
endobj
85 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
87 0 obj
<<
/Length 6456
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-25-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0192 Tc
0.1922 Tw
(the saved component C)Tj
9.36 0 0 9.36 192.0419 708 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 197.7305 710 Tm
0.0158 Tc
0.1579 Tw
[( loaded back into memory, together with the buffered blocks of other)]TJ
-12.0895 -1.25 TD
0.0106 Tc
0.1054 Tw
[(components needed to continue rolling merges.  Then logs starting with the first LSN after LSN)]TJ
9.36 0 0 9.36 534.6558 695 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 72 684 Tm
0.0125 Tc
0.1248 Tw
[(are read into memory and have their associated index entries entered into the LSM-tree.  As of)]TJ
0 -1.1538 TD
0.0184 Tc
0.1838 Tw
(the time of the checkpoint, the positions of all disk-based components containing all indexing)Tj
T*
0.0188 Tc
0.1885 Tw
[(information were recorded in component directories starting at the roots, whose locations are)]TJ
T*
0.0137 Tc
0.137 Tw
[(known from the checkpoint log.  None of this information has been wiped out by later writes of)]TJ
T*
0.0147 Tc
0.1475 Tw
(multi-page disk blocks since these writes are always to new locations on disk until subsequent)Tj
T*
0.1462 Tw
[(checkpoints make outmoded multi-page blocks unnecessary.  As we recover logs of inserts for)]TJ
T*
0.0109 Tc
0.109 Tw
(indexed rows, we place new entries into the C)Tj
9.36 0 0 9.36 297.737 610 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 303.2916 612 Tm
0.0112 Tc
0.1126 Tw
[( component;  now the rolling merge starts again,)]TJ
-22.2396 -1.25 TD
0.0223 Tc
0.2236 Tw
(overwriting any multi-page blocks written since the checkpoint, but recovering all new index)Tj
0 -1.1538 TD
0.0111 Tc
0.111 Tw
(entries, until the most recently inserted row has been indexed and recovery is complete.)Tj
0 -2.3077 TD
0.019 Tc
0.1904 Tw
(This recovery approach clearly works, and its only drawback is that there is a possibly large)Tj
0 -1.1538 TD
0.0187 Tc
0.1863 Tw
[(pause while various disk writes take place during the checkpoint process.  This pause is not)]TJ
T*
0.0137 Tc
0.1361 Tw
(terribly significant, however, since we can write the C)Tj
9.36 0 0 9.36 335.0606 537 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 340.6742 539 Tm
0.0117 Tc
0.1171 Tw
[( component to disk in a short period and)]TJ
-25.8341 -1.25 TD
0.0129 Tc
0.1285 Tw
(then resume inserts to the C)Tj
9.36 0 0 9.36 213.0768 524 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 218.6984 526 Tm
0.0116 Tc
0.116 Tw
[( component while the rest of the writes to disk complete;  this will)]TJ
-14.1056 -1.25 TD
0.0142 Tc
0.1426 Tw
(simply result in a longer than usual latency period during which index entries newly inserted to)Tj
0 -1.1538 TD
0 Tc
0 Tw
(C)Tj
9.36 0 0 9.36 80.0555 499 Tm
(0)Tj
10.4 0 0 10.4 85.6391 501 Tm
0.0124 Tc
0.1238 Tw
[( are not merged out to larger disk-based components.  Once the checkpoint is complete, the)]TJ
-1.3115 -1.25 TD
0.0112 Tc
0.1129 Tw
[(rolling merge process can catch up on work it has missed.   Note that the last piece of informa-)]TJ
0 -1.1538 TD
0.0198 Tc
0.1985 Tw
(tion mentioned in the checkpoint log list above was the current information for dynamic allo-)Tj
T*
0.0138 Tc
0.1381 Tw
[(cation of new multi-page blocks.  In the case of a crash, we will need to figure out in recovery)]TJ
T*
0.0163 Tc
0.1637 Tw
[(what multi-page blocks are available in our dynamic disk storage allocation algorithm.  This is)]TJ
T*
0.0261 Tc
0.2604 Tw
[(clearly not a difficult problem;  in fact a more difficult problem of garbage collecting frag-)]TJ
T*
0.0114 Tc
0.1144 Tw
(mented information within such a block had to be solved in [23].)Tj
0 -2.3077 TD
0.0152 Tc
0.1523 Tw
[(Another detail of recovery has to do with directory information.  Note that as the rolling merge)]TJ
0 -1.1538 TD
0.0198 Tc
0.1981 Tw
(progresses, each time a multi-page block or a higher level directory node is brought in from)Tj
T*
0.0173 Tc
0.173 Tw
(disk to be emptied it must immediately be assigned a new disk position in case a checkpoint)Tj
T*
0.0122 Tc
0.1223 Tw
(occurs before the emptying is completed and remaining buffered information must be forced out)Tj
T*
0.0188 Tc
0.1886 Tw
[(to disk.  This means that the directory entries pointing down to the emptying nodes must be)]TJ
T*
0.0113 Tc
0.1138 Tw
[(immediately corrected to point to the new node locations.  Similarly we must immediately assign)]TJ
T*
0.013 Tc
0.1296 Tw
(a disk position for newly created nodes so that directory entries in the tree will be able to point)Tj
T*
0.0173 Tc
0.1729 Tw
[(immediately to the appropriate position on disk.  At every point we need to take care that di-)]TJ
T*
0.0232 Tc
0.232 Tw
(rectory nodes containing pointers to lower-level nodes buffered by a rolling merge are also)Tj
T*
0.0111 Tc
0.1107 Tw
[(buffered;  only in this way can we make all necessary modifications quickly so that a checkpoint)]TJ
T*
0.0245 Tc
0.2455 Tw
[(will not be held up waiting for I/Os to correct directories.  Furthermore, after a checkpoint)]TJ
T*
0.0223 Tc
0.2229 Tw
(occurs and the multi-page blocks are read back into memory buffers to continue the rolling)Tj
T*
0.0164 Tc
0.1645 Tw
(merge, all the blocks involved must be assigned to a new disk position, and thus all directory)Tj
T*
0.0192 Tc
0.1927 Tw
[(pointers to subsidiary nodes must be corrected.  If this sounds like a great deal of work the)]TJ
T*
0.0195 Tc
0.1948 Tw
(reader should recall that there is no additional I/O necessary and the number of pointers in-)Tj
T*
0.0105 Tc
0.1047 Tw
[(volved is probably only about 64 for each block buffered.  Furthermore these changes should be)]TJ
T*
0.0133 Tc
0.1324 Tw
(amortized over a large number of merged nodes, assuming that the checkpoints are only taken)Tj
T*
0.0105 Tc
0.1052 Tw
[(frequently enough to keep recovery time from growing beyond a few minutes;  this implies a few)]TJ
T*
0.0096 Tc
0.0962 Tw
(minutes of I/O between checkpoints.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 162 Tm
0.045 Tc
0.4493 Tw
[(5.  Cost-Performance Comparisons with Other Access Methods)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 137 Tm
0.0186 Tc
0.1856 Tw
(In our introductory Example 1.2, we considered a B-tree for the Acct-ID||Timestamp index on)Tj
T*
0.0158 Tc
0.1575 Tw
(the History file because it is the most common disk-based access method used in commercial)Tj
T*
0.0129 Tc
0.1293 Tw
[(systems.  What we wish to show now is that no other disk indexing structure consistently gives)]TJ
T*
0.0114 Tc
0.1144 Tw
[(superior I/O performance.  To motivate this statement, we argue as follows.)]TJ
ET
endstream
endobj
88 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
90 0 obj
<<
/Length 6182
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-26-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0264 Tc
0.2648 Tw
(Assume we are dealing with an arbitrary indexing structure. Recall that we calculated the)Tj
0 -1.1538 TD
0.0234 Tc
0.2333 Tw
(number of entries in the Acct-ID||Timestamp index by assuming they were generating 1000)Tj
T*
0.0175 Tc
0.1748 Tw
[(entries per second over a 20 day period of accumulation with eight hour days.   Given index)]TJ
T*
0.0162 Tc
0.1619 Tw
(entries 16 bytes in length \(4 bytes for the Acct-ID, 8 bytes for the timestamp, and 4 bytes for)Tj
T*
0.0174 Tc
0.1737 Tw
(the History row RID\) this implies 9.2 GBytes of entries or about 2.3 million 4 KByte pages of)Tj
T*
0.005 Tc
0.0496 Tw
[(index, even if there is no wasted space.  None of these conclusions are subject to change because)]TJ
T*
0.0132 Tc
0.1318 Tw
[(of the specific choice of index method.  A B-tree will have a leaf level with a certain amount of)]TJ
T*
0.0158 Tc
0.1572 Tw
(wasted space together with upper level directory nodes, whereas an extendible hash table will)Tj
T*
0.0125 Tc
0.1245 Tw
(have a somewhat different amount of wasted space and no directory nodes, but both structures)Tj
T*
0.0076 Tc
0.0764 Tw
[(must contain 9.2 GBytes of entries as calculated above.  Now to perform an insert of a new index)]TJ
T*
0.0112 Tc
0.1124 Tw
[(entry into an index structure, we need to calculate the page on which the entry is to be inserted)]TJ
T*
0.01 Tc
0.1004 Tw
[(and make sure that page is memory resident.  The question naturally arises:  Are newly inserted)]TJ
T*
0.0154 Tc
0.1538 Tw
(entries generally placed in an arbitrary position among all 9.2 GBytes of index entries that are)Tj
T*
0.0088 Tc
0.0876 Tw
[(already present?  The answer, for most classical acccess method structures, is Yes.)]TJ
/TT4 1 Tf
0 -2.3077 TD
0.0251 Tc
0.2508 Tw
(Definition 5.1)Tj
/TT6 1 Tf
6.8804 0 TD
0.014 Tc
0.1407 Tw
[(.  We say that the index structure of a disk based access method has the prop-)]TJ
-6.8804 -1.1538 TD
0.0072 Tc
0.0725 Tw
(erty of being a )Tj
/TT10 1 Tf
7.0206 0 TD
0.0194 Tc
0.1943 Tw
(Continuum Structure)Tj
/TT6 1 Tf
9.7342 0 TD
0.0111 Tc
0.1104 Tw
[( if the indexing scheme provides for immediate placement of)]TJ
-16.7548 -1.1538 TD
0.0186 Tc
0.1856 Tw
(a newly inserted index entry in its ultimate collation order, based on key-value, with all other)Tj
T*
0.0166 Tc
0.1665 Tw
(entries already present. )Tj
/TT8 1 Tf
10 0 0 10 193.0894 494 Tm
0 Tc
0 Tw
()Tj
/TT6 1 Tf
10.4 0 0 10.4 72 470 Tm
0.0254 Tc
0.2534 Tw
(Recall that successive transactions in the TPC benchmark application have Acct-ID values)Tj
T*
0.0174 Tc
0.1741 Tw
[(generated at random from each of 100,000,000 possible values.  By Definition 1.1, each new)]TJ
T*
0.014 Tc
0.1408 Tw
(entry insert of an Acct-ID||Timestamp index will be placed in a pretty much random position on)Tj
T*
0.0367 Tc
0.367 Tw
[(one of 2.3 million pages of entries that already exist.  In a B-tree, for example, the)]TJ
T*
0.0234 Tc
0.2334 Tw
(576,000,000 accumulated entries will contain on the average 5.76 entries for each Acct-ID;)Tj
T*
0.0129 Tc
0.1289 Tw
[(presumably each entry with the same Acct-ID has a distinct Timestamp.  Each new entry insert)]TJ
T*
0.017 Tc
0.1703 Tw
[(will therefore be placed on the right of all entries with the same Acct-ID.  But this still leaves)]TJ
T*
0.0241 Tc
0.2416 Tw
(100,000,000 points of insert randomly chosen, which certainly implies that each new insert)Tj
T*
0.015 Tc
0.1496 Tw
[(will be on a random one of the 2.3 million pages of existing entries.  In an extendible hashing)]TJ
T*
0.0124 Tc
0.1243 Tw
(scheme [9], by contrast, new entries have a collation order calculated as a hash value from the)Tj
T*
0.0181 Tc
0.1806 Tw
(Acct-ID||Timestamp key-value, and clearly any placement of a new entry in sequence with all)Tj
T*
0.0191 Tc
0.1917 Tw
(entries already present is equally likely.)Tj
0 -2.3077 TD
0.0293 Tc
0.2937 Tw
(Now 2.3 million pages is the minimum number on which the 9.2 GBytes of entries of a)Tj
0 -1.1538 TD
0.0121 Tc
0.1213 Tw
(Continuum Structure can sit, and given 1000 inserts per second, each page of such a Structure)Tj
T*
0.0179 Tc
0.1786 Tw
[(is accessed for a new insert about once every 2,300 seconds;  by the Five Minute Rule it is)]TJ
T*
0.0072 Tc
0.0724 Tw
[(uneconomical to keep all these pages buffered.  If we consider larger nodes to hold the entries as)]TJ
T*
0.0187 Tc
0.1871 Tw
[(in the Bounded Disorder file [16], this provides no advantage, for although there is a greater)]TJ
T*
0.0098 Tc
0.0978 Tw
(frequency of reference, the cost of memory to buffer the node is also greater and the two effects)Tj
T*
0.0152 Tc
0.1518 Tw
[(cancel.  In general, then, a page is read into memory buffer for an entry insert and must later)]TJ
T*
0.01 Tc
0.1003 Tw
[(be dropped from buffer to make room for other pages.  In transactional systems that update disk)]TJ
T*
0.0187 Tc
0.1872 Tw
[(pages in place before dropping them from buffer, this update requires a second I/O for each)]TJ
T*
0.0119 Tc
0.1195 Tw
[(index insert.  Thus we are able to state that a Continuum Structure that does not defer updates)]TJ
T*
0.0136 Tc
0.1357 Tw
(will require at least two I/Os for each index insert, approximately the same as a B-tree.)Tj
0 -2.3077 TD
0.0186 Tc
0.1857 Tw
(Most existing disk-based access methods are Continuum structures, including B-trees [5] and)Tj
0 -1.1538 TD
0.0294 Tc
0.2942 Tw
(its large number of variants such as SB-trees [21], Bounded Disorder Files [16], various)Tj
T*
0.0112 Tc
0.1121 Tw
[(types of hashing schemes such as extendible hashing [9], and a myriad others.  However, there)]TJ
T*
0.0098 Tc
0.0978 Tw
[(are a few access methods which migrate their entries from one segment to another:   MD/OD R-)]TJ
T*
0.0271 Tc
0.271 Tw
[(Trees of  Kolovson and Stonebraker \([15]\) and Time-Split B-trees of Lomet and Salzberg)]TJ
T*
0.0218 Tc
0.2179 Tw
[(\([17], [18]\).  The Differential File approach [25] also collects up changes in a small compo-)]TJ
T*
0.0227 Tc
0.2265 Tw
[(nent, later performing updates to the full-sized structure.  We will consider these structures)]TJ
T*
0.0098 Tc
0.0978 Tw
(in a bit more depth.)Tj
ET
endstream
endobj
91 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 12 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
93 0 obj
<<
/Length 6731
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-27-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0254 Tc
0.2542 Tw
(First of all we should analyze exactly why the LSM-tree beats the Continuum Structure in)Tj
0 -1.1538 TD
0.0167 Tc
0.1671 Tw
(terms of I/O performance, reducing the disk arm load as much as two orders of magnitude in)Tj
T*
0.0189 Tc
0.1891 Tw
[(certain situations.  In its most general formulation the advantage the LSM-tree enjoys results)]TJ
T*
0.0174 Tc
0.1737 Tw
[(from two factors:  \(1\) the ability to keep component C)]TJ
9.36 0 0 9.36 343.7617 672 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 349.5613 674 Tm
0.0195 Tc
0.1954 Tw
[( memory resident, and \(2\) careful de-)]TJ
-26.6886 -1.25 TD
0.0142 Tc
0.1425 Tw
[(ferred placement.  It is crucial that the original insert be made to a memory based component.)]TJ
0 -1.1538 TD
0.0212 Tc
0.2129 Tw
[(Inserts of new entries in Continuum Structures require two I/Os for exactly this reason: that)]TJ
T*
0.0123 Tc
0.1231 Tw
(the size of the index in which they must be placed cannot economically be buffered in memory.)Tj
T*
0.0218 Tc
0.2181 Tw
(If the assured memory residence of component C)Tj
9.36 0 0 9.36 326.0718 623 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 331.8784 625 Tm
0.0171 Tc
0.1714 Tw
[( in the LSM-tree were not assured, if this)]TJ
-24.9883 -1.25 TD
0.0279 Tc
0.279 Tw
(were merely a probabilistic concomitant of buffering a relatively small disk resident struc-)Tj
0 -1.1538 TD
0.0258 Tc
0.258 Tw
(ture, there would presumably be circumstances where the memory-resident property would)Tj
T*
0.0152 Tc
0.1517 Tw
(deteriorate, and this would lead to serious deterioration in LSM-tree performance as a growing)Tj
T*
0.0179 Tc
0.179 Tw
[(fraction of new entry inserts led to additional I/Os.  Given the guarantee that the initial insert)]TJ
T*
0.0134 Tc
0.134 Tw
(will not cause an I/O, the second factor supporting high performance in the LSM-tree, a careful)Tj
T*
0.0192 Tc
0.192 Tw
(deferred placement in the larger continuum of the index, is important to guarantee that com-)Tj
T*
0.0294 Tc
0.294 Tw
(ponent C)Tj
9.36 0 0 9.36 119.7144 538 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 125.599 540 Tm
0.0222 Tc
0.2221 Tw
[( won't grow without control in the expensive memory medium.  Indeed the multi-)]TJ
-5.1537 -1.25 TD
0.0117 Tc
0.1173 Tw
(component LSM-tree provides for a sequence of deferred placements to minimize our total cost.)Tj
0 -1.1538 TD
0.0199 Tc
0.1991 Tw
(It will turn out that with the special structures considered that are not Continuum Structures,)Tj
T*
0.0234 Tc
0.2333 Tw
(that while deferred placement in the final position of newly inserted entries is provided for,)Tj
T*
0.0279 Tc
0.2786 Tw
(this is not carefully done to guarantee that the initial component for new inserts remains)Tj
T*
0.0174 Tc
0.1741 Tw
[(memory resident.  Instead this component is seen as disk resident in the defining papers, al-)]TJ
T*
0.0146 Tc
0.146 Tw
[(though a large proportion may be buffered in memory.  But because there is no control of this)]TJ
T*
0.0143 Tc
0.1433 Tw
(factor, the component can grow to be predominantly disk resident, so that the I/O performance)Tj
T*
0.0124 Tc
0.1243 Tw
(will degrade to a point where each new insert requires at least two I/Os, just like a B-tree.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0955 Tc
0.9547 Tw
(Time-Split B-tree)Tj
/TT6 1 Tf
T*
0.0237 Tc
0.2361 Tw
(To begin with, we consider the Time-Split B-tree or TSB-tree of Lomet and Salzberg \([17],)Tj
0 -1.1538 TD
0.017 Tc
0.1698 Tw
[([18]\).  The TSB-tree is a two-dimensional search structure to locate records by dimensions of)]TJ
T*
0.0168 Tc
0.1679 Tw
[(timestamp and keyvalue.  It is assumed that each time a record with a given key value is in-)]TJ
T*
0.0062 Tc
0.061 Tw
[(serted, the old one becomes outmoded;  however, a permanent history of all records, outmoded or)]TJ
T*
0.0093 Tc
0.0936 Tw
[(not, is kept indexed.  When a new entry is inserted in a \(current\) node of a TSB-tree that has no)]TJ
T*
0.0165 Tc
0.1651 Tw
(room to accept it, the node can be split either by key-value or by time, depending on circum-)Tj
T*
0.0124 Tc
0.1238 Tw
[(stance.  If a node is split by time, )]TJ
/TT4 1 Tf
16.3582 0 TD
0 Tc
0 Tw
(t)Tj
/TT6 1 Tf
0.3684 0 TD
0.0163 Tc
0.1632 Tw
(, all entries with timestamp range less than )Tj
/TT4 1 Tf
21.2163 0 TD
0 Tc
0 Tw
(t)Tj
/TT6 1 Tf
0.3684 0 TD
0.0119 Tc
0.1193 Tw
[( go to the his-)]TJ
-38.3113 -1.1538 TD
0.0162 Tc
0.1614 Tw
(tory node of the split, all entries with timestamp range crossing )Tj
/TT4 1 Tf
30.7439 0 TD
0 Tc
0 Tw
(t)Tj
/TT6 1 Tf
0.3669 0 TD
0.0131 Tc
0.1311 Tw
[( go to the current node.  The)]TJ
-31.1107 -1.1538 TD
0.0123 Tc
0.1231 Tw
(object is to eventually migrate outmoded records out to a history component of the TSB-tree on)Tj
T*
0.1232 Tw
[(inexpensive write-once storage.  All current records and current nodes of the tree lie on disk.)]TJ
0 -2.3077 TD
0.0071 Tc
0.0711 Tw
[(We see the model for the TSB-tree is somewhat different from ours.  We do not assume our older)]TJ
0 -1.1538 TD
0.012 Tc
0.1199 Tw
(History row is outmoded in any sense when a new History row with the same Acct-ID has been)Tj
T*
0.0094 Tc
0.094 Tw
[(written.  It is indisputable that the )]TJ
/TT10 1 Tf
15.857 0 TD
0.0174 Tc
0.1744 Tw
(current node)Tj
/TT6 1 Tf
5.998 0 TD
0.0117 Tc
0.1176 Tw
[( set of the TSB-tree forms a separate component)]TJ
-21.855 -1.1538 TD
0.0204 Tc
0.2042 Tw
[(that defers updates to a longer-term component.  However, there is no attempt to keep this)]TJ
T*
0.0139 Tc
0.1391 Tw
(current tree in memory as with the C)Tj
9.36 0 0 9.36 254.9556 213 Tm
0 Tc
0 Tw
(0)Tj
10.4 0 0 10.4 260.6372 215 Tm
0.0145 Tc
0.1453 Tw
[( component of the LSM-tree.  Indeed, the current tree is)]TJ
-18.1382 -1.25 TD
0.0122 Tc
0.1216 Tw
[(presented as being disk resident while the history tree is resident on write-once storage.  There)]TJ
0 -1.1538 TD
0.0138 Tc
0.1387 Tw
[(is no claim that the TSB-tree accelerates insert performance;  the intent of the design is rather)]TJ
T*
0.0185 Tc
0.1849 Tw
[(to provide a history index to all records generated over time.  Without a guaranteed memory)]TJ
T*
0.0103 Tc
0.1025 Tw
(resident component to which new inserts are performed, we are back to the situation of two I/Os)Tj
T*
0.0193 Tc
0.1929 Tw
(for each entry insert.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.0711 Tc
0.7108 Tw
(MD/OD R-Tree)Tj
/TT6 1 Tf
T*
0.0138 Tc
0.1374 Tw
[(The MD/OD R-tree of Kolovson and Stonebraker, [15], is comparable to the TSB-tree, in that it)]TJ
0 -1.1538 TD
0.0172 Tc
0.1725 Tw
(uses a two dimensional access method \(R-tree\) variant to cluster and index historical records)Tj
T*
0.0127 Tc
0.1266 Tw
[(by timestamp range and keyvalue.   The important R-tree variation introduced in the MD/OD R-)]TJ
ET
endstream
endobj
94 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
96 0 obj
<<
/Length 6023
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-28-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0175 Tc
0.1749 Tw
[(tree is that the structure is meant to span magnetic disk \(MD\) and optical disk \(OD\);  the ul-)]TJ
0 -1.1538 TD
0.0134 Tc
0.1341 Tw
(timate object, as with the TSB-tree, is to eventually migrate outmoded records to an archive R-)Tj
T*
0.0179 Tc
0.1785 Tw
(tree with leaf pages and appropriate directory pages contained on inexpensive write-once op-)Tj
T*
0.0113 Tc
0.1133 Tw
[(tical storage.  This migration occurs by means of a Vacuum Cleaner Process \(VCP\).  Whenever)]TJ
T*
0.0096 Tc
0.0964 Tw
(the R-tree index on magnetic disk reaches a threshold size, the VCP moves some fraction of the)Tj
T*
0.0129 Tc
0.1289 Tw
[(oldest leaf pages to the archive R-tree on optical disk.  Two different variations of this process,)]TJ
T*
0.0142 Tc
0.142 Tw
(involving the percentage to be vacuumed and whether the archive and current R-trees are one)Tj
T*
0.0238 Tc
0.2385 Tw
[(or two structures,  are investigated in the paper \(MD/OT-RT-1 and MD/OT-RT-2\).  As with)]TJ
T*
0.018 Tc
0.1794 Tw
(the TSB-tree, the current \(MD R-tree\) is represented as being disk resident while the archive)Tj
T*
0.0188 Tc
0.1889 Tw
[(tree \(OD R-tree\) is resident on write-once storage, and there is no claim that the MD/OD R-)]TJ
T*
0.019 Tc
0.19 Tw
[(tree accelerates insert performance.  Clearly the OD target precludes the rolling merge tech-)]TJ
T*
0.0163 Tc
0.1625 Tw
[(nique. Without a guaranteed memory resident component to which new inserts are performed,)]TJ
T*
0.015 Tc
0.1498 Tw
[(we return to the situation of two I/Os for each entry insert.  Indeed, even with a small number)]TJ
T*
0.0159 Tc
0.159 Tw
(of records used for simulation in [15], Figure 4 shows that the average number of pages read)Tj
T*
0.0169 Tc
0.1689 Tw
[(per insert never goes below two for the two variant structures investigated.  There is a rough)]TJ
T*
0.0132 Tc
0.1312 Tw
(correspondence between the LSM-Tree and the MD/OD R-Tree if the latter is promoted up one)Tj
T*
0.0106 Tc
0.1055 Tw
(level of the memory hierarchy to use memory and disk, but most of the details are not the same)Tj
T*
0.0063 Tc
0.0639 Tw
(because of the differences in the features of the three media.)Tj
/TT4 1 Tf
0 -2.3077 TD
0.081 Tc
0.8098 Tw
(Differential File)Tj
/TT6 1 Tf
T*
0.0172 Tc
0.1721 Tw
(The Differential File approach [25] starts with a main data file which remains unchanged over)Tj
0 -1.1538 TD
0.0084 Tc
0.0838 Tw
(an extended period, while newly added records are placed into a specific overflow area known as)Tj
T*
0.0057 Tc
0 Tw
(a )Tj
/TT10 1 Tf
0.9018 0 TD
0.0201 Tc
0.2007 Tw
(Differential File)Tj
/TT6 1 Tf
7.2113 0 TD
0.0127 Tc
0.1266 Tw
[(.  At some future point \(not carefully specified\) it is assumed that the changes)]TJ
-8.113 -1.1538 TD
0.0111 Tc
0.1101 Tw
[(will be amalgamated with the main data file, and a new Differential File will be started.  Much of)]TJ
T*
0.1124 Tw
[(the content of the paper has to do with advantages of having a much smaller dynamic area and)]TJ
T*
0.0096 Tc
0.0959 Tw
(methods to avoid double-accesses, find operations by unique record identifier which need to look)Tj
T*
0.0231 Tc
0.2306 Tw
(first in the differential file \(through some index\) and then in the main data file \(presumably)Tj
T*
0.0084 Tc
0.0838 Tw
[(through a separate index\).  The concept of a Bloom filter is suggested as the main mechanism to)]TJ
T*
0.0078 Tc
0.0779 Tw
[(avoid such double accesses.  Once again, as with access methods defined above, the Differential)]TJ
T*
0.0104 Tc
0.1035 Tw
[(File makes no provision to keep the Differential File memory resident.  It is suggested in Section)]TJ
T*
0.0164 Tc
0.1647 Tw
(3.4 that while the Differential File is being dumped and later incorporated into the main file, a)Tj
T*
0.0248 Tc
0.2482 Tw
("differential-differential" file could reasonably be held in memory cache to permit online re-)Tj
T*
0.011 Tc
0.1098 Tw
[(organization.  This approach is not analyzed further.  It corresponds to the idea of maintaining a)]TJ
T*
0 Tc
0 Tw
(C)Tj
9.36 0 0 9.36 80.2085 300 Tm
(0)Tj
10.4 0 0 10.4 85.8981 302 Tm
0.0163 Tc
0.1636 Tw
[( component in memory while C)]TJ
9.36 0 0 9.36 241.9295 300 Tm
0 Tc
0 Tw
(1)Tj
10.4 0 0 10.4 247.6191 302 Tm
0.0126 Tc
0.126 Tw
[( is merged with C)]TJ
9.36 0 0 9.36 335.422 300 Tm
0 Tc
0 Tw
(2)Tj
10.4 0 0 10.4 341.1116 302 Tm
0.0168 Tc
0.1678 Tw
(, but the presentation seems to assume)Tj
-25.8761 -1.25 TD
0.0232 Tc
0.2315 Tw
(relatively slow insert rates, confirmed by the example given in Section 3.2 of a 10,000,000)Tj
0 -1.1538 TD
0.0221 Tc
0.221 Tw
[(record file with 100 changes per hour.  It is not suggested that a differential-differential file)]TJ
T*
0.0162 Tc
0.1615 Tw
(should be kept memory resident at all times and no mention is made of I/O savings for insert)Tj
T*
0.0246 Tc
0 Tw
(operations.)Tj
/TT4 1 Tf
0 -3.4615 TD
0.0393 Tc
0.3929 Tw
(Selective Deferred Text Index Updates)Tj
/TT6 1 Tf
0 -2.3077 TD
0.0081 Tc
0.0809 Tw
(The text index maintenance method of Dadum, Lum, Praedel, and Schlageter [7] is also designed)Tj
0 -1.1538 TD
0.022 Tc
0.2205 Tw
[(to improve system performance in index updates by deferring the actual disk writes.  Index)]TJ
T*
0.0206 Tc
0.2056 Tw
(updates are cached in memory until forced out by conflicts with queries or trickled out by a)Tj
T*
0.0123 Tc
0.1231 Tw
[(background task.  This being a text system, a conflict here would be between the keywords as-)]TJ
T*
0.0074 Tc
0.0742 Tw
[(sociated with the document being updated and those associated with the query.  After the update,)]TJ
T*
0.013 Tc
0.1294 Tw
(the query runs off of the index on disk. Thus the memory cache is not part of the authoratative)Tj
T*
0.0096 Tc
0.0959 Tw
[(index, unlike the LSM-Tree.  The deferral method allows some batching of updates in both in the)]TJ
T*
0.016 Tc
0.1593 Tw
[(forced and trickled cases.  However the pattern of updates still looks like that of a Continuum)]TJ
T*
0.0634 Tc
0 Tw
(Structure.)Tj
ET
endstream
endobj
97 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
99 0 obj
<<
/Length 4835
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-29-)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 708 Tm
0.0368 Tc
0.3678 Tw
[(6.  Conclusions and Suggested Extensions)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 683 Tm
0.0196 Tc
0.1957 Tw
(A B-tree, because it has popular directory nodes buffered in memory, is really a hybrid data)Tj
0 -1.1538 TD
0.0176 Tc
0.1761 Tw
(structure which combines the low cost of disk media storage for the majority of the data with)Tj
T*
0.0199 Tc
0.1988 Tw
[(the high cost of memory accessibility for the most popular data.  The LSM-tree extends this)]TJ
T*
0.0193 Tc
0.1938 Tw
(hierarchy to more than one level and incorporates the advantage of merge I/O in performing)Tj
T*
0.0195 Tc
0.1947 Tw
(multi-page disk reads.)Tj
0 -2.3077 TD
0.0169 Tc
0.1696 Tw
(In Figure 6.1, we expand on Figure 3.1, graphing "cost of access per MByte" against "rate of)Tj
0 -1.1538 TD
0.021 Tc
0.2097 Tw
(access per MByte", i.e., data temperature, for data access through a B-tree and through an)Tj
T*
0.0188 Tc
0.1882 Tw
[(LSM-tree of two components, i.e., number of disk components K = 1.  Starting at the lowest)]TJ
T*
0.014 Tc
0.14 Tw
[(access rate, "cold" data has a cost proportional to the disk media on which it sits;  In terms of)]TJ
T*
0.015 Tc
0.1505 Tw
(the typical cost figures, up to .04 I/Os per second per MByte, the "freezing point", disk access)Tj
T*
0.0132 Tc
0.1322 Tw
[(costs $1 per MByte.  The "Warm data" region begins at the freezing point, when disk arms be-)]TJ
T*
0.0161 Tc
0.1602 Tw
[(come the limiting factor in access and the media is underutilized;  In terms of Example 3.3, 1)]TJ
T*
0.0082 Tc
0.0817 Tw
[(page I/O per second per MByte would cost $25 per MByte.  Finally, we have "Hot data" when the)]TJ
T*
0.0131 Tc
0.1306 Tw
[(access is so frequent that B-tree-accessed data should remain in memory buffers;  at $100 per)]TJ
T*
0.0151 Tc
0.151 Tw
(MByte of memory, the cost of this access rate will be $100 per MByte, and this implies a rate)Tj
T*
0.0112 Tc
0.1122 Tw
[(of at least 4 I/Os per second per MByte, the "boiling point".)]TJ
ET
1 i 
101 346 11 -2 re
f
146 436 m
148 436 l
148 434 l
112 344 l
110 344 l
110 346 l
f
102 455 m
105 443 l
99 443 l
102 455 l
f*
102 443 1 -106 re
f
319 337 m
307 334 l
307 340 l
319 337 l
f*
104 337 204 -1 re
f
0 G
0 J 0 j 1 w 10 M []0 d
112.5 345.5 m
112.5 358.748 207.924 369.5 325.5 369.5 c
S
BT
10.4 0 0 10.4 341 360 Tm
0 Tc
0 Tw
(K=1)Tj
-1.5385 1.4423 TD
(LSM-tree)Tj
0.5769 5.4808 TD
(B-tree)Tj
ET
147 437 184 -2 re
f
BT
10.4 0 0 10.4 322 342 Tm
(Insert Temperature)Tj
0 -1.25 TD
(\(inserts/sec/Mbyte\))Tj
-23.8462 13.1731 TD
(Cost/Mbyte)Tj
9.36 0 0 9.36 175 461 Tm
(Hot Data)Tj
-2.1368 -6.8376 TD
(Warm Data)Tj
ET
129 399 m
141 403 l
141 397 l
129 399 l
f*
141 400 12 -1 re
f
188 438 m
185 450 l
191 450 l
188 438 l
f*
188 456 1 -7 re
f
106 343 m
109 331 l
103 331 l
106 343 l
f*
106 331 1 -5 re
f
BT
9.36 0 0 9.36 90 315 Tm
(Cold Data)Tj
/TT4 1 Tf
10.4 0 0 10.4 72 290 Tm
0.0176 Tc
0.1756 Tw
(Figure 6.1)Tj
/TT6 1 Tf
5.0752 0 TD
0.0112 Tc
0.1112 Tw
[(.  Graph of cost of access per MByte vs.  Insert Temperature)]TJ
-5.0752 -2.3077 TD
0.0154 Tc
0.1535 Tw
(The effect of buffering on a B-tree is to flatten the graph as the rate of access enters the Hot)Tj
0 -1.1538 TD
0.0093 Tc
0.0935 Tw
(Data region, so that more frequent access doesn't result in ever higher costs extending the slope)Tj
T*
0.0185 Tc
0.1843 Tw
[(of the rising line for Warm Data.  With a bit of thought, it can be seen that the effect of the)]TJ
T*
0.0148 Tc
0.1485 Tw
(LSM-tree is to reduce the cost of access, for any realistic rate of access for mergeable opera-)Tj
T*
0.0068 Tc
0.0681 Tw
[(tions such as insert and delete, strongly towards that of cold data.  Further, many cases of access)]TJ
T*
0.0123 Tc
0.1232 Tw
(rate that would indicate memory residence of the B-tree, the cases labeled "Hot Data" in Figure)Tj
T*
0.0127 Tc
0.1268 Tw
(4.1, can be accommodated mostly on disk with the LSM-tree. In these cases, the data is hot in)Tj
T*
0.0181 Tc
0.1806 Tw
(terms of logical access rate \(inserts/sec\) but only warm in terms of physical disk access rate)Tj
T*
0.0164 Tc
0.1642 Tw
(because of the batching effect of the LSM tree. This is an extremely significant advantage for)Tj
T*
0.0074 Tc
0.0744 Tw
(applications that have a great preponderance of mergeable operations.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 132 Tm
0.048 Tc
0.4796 Tw
[(6.1  Extensions of LSM-tree Application)]TJ
/TT6 1 Tf
10.4 0 0 10.4 72 107 Tm
0.0197 Tc
0.1969 Tw
(To begin with, it should be clear that the LSM-tree entries could themselves contain records)Tj
T*
0.0095 Tc
0.0954 Tw
[(rather than RIDs pointing to records elsewhere on disk.  This means that the records themselves)]TJ
T*
0.0179 Tc
0.1792 Tw
[(can be clustered by their keyvalue.  The cost for this is larger entries and a concomitant ac-)]TJ
ET
endstream
endobj
100 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
102 0 obj
<<
/Length 6766
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-30-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.01 Tc
0.0999 Tw
(celeration of the rate of insert R in bytes per second and therefore of cursor movement and total)Tj
0 -1.1538 TD
0.0107 Tc
0.1067 Tw
[(I/O rate H.  However, as we saw in Example 3.3 a three component LSM-tree should be able to)]TJ
T*
0.0106 Tc
0.1061 Tw
(provide the necessary circulation at a cost of the disk media to store the records and index, and)Tj
T*
0.0077 Tc
0.0771 Tw
(all of this disk media would be needed in any event to store the rows in a non-clustered manner.)Tj
0 -2.3077 TD
0.0197 Tc
0.1969 Tw
[(Advantages of clustering might have quite important performance implications.  For example,)]TJ
0 -1.1538 TD
0.0156 Tc
0.156 Tw
(consider the Escrow transactional method [20], which serves as a good layer to support work-)Tj
T*
0.0222 Tc
0.2222 Tw
[(flow management because of the non-blocking nature of long-lived updates.  In the Escrow)]TJ
T*
0.0057 Tc
0.0567 Tw
(method, a number of incremental changes to various aggregate Escrow fields can be generated by)Tj
T*
0.0128 Tc
0.1278 Tw
[(a long-lived transaction transaction.  The approach used is to set aside the incremental amount)]TJ
T*
0.0095 Tc
0.095 Tw
[(requested \(Escrow quantity\) and unlock the aggregate record for concurrent requests.   We need)]TJ
T*
0.0104 Tc
0.1038 Tw
(to keep logs for these Escrow quantities, and we can think of two possible clustering indexes for)Tj
T*
0.0106 Tc
0.1055 Tw
[(these logs:  Transaction ID \(TID\) of the generating transaction, and Field ID \(FID\) of the field on)]TJ
T*
0.0149 Tc
0.1487 Tw
[(which the Escrow quantity was taken.  We might easily have twenty Escrow logs with a single)]TJ
T*
0.0153 Tc
0.1528 Tw
(TID in existence over an extended period \(extended enough so that the logs are no longer be)Tj
T*
0.0262 Tc
0.2624 Tw
[(memory resident in classical log structures\), and clustering by TID would be important up)]TJ
T*
0.0163 Tc
0.1626 Tw
[(until the time when the transaction performs a commit or abort, which determines the ultimate)]TJ
T*
0.0094 Tc
0.0943 Tw
[(effect these logs will have.  In the event of a commit, the quantity taken out of the field would be)]TJ
T*
0.017 Tc
0.1697 Tw
(permanent and the log can simply be forgotten, but in the event of an abort we would like to)Tj
T*
0.0154 Tc
0.1537 Tw
[(return the quantity to the field specified by the log's FID.  A certain amount of speed is called)]TJ
T*
0.0092 Tc
0.0925 Tw
[(for.  In processing an abort, the logs of an aborted transaction should be accessed \(clustering by)]TJ
T*
0.0088 Tc
0.0875 Tw
[(TID is an important advantage\) and fields with corresponding FID should be corrected.  However,)]TJ
T*
0.0142 Tc
0.1427 Tw
(if the field is not memory resident, rather than read in the containing record the log can be re-)Tj
T*
0.0187 Tc
0.1873 Tw
[(inverted \(placed in a different LSM-tree\) clustered by its FID.  Then when an Escrow field is)]TJ
T*
0.018 Tc
0.1793 Tw
(read back into memory, we will try to access all logs clustered by FID that might have some)Tj
T*
0.0116 Tc
0.116 Tw
[(update to perform;  again there might be a large number of logs accessed, and clustering these)]TJ
T*
0.0172 Tc
0.1718 Tw
[(logs in an LSM-tree is an important savings.  Using LSM-trees to cluster Escrow logs first by)]TJ
T*
0.0147 Tc
0.1468 Tw
(TID, then by FID when the associated field is not in memory, will save a large number of I/Os)Tj
T*
0.0164 Tc
0.1642 Tw
[(where long-lived transactions make large numbers of updates to cold or warm data.  This ap-)]TJ
T*
0.0121 Tc
0.1213 Tw
(proach is an improvement over the "extended field" concept of [20].)Tj
0 -2.3077 TD
0.0132 Tc
0.1316 Tw
(Another possible variation to the LSM-tree algorithm mentioned at the end of Section 2.2 is the)Tj
0 -1.3462 TD
0.0138 Tc
0.1376 Tw
[(possibility of retaining recent entries \(generated in the last )]TJ
/TT11 1 Tf
14 0 0 14 362.7126 324 Tm
0 Tc
0 Tw
<006f>Tj
/TT6 1 Tf
9.36 0 0 9.36 369.3591 322 Tm
(i)Tj
10.4 0 0 10.4 371.6076 324 Tm
0.0129 Tc
0.1292 Tw
[(  seconds\) in component C)]TJ
9.36 0 0 9.36 505.3857 322 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 507.6343 324 Tm
0.0147 Tc
0.1472 Tw
[( rather)]TJ
-41.8879 -1.3462 TD
0.0098 Tc
0.0986 Tw
(then letting them migrate out to C)Tj
9.36 0 0 9.36 235.3887 308 Tm
0.0284 Tc
0 Tw
(i+1)Tj
10.4 0 0 10.4 248.9379 310 Tm
0.0092 Tc
0.0922 Tw
[(.  A number of alternatives are suggested by this idea.  One)]TJ
-17.0133 -1.25 TD
0.0149 Tc
0.1486 Tw
(variation suggests that during cursor circulation, a time-key index such as that provided by the)Tj
0 -1.1538 TD
0.01 Tc
0.1003 Tw
[(TSB-tree might be generated.  The rolling merge can be used to provide great efficiency for new)]TJ
T*
0.0245 Tc
0.2454 Tw
(version inserts, and the multi-component structure suggests a final component migration to)Tj
T*
0.0144 Tc
0.1445 Tw
[(write-once storage, with a good deal of control over archival time-key indexing.  This approach)]TJ
T*
0.0109 Tc
0.1087 Tw
(clearly deserves further study, and has been the subject of a conference paper [22].)Tj
0 -2.3077 TD
0.016 Tc
0.1594 Tw
(Other ideas for further research include the following.)Tj
T*
0.0191 Tc
0.1911 Tw
[(\(1\)  Extend the cost analysis approach of Theorem 3.1 and Example 3.3 to situations where)]TJ
0 -1.1538 TD
0.018 Tc
0.1802 Tw
(some proportion of find operations must be balanced with the merge for purposes of I/O bal-)Tj
T*
0.0096 Tc
0.0966 Tw
[(ancing.  Because of tha added load on the disks, it will no longer be possible to assign all of the)]TJ
T*
0.0111 Tc
0.1103 Tw
[(disk I/O capacity to rolling merge operations and optimize for that case.  Some proportion of the)]TJ
T*
0.0098 Tc
0.0979 Tw
[(disk capacity will have to be set aside for the find operation workload.  Other ways to extend the)]TJ
T*
0.0204 Tc
0.2035 Tw
(cost analysis are to allow for deletions prior to migration to component C)Tj
9.36 0 0 9.36 445.4755 139 Tm
0 Tc
0 Tw
(K)Tj
10.4 0 0 10.4 452.4905 141 Tm
0.0202 Tc
0.2015 Tw
[( and consider re-)]TJ
-36.5856 -1.25 TD
0.0262 Tc
0.2612 Tw
[(taining some proportion of recent entries in the inner component C)]TJ
9.36 0 0 9.36 422.3629 126 Tm
0.0547 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 434.301 128 Tm
0.0204 Tc
0.2034 Tw
[( during the \(C)]TJ
9.36 0 0 9.36 506.6263 126 Tm
0.0547 Tc
0 Tw
(i-1)Tj
10.4 0 0 10.4 518.5643 128 Tm
0.0145 Tc
0.1453 Tw
(, C)Tj
9.36 0 0 9.36 533.8177 126 Tm
0 Tc
0 Tw
(i)Tj
10.4 0 0 10.4 536.2043 128 Tm
(\))Tj
-44.635 -1.25 TD
0.0124 Tc
(merge.)Tj
0 -2.3077 TD
0.0152 Tc
0.1515 Tw
[(\(2\)  It is clear that we can offload the CPU work to maintain the LSM-tree so that this doesn't)]TJ
0 -1.1538 TD
0.0078 Tc
0.0775 Tw
[(have to be done by the CPU that produces the log records.  We merely need to communicate the)]TJ
ET
endstream
endobj
103 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT6 6 0 R
/TT11 29 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
105 0 obj
<<
/Length 5129
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-31-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0087 Tc
0.0866 Tw
[(logs to the other CPU and then communicate later find requests as well.  In cases where there is)]TJ
0 -1.1538 TD
0.0118 Tc
0.1182 Tw
[(shared memory, it is possible that finds can be done almost without added latency.  The design)]TJ
T*
0.012 Tc
0.1206 Tw
(for such distributed work needs to be carefully thought out.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 660 Tm
0.0959 Tc
0 Tw
(Acknowledgments)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 635 Tm
0.0062 Tc
0.0613 Tw
[(The authors would like to acknowledge the assistance of Jim Gray and Dave Lomet, both of whom)]TJ
T*
0.0095 Tc
0.0948 Tw
[(read an early version of this paper and made valuable suggestions for improvement.  In addition,)]TJ
T*
0.0147 Tc
0.1469 Tw
(the reviewers for this journal article made many valuable suggestions.)Tj
/TT4 1 Tf
12.48 0 0 12.48 72 585 Tm
0.1045 Tc
0 Tw
(References)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 560 Tm
0.0251 Tc
0.2507 Tw
[([1]  Alfred V. Aho, John E. Hopcroft, and Jeffrey D. Ullman, "The Design and Analysis of)]TJ
T*
0.0204 Tc
0.2039 Tw
(Computer Algorithms", Addison-Wesley.)Tj
0 -2.3077 TD
0.0105 Tc
0.1045 Tw
[([2]  Anon et al., "A Measure of Transaction Processing Power", )]TJ
/TT10 1 Tf
29.8666 0 TD
0.0155 Tc
0.1551 Tw
(Readings in Database Systems)Tj
/TT6 1 Tf
14.8504 0 TD
0 Tc
0 Tw
(,)Tj
-44.717 -1.1538 TD
0.0187 Tc
0.1875 Tw
[(edited by Michael Stonebraker, pp 300-312, Morgan Kaufmann, 1988.)]TJ
0 -2.3077 TD
0.01 Tc
0.1003 Tw
[([3]  R. Bayer and M Schkolnick, "Concurrency of Operations on B-Trees", )]TJ
/TT10 1 Tf
34.5914 0 TD
0.0149 Tc
0.1487 Tw
(Readings in Database)Tj
-34.5914 -1.1538 TD
0.0425 Tc
0 Tw
(Systems)Tj
/TT6 1 Tf
4.1315 0 TD
0.0157 Tc
0.1565 Tw
(, edited by Michael Stonebraker, pp 129-139, Morgan Kaufmann 1988.)Tj
-4.1315 -2.3077 TD
0.0187 Tc
0.1863 Tw
[([4]  P. A. Bernstein, V. Hadzilacos, and N. Goodman, "Concurrency Control and Recovery in)]TJ
0 -1.1538 TD
0.0131 Tc
0.1304 Tw
(Database Systems", Addison-Wesley, 1987.)Tj
0 -2.3077 TD
0.0208 Tc
0.2081 Tw
[([5]  D. Comer, "The Ubiquitous B-tree", )]TJ
/TT10 1 Tf
19.7821 0 TD
0.0283 Tc
0.2829 Tw
(Comput. Surv. 11)Tj
/TT6 1 Tf
8.7993 0 TD
0.0244 Tc
0.2444 Tw
(, \(1979\), pp 121-137.)Tj
-28.5815 -2.3077 TD
0.0124 Tc
0.1243 Tw
[([6]  George Copeland, Tom Keller, and Marc Smith, "Database Buffer and Disk Configuring and)]TJ
0 -1.1538 TD
0.0318 Tc
0.3185 Tw
(the Battle of the Bottlenecks", )Tj
/TT10 1 Tf
15.9736 0 TD
0.0428 Tc
0.4276 Tw
(Proc. 4th International Workshop on High Performance)Tj
-15.9736 -1.1538 TD
0.0183 Tc
0.183 Tw
(Transaction Systems)Tj
/TT6 1 Tf
9.8666 0 TD
0.013 Tc
0.1299 Tw
(, September 1991.)Tj
-9.8666 -2.3077 TD
0.0216 Tc
0.2166 Tw
[([7]  P. Dadam, V. Lum, U. Praedel, G. Shlageter, "Selective Deferred Index Maintenance &)]TJ
0 -1.1538 TD
0.0418 Tc
0.4182 Tw
(Concurrency Control in Integrated Information Systems," Proceedings of the Eleventh)Tj
T*
0.0199 Tc
0.1988 Tw
(International VLDB Conference, August 1985, pp. 142-150.)Tj
0 -2.3077 TD
0.0278 Tc
0.2777 Tw
[([8]  Dean S. Daniels, Alfred Z. Spector and Dean S. Thompson, "Distributed Logging for)]TJ
0 -1.1538 TD
0.0124 Tc
0.1243 Tw
(Transaction Processing",  )Tj
/TT10 1 Tf
12.3332 0 TD
0.0175 Tc
0.1747 Tw
(ACM SIGMOD Transactions)Tj
/TT6 1 Tf
13.31 0 TD
0.01 Tc
0.0997 Tw
(, 1987, pp. 82-96.)Tj
-25.6432 -2.3077 TD
0.0084 Tc
0.0838 Tw
[([9]  R. Fagin, J. Nievergelt, N. Pippenger and H.R. Strong,  Extendible Hashing ó A Fast Access)]TJ
0 -1.1538 TD
0.0132 Tc
0.1314 Tw
(Method for Dynamic Files, )Tj
/TT10 1 Tf
12.7608 0 TD
0.0161 Tc
0.1604 Tw
(ACM Trans. on Database Systems)Tj
/TT6 1 Tf
16.5182 0 TD
0.0088 Tc
0.0886 Tw
[(,  V 4, N 3 \(1979\), pp 315-344)]TJ
-29.279 -2.3077 TD
0.02 Tc
0.2001 Tw
[([10]  H. Garcia-Molina, D. Gawlick, J. Klein, K. Kleissner and K. Salem, "Coordinating Multi-)]TJ
0 -1.1538 TD
0.0307 Tc
0.3067 Tw
(Transactional Activities", )Tj
/TT10 1 Tf
12.5784 0 TD
0.0336 Tc
0.3351 Tw
(Princeton University Report)Tj
/TT6 1 Tf
13.7478 0 TD
0.0271 Tc
0.2714 Tw
[(, CS-TR-247-90,  February 1990.)]TJ
-26.3262 -2.3077 TD
0.008 Tc
0.0801 Tw
[([11]  Hector Garcia-Molina and Kenneth Salem, "Sagas", )]TJ
/TT10 1 Tf
26.4694 0 TD
0.0124 Tc
0.1244 Tw
(ACM SIGMOD Transactions)Tj
/TT6 1 Tf
13.0922 0 TD
0.0074 Tc
0.0742 Tw
(, May 1987,)Tj
-39.5616 -1.1538 TD
0.0532 Tc
0.532 Tw
(pp. 249-259.)Tj
0 -2.3077 TD
0.019 Tc
0.1907 Tw
[([12]  Hector Garcia-Molina, "Modelling Long-Running Activities as Nested Sagas", )]TJ
/TT10 1 Tf
39.8985 0 TD
0.0246 Tc
0.2457 Tw
(IEEE Data)Tj
-39.8985 -1.1538 TD
0.0642 Tc
0 Tw
(Engineering,)Tj
/TT6 1 Tf
6.386 0 TD
0.0192 Tc
0.1925 Tw
[( v 14, No 1 \(March 1991\), pp. 14-18.)]TJ
-6.386 -2.3077 TD
0.0289 Tc
0.2899 Tw
[([13]  Jim Gray and Franco Putzolu, "The Five Minute Rule for Trading Memory for Disk)]TJ
0 -1.1538 TD
0.0148 Tc
0.1481 Tw
(Accesses and The 10 Byte Rule for Trading Memory for CPU Time", )Tj
/TT10 1 Tf
33.2017 0 TD
0.0187 Tc
0.1863 Tw
(Proceedings of the 1987)Tj
-33.2017 -1.1538 TD
0.0093 Tc
0.0932 Tw
(ACM SIGMOD Conference)Tj
/TT6 1 Tf
12.3856 0 TD
0.0059 Tc
0.0586 Tw
(, pp 395-398.)Tj
ET
endstream
endobj
106 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
109 0 obj
<<
/Length 4883
>>
stream
BT
/TT2 1 Tf
12 0 0 12 287 39 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-32-)Tj
/TT6 1 Tf
10.4 0 0 10.4 72 710 Tm
0.0278 Tc
0.278 Tw
[([14]  Jim Gray and Andreas Reuter, "Transaction Processing, Concepts and Techniques",)]TJ
0 -1.1538 TD
0.0158 Tc
0.1578 Tw
(Morgan Kaufmann 1992.)Tj
0 -2.3077 TD
0.0337 Tc
0.3374 Tw
[([15]  Curtis P. Kolovson and Michael Stonebraker,  "Indexing Techniques for Historical)]TJ
0 -1.1539 TD
0.0119 Tc
0 Tw
(Databases", )Tj
/TT10 1 Tf
5.9535 0 TD
0.0098 Tc
0.0981 Tw
(Proceedings of the 1989 IEEE Data Engineering Conference)Tj
/TT6 1 Tf
28.0868 0 TD
0.0085 Tc
0.0847 Tw
(, pp 138-147.)Tj
-34.0404 -2.5962 TD
0.0123 Tc
0.1226 Tw
[([16]  Lomet, D.B.:  A Simple Bounded Disorder File Organization with Good Performance, )]TJ
/TT10 1 Tf
42.6392 0 TD
0.0776 Tc
0 Tw
(ACM)Tj
-42.6392 -1.1538 TD
0.0221 Tc
0.2208 Tw
(Trans. on Database Systems)Tj
/TT6 1 Tf
14.1318 0 TD
0.012 Tc
0.1201 Tw
[(,  V 13, N 4 \(1988\), pp 525-551)]TJ
-14.1318 -2.3077 TD
0.0116 Tc
0.1166 Tw
[([17]  David Lomet and Betty Salzberg, "Access Methods for Multiversion Data",  )]TJ
/TT10 1 Tf
37.8824 0 TD
0.0199 Tc
0.1992 Tw
(Proceedings of)Tj
-37.8824 -1.1538 TD
0.0116 Tc
0.1165 Tw
(the 1989 ACM SIGMOD Conference)Tj
/TT6 1 Tf
16.9886 0 TD
0.0093 Tc
0.0929 Tw
(, pp 315-323.)Tj
-16.9886 -2.3077 TD
0.0208 Tc
0.2076 Tw
[([18]  David Lomet and Betty Salzberg, "The Performance of a Multiversion Access Method",)]TJ
/TT10 1 Tf
0 -1.1538 TD
0.009 Tc
0.09 Tw
(Proceedings of the 1990 ACM SIGMOD Conference)Tj
/TT6 1 Tf
24.0693 0 TD
0.0075 Tc
0.0752 Tw
(, pp 353-363.)Tj
-24.0693 -2.3077 TD
0.0164 Tc
0.1642 Tw
[([19]  Patrick O'Neil, Edward Cheng, Dieter Gawlick, and Elizabeth O'Neil, "The Log-Structured)]TJ
0 -1.1538 TD
0.0216 Tc
0.2162 Tw
(Merge-Tree \(LSM-tree\)", UMass/Boston Math & CS Dept Technical Report, 91-6, November,)Tj
T*
0.1198 Tc
0 Tw
(1991.)Tj
0 -2.3077 TD
0.0242 Tc
0.242 Tw
[([20]  Patrick E. O'Neil, "The Escrow Transactional Method", )]TJ
/TT10 1 Tf
30.0983 0 TD
0.0953 Tc
0 Tw
(TODS)Tj
/TT6 1 Tf
3.159 0 TD
0.02 Tc
0.1997 Tw
(, v 11, No 4 \(December)Tj
-33.2573 -1.1538 TD
0.0512 Tc
0.5125 Tw
[(1986\), pp. 405-430.)]TJ
0 -2.3077 TD
0.0282 Tc
0.282 Tw
[([21]  Patrick E. O'Neil, "The SB-tree:  An index-sequential structure for high-performance)]TJ
0 -1.1538 TD
0.0241 Tc
0.2417 Tw
[(sequential access",  Acta Informatica 29, 241-265 \(1992\).)]TJ
0 -2.3077 TD
0.012 Tc
0.1198 Tw
[([22]  Patrick O'Neil and Gerhard Weikum, "A Log-Structured History Data Access Method)]TJ
0 -1.1538 TD
0.0174 Tc
0.1737 Tw
(\(LHAM\)," Presented at the Fifth International Workshop on High-Performance Transaction)Tj
T*
0.017 Tc
0.1698 Tw
(Systems, September 1993.)Tj
0 -2.3077 TD
0.0216 Tc
0.2166 Tw
([23] Mendel Rosenblum and John K. Ousterhout, "The Design and Implementation of a Log)Tj
0 -1.1538 TD
0.016 Tc
0.1592 Tw
(Structured File System", ACM Trans. on Comp. Sys., v 10, no 1 \(February 1992\), pp 26-52.)Tj
0 -2.3077 TD
0.0195 Tc
0.1948 Tw
[([24]  A. Reuter, "Contracts:  A Means for Controlling System Activities Beyond Transactional)]TJ
0 -1.1538 TD
0.0311 Tc
0 Tw
(Boundaries", )Tj
/TT10 1 Tf
6.6837 0 TD
0.0267 Tc
0.267 Tw
(Proc. 3rd International Workshop on High Performance Transaction Systems)Tj
/TT6 1 Tf
38.0202 0 TD
0 Tc
0 Tw
(,)Tj
-44.7039 -1.1538 TD
0.025 Tc
0.25 Tw
(September 1989.)Tj
0 -2.3077 TD
0.02 Tc
0.2002 Tw
[([25]  Dennis G. Severance and Guy M. Lohman, "Differential Files:  Their Application to the)]TJ
0 -1.1538 TD
0.0104 Tc
0.1037 Tw
(Maintenance of Large Databases", )Tj
/TT10 1 Tf
16.4003 0 TD
0.0107 Tc
0.1065 Tw
(ACM Trans. on Database Systems)Tj
/TT6 1 Tf
16.1409 0 TD
0.0054 Tc
0.0538 Tw
[(,  V 1, N 3 \(Sept. 1976\), pp)]TJ
-32.5411 -1.1538 TD
0.1506 Tc
0 Tw
(256-267.)Tj
0 -2.3077 TD
0.0273 Tc
0.2733 Tw
[([26]  Transaction Processing Performance Council \(TPC\), "TPC BENCHMARK A Standard)]TJ
0 -1.1538 TD
0.0133 Tc
0 Tw
(Specification", )Tj
/TT10 1 Tf
6.9259 0 TD
0.0115 Tc
0.115 Tw
[(The Performance Handbook:  for Database and Transaction Processing Systems)]TJ
/TT6 1 Tf
37.7956 0 TD
0 Tc
0 Tw
(,)Tj
-44.7214 -1.1538 TD
0.0179 Tc
0.1792 Tw
(Morgan Kauffman 1991.)Tj
0 -2.3077 TD
0.0422 Tc
0.4224 Tw
[([27]  Helmut W‰chter, "ConTracts:  A Means for Improving Reliability in Distributed)]TJ
0 -1.1538 TD
0.0046 Tc
0.0466 Tw
(Computing", IEEE Spring CompCon 91.)Tj
0 -2.3077 TD
0.0357 Tc
0.3571 Tw
[([28]  Gerhard Weikum, "Principles and Realization Strategies for Multilevel Transaction)]TJ
0 -1.1538 TD
0.02 Tc
0 Tw
(Management", )Tj
/TT10 1 Tf
7.2073 0 TD
0.015 Tc
0.1497 Tw
(ACM Trans. on Database Systems)Tj
/TT6 1 Tf
16.4434 0 TD
0.0091 Tc
0.0918 Tw
[(,  V 16, N 1 \(March 1991\), pp 132-180.)]TJ
-23.6506 -2.3077 TD
0.008 Tc
0.0794 Tw
[([29]  Wodnicki, J.M. and Kurtz, S.C.:  GPD Performance Evaluation Lab Database 2 Version 2)]TJ
0 -1.1538 TD
0.024 Tc
0.2404 Tw
(Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989.)Tj
ET
endstream
endobj
110 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT6 6 0 R
/TT10 13 0 R
>>
/ExtGState <<
/GS1 7 0 R
>>
>>
endobj
7 0 obj
<<
/Type /ExtGState
/SA false
/SM 0.02
/OP false
/op false
/OPM 1
/BG2 /Default
/UCR2 /Default
/HT /Default
/TR2 /Default
>>
endobj
111 0 obj
<<
/Type /FontDescriptor
/Ascent 701
/CapHeight 0
/Descent -298
/Flags 4
/FontBBox [-167 -299 1094 827]
/FontName /NKAKEF+Symbol
/ItalicAngle 0
/StemV 0
/FontFile2 112 0 R
>>
endobj
112 0 obj
<<
/Filter /FlateDecode
/Length 21334
/Length1 40880
>>
stream
Hâ‰W}t’øovgvfwv9û
UH8•µ"T0°`Ii†1ı çÅc9î√ÏÓ€Ï»Ï3≥dC´§D wM#•1XKS´)•)•‘RH
M"bãä¥|T@D
B1çÅÙæŸŸMÄO≠ÊΩ3Ûªø˜Ó{sÔ}˜Õº ∑‡Õ	Ÿ=|œΩß.  w`Î\ø°EÅı˘>ﬁäÃ‹Ô ‚‰ª∏â°†(t˜X6À®P,<ˇùÀëè®x"/ã¥ﬁ˝˙VÄ«∂†>îi°ûô_¿πkáua™èm_€∞!â„«Ü±Aﬁ√=∞ıaX8b&k›%ï»ﬂp‰>ö0L‚™| `q'ˆkZ,†|∞˘l7@]3⁄ÙTDI∆≈√“k8ﬂ#ÿü°¶Úf‚s"@U@‹U"ÙõyUe ı•®ÔàÎ4~1w@¿*‘/≈ıXºbﬂú 58'˘28ú5d‡‰∂s+p∆U)$G·^ËÇ>M|?üÃ={kAä«+tPÓÏ·ÎÆ÷°Øı\êÖ±œê‹¯g(Áa?LÄ•∞úõ3°Ê¿9“Oìï0í,«ﬁ	∞	ö†Øq0ÊBÉ£∫· l√k6∑GÑ`4‚Z`î¢Vp‹`.ÅÌµ§|‹$Æë‘C∑à<≥ Ót∂¿ex∂8"ê/ps‡QÁ\<è£≤âÅLÊ¶qú¥Æ8«¡T~6láÕ– «iné´:I¬pN¿«˘a5¯πÂ∞í≠‰yõîp`È&˚Iœjà∏=i·∑¬Ì‹|¿îÇ€a8©˛"ÏœÅª–~vÖ–˜Ω|=˙?ùú«Q£a=¨≈ˆıPƒoF∂Œ1-…É˜†Î]»◊!´‚ãa<	%pêüuh·c¬\´o´£â‰°T≈∑∆◊9 ¿ªd∞0Ü:Ô‰ÊKqÆÕ¸˝‹!Æ™‡
W≈o!«a5ﬂÄÒ@Í¯*ŒOR1ô%¸JÏπ#3q6ÆH\ÊK‡e2íÀ∆µy1õW¯”úÃMÇpé?O:…=¬Ö&“…W-dåp?tì<a/¯Ñ0>◊è\ÚΩûEã∑ﬂptl:= a%&«hH‡"≈¿æ6w”q‡¯"bÁ _^6ô\4√qÎõ¨#7ÇU¥êï±^∞Â∏S	K&ø´˜è)<\Ò«4ËÈß≈s,@6æSº;†ﬂF#UrûÕƒd ¶^+&Œ‰˛ìÈ˚21¡ù5ÜÂ…É˝=&!-7¿d¸>K≈˝=&∆êLL|´èDµ˝=&¯QJ«D¬s÷}ò'”˚{LR'I˜∑?€Á7õ}”1îûºÓ2#ªO≠_≤òz˙§IÄÃ∏ˆô¡æ˘X÷I üÃ÷Ww.Óc|ß·øÄ¯=ƒw>~0{1ó3ÂjÈ«˘∑pﬁâ‡E2’ö˜S È≥ñ J!3É4Ù€Xe„6.±Òá6.µqôçÀm\a„JWŸ∏⁄∆jü¥qççkm| ∆ßm¨±ÒG6÷⁄¯åçÎl¸±çÎm¸âçu6>kcΩçl|Œ9%°«~*Œà™ãé~^à®—ÑI&i‘0Ë¸Ñ¢mC∫0’XÙÁ¢©Q’¨hBZLW£øp¥ÑˇWPU"¯˜K√tÛEﬁà+A˙í§Ëz¨‹3√ç)Q£!ÛW.KLƒ7π-AWÒ¯¯ÎT0V›,iôNÈo§∏ñ0ò5Fì`– Nˇ[;ìÍñ][ƒHB3’∏VÒ;ô˝~≈tf£¢mıƒ—U—Çj(Ù{¡ü–4jnÇÍ5Hˇ ¢ﬂ÷ó=ÍE£— ˝£Gâ„I´gªH5M≈ÄÚXf-†∫Iì;dãÑ—ÔÖ4π”@™*ehçô–£Õ<Œ∑à`¥ÊaÀü≈[⁄Â)ß*’SWc∑/†Íç¶mˇã;≈ô≥≠"çƒÕ
Éöm≤E?—mÊS;üà"º‚cnbkÇ›®π«ß”êFìiæWBﬂåÑ≈}rZï±˝rZë±W]O£Ê7ãEJ~çW¢e˝´X¶+A˛Ê’iôjXFËjË†/Ä?∏÷ZY¸uz§EügÒ7\¯¿`"`æÈbÌê+3#ä~À≠≈ X>ÌpZV¢¡øK∂”ˇë
m–Ø±d9ía,_é∫”,?ÊMÀñ%«3ä,q:\Zl!çñ—íÂ|RŒx°Dç∑ΩΩN }«€Î“w%#AÉ1“ßX
—(õ¡åüÓ%4y¶ó¯Õ˜º~‹Û®ôR<€ó“‰˚}©ﬂ<Áaî¶T?ê3$¢œ˜v˘Õ∫,BìxÃIç^t[ﬁXV(≤¥¿%“.π”íøúëiÚ_Ÿo^ë-[≠ëf¸£>å&;˚0ø˘oüm™≠€uß…èØ„~≥;eæ≠}’€À–õk}:˝fèÎ+©7M˙.≠Ô[úvπ|}œç55“	|©',ÇÿÓ-ïuó¿óÚ•å9≠À©£|SuÍÿﬁŒ™ÎÛbªß⁄›Ë©ñˆH≠ÚX©¡SÕó∫b[óÔ´ûjOµ\Ï9"ûííR´«Ì‰bwâºMjÂKΩØ¢ﬁ2ú≠–=–öÈåKg
5R_(5∞)_úi=ÔRÉKêÚ=awóÎºŒ∏69Ósm¬ˆOÙ©û3“9«e±ùkdQêÌí›òµGj`ó€Öfá'åœùùÚ[lœ©!‹Àº#‹]Ú∂¨=r±\Ï¡Óûpﬂ ∏ºQﬁË˚öwã®',5‡»Ã¸Æ3|!Îók<aaXo≈gYUﬁ»:˝Ó.VoÓO≠„ÎYxp∏
Yê≈øÅﬂ}∂ï¿ß/9ˇ•1˜¶¸Q*Ëe‰ßÃMœÜ°v[«æÇˆA'ñuÎY˛±dA˛çM}≤ ∂çé åçèüb“á}î5≥[ámcxg6bŒ…›ä¸ı›√O≠*ñá\jûÚ¯•QÄö¸…¸Â|4U:H÷ë˘9m9ù›y€Ü∂tûﬁpÈ¿ŒùõÂú√z‡*™|êcsd∑k˙|X÷	éÅÕNv0≥ pÄo¿X‹µ∂ç${◊î˛C}Ÿ¿6qûq¸y?l_úK|v<0)kŒŒ¨(Xiï·ã„á—íQPi◊â$|j]€4-%ó`®°A$!î0P)õ‘°2∫V’PÈ‰|î ⁄“J0M∫RÅF∫≠…0Òû;€$EtÄÑÑˆæ∫øœ{œÛ˚?Ô«ùÕÈz´:£Ó¬%YM1ûìUäΩ\°tWã≈!è€€P&∫»Óılbê`ÀÙÁZè~ˇ›-s~°"8Ní;Zg≥(∂w∑6Yöıõ—‡F_í¶åN=Ã√Ω´ ø’BF£^ ·Á 5ê»»v≠œ,,4åë aø„˜≤ö21∞=»ëÒÁ’ä¡Ë dTÇƒÉ_ßéR·c’€©3“ê‚ÁëÇ„‰äˆñ`PQÊ+MH«ù£]ìFÆ;∆¡aÉ8¨nVÌgH©¯ÇŒÿb§«7è∞∑_ÊHõA‡rõÚÂŒ4#TÄ…Ó˘|GŒ"kØ*n2J÷∂ºuﬁöÂπad‰£ûQÍR5m§'T]˛„2©|áZ—˛ZÖw¸‹Y‹û≠ÜCçä≥?≠:xq“/;¬›ˆIáÆèl˚`?¸¢ßXÅê*"cç˚ÄZLB.†/í¿u∆`˘.œô£^OëÍ˚Ë\|∞v˙¡ÆÏP∂…≥TËÍ9Tì]Ÿ™4∑åùIFáÿd]{f¨u§Äå‚ä≤˛KK†r\˜å∫•›õwls$¸^sÖw¬gáπµ@›≤.–sõ>ù=˛ÕwJüöió.ñ«ØŒŸîow+u
µ¿ﬁª™fE«i’Z» yøîèÍå_äü)ã'π¸]™,;Ï†©ç2ÚmÚ\:ÌD¿<Æóª∑ Õ{ê—Y€°3ñäπ%MV˙£Âfdt8Ñ‹íÜ‡!±÷•Ú@u(ÿÓïÇ’pÀVÃ„ì!Œe5¨i}¨ÌRsô£‹Ûÿx´]Ë,wUI»X¨‘{ñˆ´¢£ZÆπ6–A˝§
P∞∑¨ñƒìÛqöyN∞˙·3ıu™,âu≤l; tvw†m¿ììh|"Ò°=pAnv#£íd48√õ|t‹±Èπ	_≥C¬•n( ÛÏã›J X∏ÂpKSÖ◊ÎêÈ0=„Î•Õ3=ÂCåu?‡Ó†2Oa˛◊Æ·FNƒë1¯ÛØ5íƒ sQ«/O≈ Çåÿ¡äc≤ø1√=bò«_ˇ4∞U—®ë«æd]¢’IÀCfáûGŸv.cA\ÑåpÕl¥Û]M˙öëêq2@O26î9êqÇ›nÚßﬂ¢SaOo˛‡¿7◊”y$∆!âs}¨Î:SZèé1¡n’`¨ì5ÎÉãé £fµÁy<±…”≤∏>§◊Le»I7û‹$	Í¬¬Ö≠sNdΩçÛQîe^Ø_êÇ≈√ç«qÔ)pWs•ºNÏ“Á„¡]/åﬂ‡ôWæÁâ“%?9ÙµsÁÿ≠ëÅ:}Õ‡˙.Ÿ_sa~j>ÍÀﬁ¸∏T“/î Ï9jjÎÒ%Yp ";äq>v ç_π¨Rá1_—˜t∆ŸÁìåyÒê≥v√KÀë±Í´¡ÿ3´-U∏Æg«k{k=£ß≈W¥m9⁄ﬂ≥k≈Iﬂ…ÏÏØÁ∫‚]æàßùèÙò=√—øuø¸∫ÎWΩWV’Ù·ﬁıE Ñö\◊û`-ò&iÄåP◊9µÍ¨ÖmÏÉ-y…u]õYÍ¢:£(DåuMπ+…µ∑Z,Î‹Î%ñŸb©Ì^zì›∏ππê‰é®ÔvR!PN±AJmthê3îo;ÄT‹Ù¥ß@∫h©KMtX›e^?2™º€ÉåB⁄ÅúÓC77óåaåçä:c¡FE.O2í!F;ıMëf¥ıI‹2åd<€RmU94W,ì“Ü»wÅ+Ÿ˙…Q[§™#‹`ú&◊Ù'a¥!FuËÈTÁÇ€Ü1‹	k3"/m;\yhwRX¡#1«„`"LÇ)Ú˘Òï=áπ,Ä≈,~◊¨Ñ5PØ@6A¥BÏÖ}.º›8g·<\Ü+o$‚ ê|ÚC2Ö<J¸§úÃ!ÛI5yñ¨$/çÑ…´§ÖÏ$oê}‰mrê¸ôtëc‰cröÙí‰πJ˛C	µPu“\Í¶cËCÙa™“2:õŒ£O”ü—J∫‰‘ÁÈJ˙"≠£Ë˙m£ø£o—˜h˝Ñû°_––>⁄OÃÃ≤ÿ˜ÿLfcŸD6ï±,»ûdÿRˆ[ÕÍŸ´¨Öµ±7Ÿ;Ï˚êùdßYî]dWÿ ß\‰#∏õO‡ì˘˛c^ „OÛ•¸y˛ØÁ˘fæùÔ·˚¯ª¸O¸ ˇÄwN~ò„'¯'¸ÔÂQ˛w~â_Ê1˛O˛/>¿ØÛA5ôM¶,¨N¬7ïtæÓ†ŒL$ÉX®Ä37ìò):ß"Pf-bTz„ÃPVj∆#ìfGFÍ˝Q+±“,º∑á†[±’B21ñﬁÀÑ≠&b%z§›éµ˚†?b¬´ê¨)ã~’-ôËÕ¢˚¡ Ùˆ;Qx˝»Ö*Ò/©NC3Våb#ŸHÅáÆ–à-vKöåŸLƒF¨LD%¢û;Ãûà}tÂ√Tlÿë]D-z=Ü™«∞†^√é˝ÃCïc,ém&¬ÕV3z£fìa”œm¯,ÃA£æéêÉß+‡ óu;ûÕÿ∂‰Ì˜•òqSÏ∆´üKrH0˛çﬁ˜"‹æÀæÇñ∫7€b.‘2πìÁE?∑≈ˇÔ¥8ák
d‘2ØìKï-"øOZ¯∑~›çœ0-ŸBÅäZÇ%®•·ﬁh…Îái∑∂Èó˝ÕÂ.µêD4›g·0-#t-˙Cw•eÙˇ6¿ñä—œ©ê©ë[´LiIN÷’Û›˛#ë¥ñv¸Ú’®$>F◊í-˝Å§ñ®∞}†Éi∆˜èïÙDÚcKøÈ—◊*|çñjª∫‚ûµ˝Rç%∂¶»7¯`ﬁWâD_ƒ÷ì˘⁄ÉFê√`◊åP¥R?ˇó˘˙èm‚∫ ˛}Ô]Ï.Œ9IΩ3xŒÂ)⁄XuéQjÜ/!ÑlÀVê÷ì∂Íú†06
fÌF4E…%$N29$)ù‰6»ƒ›⁄≠P6mÌ„ú™È`”Z1i*∂"¡4êÍ	6ÇÍÊˆﬁŸ°¸“∂J€ã˘«ª{˜Ò{ﬂÔ˚>wÓ≠› √j4éNOËKÆæmømŸ>~c∑uU∑æºcâYÛêaà˘ÿ¿^îæ·¬ñEXnôX∞©¥˛(ä&ØiùÈ·Ï&õ^∫ÃãJ¨ ≠ñTQrHb\êÇ·zª_”,FûŸ 8oëtŸÀ≤à˙“C¶YMLeprÈ˘Ëß\L¿“Ù∞[Ñz|:l∂«ÜóI∏ê~˘òÖÜ•V?¥2À’â∂ÊöúÂÇ8·®e:|—äŸnÌ2·=›öeÒHùbÉ≤-≠«¢~Io8<Œ˛àdúÛ€|>P6‡»ˆùKñYˆ[ÿM/®*@§]<!Î[≥T≤Ó∂€ñÓL=µ–Å
´^µ,’XÎ≤9øjÚ2ÀgÃ	≠>ùYŒﬁº∞dπt}¡±ﬁvp¶|BáUC	^	CŒ"0ã“†∏ßÙÿ‘74x\ÂNàH:Ωã‚≥ß$ò3rt.—ikëM˙ºåƒΩÅìI˚ıÀü˚»YtaàZ‰SF1µdºõ2¢»√gÄÁ$Ÿ∆qÃ¬Á-=°ÍzæQü,-≤Ç9æP1üÌ;vLﬂÇü≠˘N¡¬.Æ¢á÷!˛h[bÎvÉYíÊ»íe∂Rv¥ŸÎJèSã`(Ò}I£ˆbØå‚D≠<æﬁÁ”cGŒØÜvóÀUsÓÈ.≈PVW§‹¸úë∞1©Ωx∏§Îï‚ÛC7”ëÿÈæìoª˘¡õñ˘µ®_‘|@Rô@‡÷ÇÃãÙº@2‡a3“?ïÕYûÈ‹,ûØ

|t'ùCõA∫\˝É£“§≥∆0T∫¥ÿ≈UÙ◊-ıUm›ÆÖy•iõ…∑5óã⁄!ÀÚËá—…Â6,KÂemØVÌuõ ÍÜ⁄
√hPãç{®•∂åYŒÏJiäW—‹œıZ[˘9ó;˝⁄ËÿË&-	¶ˇ∏pÒù2Q€Ö1ã†≈B)=”wÊ√¨ …0¢cvË:ì]ÈÒî∞,Oÿ¥ç>{yPOn ]∆M4∆‘fÑG›®`ÈÀÃ™>ìüÿQZá[&ji›frñe4¬ëDìÃ˚èà^f)µG[ØlõKi à∞E“åØXÛçˇÀjùáô•TEêﬂB ZkÃÊâªîÙ´ìcSnùZÇ/*ôÃn‚™Nt[3B®8ºó÷∂ã:VYqd§üÆKf@≈ñÂi=‰Ø≥Û˚Æ…«ÀAQøàAm¡0{»ç?d\Cyªò∆À»ƒ≥»Ct^íñE∂ÊÖYj˜O/Æ~ÌñI-z ≥^iø”Å»–'˘¥∞í≥¨ÅpY≠xÿZc†SãX…ÑÀY¯∏†ºÒÍjâMG¸ñ%ò∑ÿ™˜´ÃÑ≈q”ºt”*÷˘>3° †5ãI33úeâwQ}ﬁhoÿEÁE5f†ñ>sfÈ£˚ÀÏ∞˘“V@:≥|ÛÂi∫∆hv≤‚e¿≤∞x¡√~œ~√Îô`ÛÖŒKD3Ç¶Pù=(˘ï∞˚—∏ª;œâ∞bµ-X∞Â-µ§-Kp:R|}ô’2®•ñæÒ+Öy©—e§≥y)…Ø1cJÚ7$´Ç+˚’ïrµçá–◊Ot–Øœ“]r]~^¢g≈…6ZªÙYñD[≥ê∑®¸\(·ít*˘è≤áZÇ∫DÀiËè÷˘H.'«•°ñ˝VN∆ú"(Ìs‘"‰,ÂqâZ*«¶ú˛≤1OÙˆìM’‘“#aÒ“éPj‹ÿ„{XºÄŸÜú…Dz ¨5ÜÃÖkRµ4®Oñu∑∞xi!Dsr¡Ràó!ëÊdöÓôÂÏ2K´|d™ß^Ç0§£…EmokPËÙ“<¶ ›È&tØ§ñ.©ÉàaQ±ˆJ{V*zÃEAh,è≠Ω\ÓÓxπrÏæ5„ˇÛ~#õØ~Í[Áœùä—úZtÔı]c©àû4BËØ–éÌY"–R∆Ù˙Êèé–˝%¨ÆÉf€)–<¶» ”!È◊3 11ü«ä0O˜J¿Ñ°{%À…Ç™EhÕ√€n;ü©%u›ºbÏ:≥œyÈX~Û†˘˚Äi∆„±˘lcØ9û=ñΩﬁäÒl6`œöãÅä¨÷iÄf˛≤¡—™å$c≈ˇ‰Ω¡Òçvà≈"æ·˘‘ﬂÈ^)–Hg{%çmÙè∆æ=ÀÂÍ1À¢6nâ«m∂'∫UæªØ∞øò2≠arñ&1øø`Ã{Q
ÏYñ|€Ãr˚,ÜE¿ÀäáÂØÔ”t∞äê\O£@fÀ¬ìm¸˘N≤æ¢¶–ü>{¨{¥B›ÿ˙Òœ‰¸îN›qÅU˚î‹bñ‡lÎfq…BÎ±ˇ “°>‘rˇ[›m)1È|ô∫|œÓÖ:qmäzú#™†kmπÖª´ÛÉö˝NKPøó•ÙMyKÒÓU∞¥<t‘|ÀJ-cdûZ˙"∞d±j˛ßŸsˇu/R˘´’ª-ÜZ»Ωt<‡^À}Ntw∑Çeù¨Zñb–Ñeñˇe{ËπÚﬁ—
ïZÄWˇ?ñˇ∞!éœ[ÑO–Çi8<ü¶’|=|ö`+=1>	O”√Lt¡^xz`"Ö
úÜ_√o‡Ã¬xﬁáø¡XD+P)Ú¢GQ™GMËÀËkh7˙@„Ë:Å~â~ãf–[Ë]t	]Eˇ@∑0¡v\ä◊‡µX¡∏?Åü¬ﬂ¿]¯€¯ª∏„	<ÖßÒœÒÎ¯Mú¿o„?·æäØ„ERDVíUD$“'WE>K#ı§Å¥êvÚÈ œëdÑD…49Eﬁ$ø#IÚyóºO˛J> 7Hñ+‚úã´·÷rπfÓK‹ì\ê€«}ü‚&πs?„~≈‹€‹{\˙_¥WPT◊>˜æ˚ﬁæ˝¡}ªê≤ZfˆÌ≤(ÿ®à§ÖHe≥ÄB‘å¶vFÜX…t2µiujdÅçÓÓ‘Qa˝i•3çv¶NL⁄äçù…¥v∆¥5&Ìÿà±e¸y=˜≤ jå¶cÓŸÛﬁæ˚sŒwœ˝˝ÿøÿvKVÂ$Yóß…3Â"yé\&/íó»5rPé»o ª‰N˘m˘=˘∏¸ë‹/"_î/…_»WÂ!˘ñBYQßí¨§(≈´LR¶(SïlÂie¶ÚåR§î(ÛQû/+w%ê„o0!ÅLí fb!v2TÇéâ,T*câ∆ˇ"2ï¡l£$Z∞‚s±¢*`≈9ï ¸?∏Z0«äuTÃ±°Q$Y£-Z¿F∏-≥∞•bMﬁûÁX„äÇ9™∞ [ÿàôö	£ÿˆQz¯ê˛sOº7(å£„Ñ&R'Ê°ﬂ™@»Òãu2^nìÏ$[8y_yQ∞ÔDE·ﬂ"±ÉÖ°j•VíàÎ≈
®O%ßb‚B$å≥ÑÇ%8

^m©L≤(O3ØÅõÇ’0ö¯:6¯±f\≈9‰¯üõEèeá¯ˇìÀÜläz¥pË[sÒ€¡$ÅÈèâ6Ê\zŒÒæ9CáçÓçøâß¸˚]ﬂïêµT>	O_INcÅﬁ›íÊà¨◊‘‡ŒMp4jƒ…cÉ¯ÕBfıë
†6…cê‹∫	n˚Ü3w©≠Øe‡Ù˜¢∆O8∆ë$˜,º4*$O …ˇ¡˘§˚°ﬁ⁄\c›‹wÊ∏S>ÍÎ2Œ€·Gµ.Df‹ø∂à˚öçTwõ˙u>(™?ÿ¬‘fK¸úd@˙6ΩzSÒ(Pr{ıö+t$&ûºº+∑∑#5ñ c“SöIif‡˙¨∑¶E—ºVÚhQ_â^0ﬁÏt˙ Z¬Z◊Óø*êê;HÏú–’í∫vGOBHÛÄÜ¥*È∞5\Go5!í„ñ˘À™2K„q£¥>Ù˙bœ(íÚ@`q ëLΩ ê$˛˘zVînÎW{hpóÊr©4TbÒ≠≠OÀˆE-II≈ZŸ@ÂÓ˙D≤Ù˜ﬁ?ˇ~U⁄[;ã˙˛¥ª∏-Õ¨k™2•˘H€i›âÉÖDvzRÈ˛|äQ&K[ón|∂*sÛ˚Óæ#WØ^ÎgE´≤x¯äµ†è8Àµ.∏Úˇ+ê$«û˚;bÌ⁄πΩc¸¨¡∂	’5∫aΩ%Ø•·B[0∂ÔYÀjÂ∫ﬂ‚H∂ºQ4ø*⁄πﬁ∑cÂ∫¨Ú÷¨ NÛƒ⁄∞+kÕÒ˛˛Z√pa˚Ämw™—{LF]N ÍÊ¬Âí“5›W»TüZ47PÊYj¯ñ{åñ∆=eW„¸¸√…≤‰-•ﬁì;ÌΩêS<Ôï ˘ıÖ¬Ÿ_KΩ/‚èïL∂<Ò◊êÊ’ó∏U>:·HÒûäËo_E˘ÏÈö@í—§*Û∑·–ŒcRB ≥∞‚∫J¯Ë,≤Ω‹~≤*ÀÂ“4W±j7¥åUÅÈ§º]¡—)Ø8‘fÅd}“ñÎi”%3ÉÙ›¶øGºZıE›‘[‚¨E$g…UÛjA¶	$·—ähg‰áñØíÓ‰k}]M|ûL&–Ω´Ò@˛mœ<€ÀÛŒVe$aUM◊3ÊfÅg…™ä=≠‡‡Hæû±jiZVÉäH~”;=Í’].P}•ÌZΩØŸ·4ÛÎ–ºf=§ü{)[√·ã£ù%>_˘±xLtµ¸…W7<ˆ5ñBÄh,®ÒµS[}©∫◊NzíÆ˚BÃ‘Ô◊B!h$‚£„Äœìi√3v|x·gß^SAØÆÕô∫2Â$¿§õµÔFÓÒu/vuπ√üÊûŒœYq»ÿòn˘ Tò3#Yô˘nÍÊôß’eÓXqB7ÌpwkuîÔ∏«⁄n´|´ç†_\slØ€æÌ˝ƒ>>c5C[Ωë@DÂ3÷ÊÕÀÉD2±ó#âÔ±M#ª”vF?Wæi‘˘âK’≈ö‰˘Tœµ˚õ∞∏·¯V2öø*cÚå$‹c’XÅ'?wöÑØ&¡Úí˙“oÜ§r¯√>»˜ZÂö¥ÈÄ9µ¡3¥∆6¯⁄TÈ≤wCΩ*"Ò«ë0˝x7ÎBÚ∞Dú·Ä^Èô∫‡#’ˇˆq#©{\H^ æ©0	’»Ç\òâ¨*Ä«B	2´2xcÏ
?ÉÂ»≠^Ö_¬k– x6#√äA'Äwê_ÖS–'÷'9|	∑àå˜f'q7ôH&#” %‹∏ÊíÁ»ÚRE^"5‰U≤ñ‘ë◊Iô◊V≤ù¥ë]dyõ¸ÅºKz»1Ú9K˛BŒìíìÀ‰KrÉ(£ñ« NÍBFÁ°©t2ùB≥ÈL¡Î–JZMW–’t-m†a∫ën•m»Ïˆ ∑€O“?“£Ù=Kœ—~zë“!â"ªKíR$üÙ§î-Â	fVé‹¨R™ññ#;´ì"Rì‘å≠MäIøìI]“IÈ≤¥s“ Ú¥AÈötô0ÜlÕÃlÃŒú,ë•07Û≤âl˚õ∆2Y6ÀaπÏáÃœ
ÿlîy ›«§oƒ•$ ¯}L»Ã»ùÇ¯bB%ºÈ+pè	Û≈≠ÀVè|√å≥HE;&T‚π¬0Û‚π*/ÁÃÜπ	CÜƒÎq{™‡ú∑q5·Ëâ˚Ê≤∞Õ[®ÂæóR—6ÔE6á,rXk3€∞_°ºüúg∆±õd¬:√¸œÇ<Gp,∏áw∆˚œ≈ä5MˆAÙGÿ™`ºFX™|Gê«*T·åñèSÚ8ê%Q&ûºL¡ıkÂR»™å€ú∑Jo°=æÒÂ=⁄0Îk ¸¸Ú,íˆïÂ∫®DE•‹+≠jb„Œß›¡Ø¨zíƒŸëˇ¬c€4z‘@Pﬁ—Ø˝ æ’1M◊Öﬂ·7ˇÖ¨ÒÆ¥ËÊâÆ`œ¬øiî'[Có/uÈN˝¯‘Pﬂµ¸"u”«ó/ˇ ¯‹¥È£AVÔ«ÜÈ ˚øS£´◊≈R
·hPúëÿŒúÄúö¡∞CGv∆4éèÏß°ƒ≥:–Ø3]¯çï.OGb;cÔºfdJ‰«+“ãC±"üßÒÉÏˆ>ı?ÚÀ8äÍé„ø˜ﬁf˜ÇknÇl4„·HE∫ïÙèdÉëI"‘$@E˚o	 -eú å¢xG‰h®CM`ZÇÄp˚«vÜÓÂ&ÃdD:“ÍHÎ!`«j‘vzëx€ﬂ€Ω$ó`ß÷?”q|ÔˆÔ˚Û˚˝>o{ﬂ≠POÑˆ¥41Ï[∆Mµ+c5ËKqnk≥–Ê‹Æy∏ WXpi∆ò–¸∫óK'›í[π£¶£$Ô˛¢à∞{,±¨¯D‘5Õ?3˜f√Z^;Èö€œÃ-™ùw0∑føTt…mÃ¬È%Ø~ø§≤˙¶˛•l+xÿËÚïf˛Àõ&Ä©=œ7µ IÉ±∑O…9TX‹S6#0cÌ;ô˛W˜◊]√3s4ﬁY∞Ì∆£Û+;Jä˚—Ó$ù∑Õ=˝k„	®ãÏ+ô<ŸŒkªsVµÕ®:"Ï~˚∑M_ÛÕ
dí ôwæ_˝Ìôó´KwZ—ç5éiÍúÊãk{rP04Û˙]*é•¡∏ËñIè=X]áÃ9⁄é{˜◊Âq„˚ìáﬂ{ˆ‡sÛ+:J™Ñ›P;oKT˜ˆΩ~¨Æy]…ˆs Îü4„≠*ä¨⁄ô[≥G Vm)ÌÜ>∞ø˙PnU›ÅéÇ≈'6÷ˆ¥“ÌU"›ìwpÌÓ|òkGä∂ËAÛÖ0sÇ;v~ıﬁú›/w…–ôuÍŒõ›x∫‹x}5’Ω∆ÿﬁZQ≤›<Ÿë¢=ïMU°Hh◊Õ˜< Œ=“4ÌNŸ~ﬂì’˜W·'»h∑¶K—`k‰_ﬂ∏$‚Â@w˝\Iæ§±˜~x`\E§-◊ôrÕ%w“l®JƒªÂÜ£&
€ºµﬁ˙6ﬂ}j˙	Zæ’ŸÿªµÕ∞˛˙_ú˛∫–ÎáOº˝Œ ∑Kœ†Ω#ßã;∫Ô|†~’÷'/L›uÎ¢ñ.(-ﬂLM¨oŒﬁ¯ÄiêDæ≠ˆô“Á«Óv◊7Y2Ö›ô∏æ§P%ü∞£$Ø∏(≤∑–ÀﬂÃT.~îB¬Ï#®–§"hÚdñëMª`(OMbß˙j"Õ*=!¶âf„JÈ‡Lc7C⁄•EßˆjÓ9e7=ﬂŒIˇˆÑ]€≥ª"´A¥©<‚√voñq20j&—˙ÿåÒ¥ÚlÏÇıñ>AÒîT‰A µT!√dòäjj:î¢û*C=5™·.òw£û˙,Ç≈p,á®ßÅı∞	~
€°~˚‡ Å£<j™„Æ¢:Á‡M‘TÔC¬»U$õ\ã™jÍ™"r*´È‰6RNfëjÚ-TW»˜àEñêe®Ø$k»z“DöIŸÜ
k'ŸC∫»”‰(˘*¨ﬂìc$ˆ‘‰$˘#˘3yçºA.í∑»ªB©—ÍßπÙz‘WÖÙFj–[Ë◊©I+h%ùCÎË›Ùªt]LÔß´Ë¶⁄JßøDùı4=JG£¥áû§¢Ø—8ΩHˇNˇA/≥v5ãZÎZ@µ5ÖMGµu´fµl˚´gÀX[…V°ÊzÑ≠aÎPy5±Õ¨ô˝’WÍØT`ùl€«ûb]Ïj±gŸsXü'W(©¡;‰c))Ç"ˇ€3P#¯‹£ÑØ(u7F2jT≈bÍ
ÍçÛ∆ûâ6Q«∏wΩŸm…puÑP$å*7w>œzÜªUÚéB/•µxñ|^¥KÖÌOØ§Ñ6Bèep)†WnEﬂ«`nTÚHIÛQ¶ôL¥{Ò˘h¶ÎõWï¡ÍŒ‰1@≈%‚¶)nò	bÓ1)Î¢…Pi∏2¥ÖOM<ô§HbFâIËã∑œ=≠"è∏woÇÅÏrÔæà6}6Øà/^1∞™ö8√ˇM?TÀ_íæn(Îc-*AÖ€aáøN‚K√¢F≤84$Ò\»WÒŒ0·∞}_(¸SåmÜ,à4|ÇÖ§ÒVd±ÒˇÀ¬˙üGOnåu8äÖ¶jƒN±h¸<Y¨OÄbÉ»z˛=Ï‘Í(Êï∑º…H¬üıqpxö:f‚2çıX0.yÛHÍ«ò|®)ÈˇRT≤Ì¡òf§∆∆áöœ§‚%∂6z§¬å£tY∏ªWú≤›©…+F]NˇR»»Ä4~ÁèÖÈ,j`ÊWú¸’
ŸÌ6—n¥K‰ØîŸ)ÔQ{m>◊ßí˛®„¯∫Ë›Ñ§@<†Dù§ø1YÜ #áu~ÁlbΩìÄüxNËhC,
º3Ü‹[¢"–,mùÜæF∞àu/◊<i‰S,îsÒl Èºs<–xπ±]Nˇz…î∏`¡É8, ≠∞ÿc!K»¢iêEÃíï≠™çﬂ]¢.|ÙlÇ)}NGãëÚûÄ±ê€ö,3∞zôJ€íœ7$›∞k˜´”8'±Gùó¨#≤Í}ËY'ﬁA÷á‹√ˇöŸä'EñË¥8-†q∏ÕÙi!˜bòû`A√*+è°¿"É£Kó,À™Øj‘G∞HΩ/¯DFıiÚX¸Ûºd≥∏Ç§ﬁ–m–\Ïìß5ØÃW$àí#=Z {∆√Ê•2ƒ≠Ÿ.;ãÿìK%C∑tÀà∂»j6Á,‹v™È,ÚG≥ê<ˇ¸q¨Œk«Ù7‚¢”Ú¥ÄB<ç≈0=· kÏëÕ∫E6MmÅ¯`MM>€g∂Q~≤–F≥õ≥»&≤!∑ñ{,∆^~Ô
›ñn'å®4˚ñ÷’ØŒåW¬∏|]∑`±JeX§[*SâÂK≈ÅzÙ8Uµ( 6¡ÇÎÉ,˙¥∆,Âl_¯ŸnÈji›0‚ÎﬂRKï˛ªNãn± ≤`™·&íu=ò+lÀıº¬tY HúI_=ÇEÏídÆBØ—CÇÎ|Hò≥ŸÒ'ÀŒ%1+3y◊”X¯> ÇG≥Ω›π5∂œe1ﬁ˘ Yldq—°AÚÇ©s9X.å-»„ÜzæS]:XJ˛7©-XÃñ!¶z,bêE¨…ìYƒ›%qïÙÖ‹H±`M´ó∆uÂ=—ÀÚﬁ˜7 z√4›yKM.;gU]]⁄~‹D5‹á«*É¯Âx_jy≈˚C	‚cturã≥ó‘Ü^¶D6U54;‹Æõ*ÈòK∂ÍÉ†ï]ñô’\^å,˛M~˝≈∆qî ˇfwªªN◊æ='ò9r…múı!Ç9RWJuk7Ñ å»BA uùD	H®ΩÙ#*{Œw:í€ú¯Î
â©j_/àΩ^Ík%ì∂oñ⁄á3•<TŸ®Ç\ƒq√7ª{\;iõ BbºÁª›ŸŸﬂÃ~ﬂ7é,4∏Z∏ŒÇS)ùÆLçVΩÆ≈∆†≈üI¶E÷¸(ﬁwúÿÇÕ†≈#À(Te†°≈Á–¬,j“Ç-Ø¬n‚M÷|›Kq´V√Y:g¸]û=`°}ˇÍ)u˘ÿWjÔÃ•~ëD66ú]^ú∏znfIgz∆º*-,|ﬂˇVé‹7[&YZp∑â)=Ü;›å -î`ÕöX◊3o]cåiªq-⁄‡ìeì·›9.%◊MïS•Gˆ(-ßdWKYm|¥ "ãå®inAÈZ¸I—\rõèÃ´Óß]ºŸ2Z∞ÛÍj†g(%2ª†Ö«ºOAYOui1{v-ÿÙ¡–¢:]„>ZXaF±ŒÉÁ≥–BWfÛáá◊µ/úß«≤{CßtÃ .%‘<∆∂eïÈÃZ„ha‚Ë‹‰‘€‚˝∂é+›uÒ!=ÁÜ–aH\◊bãŸE+˝é≈Ç6Zòcm<ÕÖ*ûË@:Œ∆SeVöL¢Æ∂]¶9/öÛ‚¶6/ßî¥KYO⁄4¥ÿì~âá-¶Ìã‚2§”™èπ ¥fÎp›“&’Q‡ò^ŒOCŸ∏ç	a-O¨√A¥8PíœØ’πg¡√¶3ùëK‡˜,÷ŸëâuÎ‘Ai·Jã#zˆä M«Û÷Ûä^dëk„îV+Æøﬂ¯ß∏’qdóìË¬ßö¸@Ht¿¨ƒè™œZ◊,7?{\ºlÔÅá–¬œvÅ£ÖÉ)OZh\ˆ(◊ÖÈTÜbÀñ""-<¥ò‘p]®Èãt¿b∏5}Ô“Ñ·û&cûE‘Ó∫†È6(–•ÆE\Nÿ“Bm£t-Ëˆ›ÿÇÎ‘Bã•i2œ66ÍëEp·+gú⁄⁄ÅÆÃÌxΩ-◊ÖÆÃbB»’Œ«èÉn6“<¥p(fô-
–©åŒ¥M¨/ú"@RKÇÏQZhNeó›B€÷Ìx]4O∆ºk°?U∑s˛Áoã -|úëc∫ï≠ØÀ®Nó„ZƒÒÇ“k°Ös5zG|’©¥P¿#ºk°.”	Ôíuj\Z¯€-|¥H˛PºLá«©ø':9d+ÂDKZêÇÚÄû"ò2{‚/\yhÏÉº|G‹ûÖ#-ÑËhh±-d›ÈÖHjX∞ÈëÖÍ¸dTÆã0åƒÒ¢[ÑÒ¬≠‰¢ù/¨®˛#;	MqYxMÆôõ8¨êrúG(mÄ[≥ñúQÏÙ	H%Ã*l±¿u1*-ö¥LıÈm3ã∆Z—∫®ã–‚ÎbA—e·`ƒÒBmpï7ˆ±À2vÚ≠xë	÷B™LK“WqÙ◊≈ {–É)òˆC±≈!æ@z&'Vù˚™üÖ–¢Äè«tÍy,åe•ET_PZÁnmÿrér™ØÑR<ΩoAiﬁõµNÌë˘ù-íï0vŒÿ∑˛ﬁ≠ˆ¸¢/ùƒá§⁄‘“¢/lµÓﬁÿüsÍó0ZÏA	¥p#ÃûV·ƒÎ	≥o·Ù„Ö˜ !s*NôY|RÉp-Ë´º[XŸÖûÖG¢]äÉì%Xïuß¥`5ü◊ÀI«ö¥†*ò—z™1h1¡ T]µ≤•â„x3/O6ãÕ(v úöJº∂∂Ÿ ]y≤õG¶Náy‰ÄY¶≥∫BD≈¶n4a©1‚Æa≠u≥»»
æÍFyÑ;`YkIã]h·N∫y§p“*≠Âq ú;[ÿ¨˝*ºôÇ√5,ïù”–¬óÉ|M,∆
“˜#ha2ø…g§ETÉ˚¶Üi≥êclœ‚wÏMÁ¨v-æq4ÕæJãekÊg{UÊ]».?ñm‰-,k¢ZÀ¿Qsã„ân}Q8a}ÃQ–µ^≠5ﬂ	ÆÛÁØMñ±/cu±Ì±æ‡a}1Ñ,»|¿¢__$…ñÓ8¡‡FªeÏ,≈ñ⁄t–Çµƒ~Ø(¬à>sÂKÍDøæ(ÎNºók±À¸5∏®GñÁ_ÊXK8V¥7Û3m¥H\Øﬂæá≥Oñ‰ÿ…3Ì¸õlml⁄§«ü;:‚Õﬂ E∫±y¥L˝Ÿ\˙•‹‹|y}.™¡Âf-†9^ØÓî¡R÷ùXÎÖ7Ur]@‰∆gçüÀ=ñ˙ ©@≤¿e›…√∫sXŒ&‡Çˆ§Ö&{uxøÓ‹Ú2© IãddQí¢%-Öó⁄ja*å®q3P3∞Ã≥ÜV–AN461àwµV.!‘‚M±)^…µ4£÷öKÉ\;sÍ-¥¿ﬂ≈*π"Zx]˛ÌZ5alû5ÈQ£nx«V	o˙µÕYÿHbˇ»âL=»Ö{≥∂ÃöÑÁ‰Ó£_Éc}Q¯˙ëÊ†Öç·¶£´ª”–Ü∂›1¡ûKÏGÑh+ê·r#’≥ËÔG4(»À‰F1¥ÿeøœK¸›–ßCÖ^√˜î¿÷∆·c¥x˛dºà>PR≈€eøz¸H˝∞ynπ˚ºó∂Û‚SN ¸¿/Ò¿ïÅØ®æCΩÛÚ“b»X‚Ah°ln$ÓÀ¬éè}U~Â¶Ôd·ﬁ£l∑ÿ°Ìhwaà`‹…fÄyìsR!¢òﬁ24õoqÿFs◊>∏l&øõÖÔìæEj∞ØèiÅ•4˛ù-_Œe8lo—w	i·ÿ∏ï#ZpuÎ–Üv¿GmjË[Ë	~ã˜C’Ó£É}}®≈·{•ÌëÖ"-™€,v\SΩuc¥‡i\Ñ\ZÚÓwäò¸FåÓE]øª6ﬁ˚îæ◊Q∫ÒÒC,˛Ém¿‚~øˇ.ú¯h;+°Ö&-V˛õˇ;Õâè∂„ı-¸ˇOãn≥ùËi¡ˇù*Üæ}∏Q:ß·|æÁ·	»c‡ò√Zˆ¯1¸^Çﬂ¿Ô°o¡€∏ÖøBÜ…'HÜ0Ú(ô&ﬂ$ó»˜∞ ˛Y&/íﬂíW…:yó‹ReLW>£úPæ¨|Mπ†<Öª◊™ÚSÂW ã øhØ®(è+|ÁÒ?@`waQCˇÂaê,çB5E€≤‡b_+ÇŸ5±.DI<MO¥H|-=†∞VÀC”®òZcÏc∫ÒD∫6m}D[GE≠c‚3i<÷∆G<V$∏ΩÛ≥>¬©∆sLˇ˚ﬂ˘gÓΩsøπ3ˇ¸sˇÕt;›OO“œÈU⁄¡83∞ﬁ,ë•∞A,ãçf.Êf?csŸBVœV≥ıl€Œ⁄ÿ«Ïª ˛√⁄YÄá~‘ã«ÛD˛4O„√¯>âø»grù7ÛM|?¿èÚs¸~ïﬂñ¬•ûí&Y•g§a“©Xö"UHã§FÈw“&ÈCÈàt^∫.sŸ,'»irñÏê'À/…ÂÚ"˘uyΩ‹*ÔëO»ˇî/»7¶D(˝î)π dÂeeñ2GY¨¨RﬁQ>Pv`ZªW9¨QN*gïœï)óîNï©™jTMjoU√?ºduÄ:PÕP3’aj.R!»Ån◊	ûŒèp·¨JLF¬ôôD—D%*-êâBgµ»¢Ï"\U¬ë$Lƒ&0P#â$»*–£ëˆƒz$â“•!CÎ(b‘YÂ—hg^Q#<ÖÈæBâÒ#tﬂXÍAÖÙ`B;√JG˘(>¸"j†2"H∏¬h$ã‘πèÉ¯»qi®>Åvg\4FB=πÂfÉQE≥±ÈQ$Ω-t=©¬•pâxËCb0R¡a8„8GÖˆ!Ç@'	cîêPá´ÄoÄg-D	!®SÑÍÙÉ:"®˚8 !Å€Å ÷ÌMú-ÒuH¸œÉ˙›Ä‚6àOÃ’˛o(‘É≈´Á⁄ ·…˝ﬂébx†s€PÙd[”Q6π€ËO◊ÌÀ¸VÏUyoÄÙ¿ùäæ˜PlØŸÓ÷YQ:h•érh›⁄u˚Ó*ZQY÷ãOû¿≤g[«6vﬁ\UˇÎ°[ÁlÌà¯˙∑gv£bp˝ÖT.ßøxCœ R`LéçÈ(ÂK÷Å‚«%5úöÛè,°˛à÷W\^êÊ>îÔﬁ7ÔÁÛWV@˙˙âÒ•Y!”≤Ï[íÎÛå'ñÂWó∂¸‹€lº2÷ìejÎõô?!ZYúl⁄yB8œÀKˆ¸≤Wç
„˚7]¯Ù{óÁú2O©ûôê®9‚FüOs;*P∂å}UÆÄ¥™˛ïe◊mo’¨/4,ï‹\êøŸQUO◊⁄G¿åí∑K˜∂ÊéÃ<q±lÒ±ËuL˚ÅéZ¸ÆçΩ=Ë Ïg +wM5.tT%∆o‹<s"‘œ_‹µñ÷£á“J&/èwÔ}Ø9{„_ü;ò_3◊˝ˆN˙Ás#÷™ìkê_]WUoŸâ±,ky°0≈ükΩXö[ˆŒÑƒ„jÍ¯@†≠Nï∂¯º¿Ôw´¥ ‰W/›Bî∫E∑≥7æœÛ:Û*=éàK≠m!iÓ”˚E,QÁ^˛[‰7‰ï$f_'ëÖÊ-jCÆΩ÷ú_ùXÂ≠©ŸÜ(%π)Ô7õ[tîh:"Ó»óÂÅ¿û€gl9É1C‡„=£À'	î™‰JK∑ÀâÀWç&D—g¨æ®qHñqgÌäﬁÕÍ÷≠4Æn_}˘t„s˛r‡˘ˆÉáÊ√”™⁄§#qç˝∑T-ü±ú4Õ6VYåu*œ∫r≥í>ªÛö1xP”k/„∫únèõÕÌ˙∫X"+Œ$‡∫‡åÈo2µˇ˜ãØaˆmûLTÕ£ve\uÖX†yÆÀ›ç`Ó·(‚å˛&ãffäª-)q⁄>—ìx4›‹ÿ•ÔÌW`‘=fZ
˜º{(:‚\¸]πõ·ù2◊óÙ√i6xÏÎ!ﬂ1“œ^'iØ|¯¯ ∫7¸£ËÅﬂ¢hàÖ85íp◊Za ƒÔÒ30~Ÿ0Ú`‰cæ5ûáp™‹"îaÊ5^ÉPµ∞sØï∞ﬁÇf¯¥b∂v√8«0;Á·¸ÆC;t Tú’xFDìﬁ$éƒì$íBæO“…`2îd;…%£…82ÅL$Ed*)%e‰2ãTê˘òµUìÖ§ñ,˘®Å¸Ü¨ Md5Yãy‡‚√\OdŸKí„‰rö|Üy·%rï‹ Ì‰kJ®Ñg^85”h˙fä…4ï¶”!4ì⁄iã9£ã—©tùÅπc9ùá˘c]Jó—UtçûEn†>Íß€Ë.Ã%”£Ù#zä~F/“ÀÙ˝äﬁ†ÌÙÌ§F√3îÖcû…¢X/÷á≈≤8faÒ,â=…˙≥ßêP÷=C∏#°èîOQÑa
F%â,âr P"ZåJåÈ•Dª⁄ sΩü‹EL‘Ï#Î2ïbÚ®{ΩÑZ»ÿ_’ÌÑ9Ëó[ÏÆ‰~‚AR∞’%è„C„>)FBÖ_¶tëûŸ»:Û 6‚≤;5{vE£∞ΩWW_˘‘±Ç∂*ï∏î
ˇíŒ©kñdΩ$¶3Á˙öPIñD/|!ƒ˙àRË«˝+6Eñ∏8Ä≠ö—Gìr›>€8ß∂€eIµvkjFEÛÅ√^°˘áì«J.ü‘◊«íTOJ8˚ ÂŸTÎHáSÛ%«tõSlG·x'VE≈(œ±ß˙A±éÙÉÏpæG»Róü™˝`b~fÿ‰"T´VMÀôn˜ëblÑXQêb¡Z®UéP√Ûù	.Õ´ys›^m∏6mä¶?QQ‚u=çCÔúéeÅ”‚≥πbÔVK\Æ!Ëßá√u?^z(z(”=†ÉN4
≥é‘|¨ü√9ŒÈÛÿc}6ª+÷b—r|€Nﬂ6{¨≈ÂB´ª#≈ÁºÈ1¡1G‡ò√S∞bËÚÇs`ãıÅÀÎÌj%X|Ø7÷ãq€~ÿ÷M@†ª¿¯A˜»ír¸ƒ„–UûK¨$X,8Nóòd£ò˚©≈ï*é©©≥	Oç	∑[:>Q+ª2≈˚Æ›|?îÍµ[xÃ‚É∂¿ß∑‰®î3†€E»≈‹QÔDÆ•Åk¯äE^É¸„`=˘)‰‰‰|‰Q4÷ W`·√)ûl	ÃCüÇÎKvﬁ$+açx≤t®`Ô¬ªh7ÈølW_®„XOÔm;Éä√>(Î82åKë&i”{˚0,Iõ?M€¥9IŒI"¶I”¥I⁄Ù&Ω˝Éóa||GÖyíEPaÑ}–a¡≈áAƒÁe–pÜAÑÎÈùª∞,~˝NŒ˘˛ﬂ…9)=¶íΩ›K9ª¯êzp¯Ç∫KÊ’Úb◊ßær¿ú+Â[T@Ê˛ZÙœ?$˙˛EÊoüQrV˛}/Gd íÅ2†ñó∫í˙¥p˝ 3*€c?æ
©_=GDﬂèˆ(ùÄ“ıΩ“ìÛó%H1≈ßW¸êzkè“™RzNÚÒs™I∆oæÎWÆ˙Ñ∫]zãZ
âéj1#¯-uç»‹,}õz≥¸&%ëµ/ñøNê/â¯Ò›Cï: >*∑âçk≈
…˘O®ádÌÛ˚…3u¯uìåÇ3¬£ﬁ£Ã√{Á)><E÷kd˛ç“Ÿ˘+‚á¥ØQ·?‘=¢˜˚Â2ï‹$¯Ä‡ﬂ˚E™¯ê»øA¸ªµ«>˚∏?bÁ…M{è˝ò‰Á¨‘¶‘ÀµüºK‰ÔóˇQËëz˜˘*?(‹>ºF˝ÓÔÏA¯bC%˝@.“∑â˝ZÈÒ˘K¢„Ò%!<·Ωâ[{\yVx˚E·7$/¯5Ω”‚KRÎß_ªJùﬂΩî#6ˇ%¯Ä‘z¥«ïéPÂ*ıíüoê‹Ô{ÁâÂ¨Ù‚¸9->∫Ë˝O°º£∂ó;Ê3ˇıãÚ¬"_¨˚˚—ÎµC2˜%Íè	or\ﬁû˛ﬂÔ‡Bm·céÛÛﬂí>!˜’=∑õ¶ÒÎq˘[£iÏ˙Ókœ^Û}·í˘“ÍA<6ªl3∞¢D\8Ûê¡{sÅÇ3wLìMÊ…¢“
awTãßnmΩËÏ&”^§∂±π9ëT≠ü ∏6™•F»å?ï”nÜ&Ç$˘éÈ¿–µ§]ÑY@#Z;V◊ì∫Ëá”ì¥s:∂m*ú ZS-ú¯≥JXne*˛ÕqŸÎI“
¢ï†œA’_d'™Gwiæ⁄⁄xtÊÒ4QŒÛ˛$Rè[G†%ÆS…CGcC‹06dNë≥Aè†º’KtVM&n:tg#O:˘h◊ü¬$Vf«Ä◊¯E‘6€¶8É3[v ﬂÍ7ÿ’©Ævêóﬂ2ÍS:◊Y⁄π∫øå:|»õñ61[Ç8≥úçDmHl{Õ0∆Qj€PP`§¶G¯‡Œ™ÕÛ"ôÅi"¥]úâÌ¨≠¡pË≤”ŸLÅ’ JO\≈∑m	vcf≥¡,<ÕX’±D~‘;>’EèÊ*`•©Û]erá√÷†â∫¬"î∑9¥ö¬∏¡¡\:∂ói≠TvïåÊ8JƒºÇß3˚ÛÕz“ÏÌ[q3}§’≠Eb8Ù‚(L2Kié@
"/˜F¸8€å£–ãπº€jÎ[yìŸ.≤X&ue¡SóÜÀJºÀ0'à´xÆ“Hq-ÏôÏÜâ Ör∑Âƒ!NT(Xµ1¿Sﬁï¥X¸F≤ù^ªU?„Xs§ºÓ≈Æãõs∞¥ªy√˝cá¡ÛôìÆ°’ Ihí¨Cyùm»ôÜâ≥uÉô◊ajÒ–≤∂Åã‘ñèöODNi,K[?Êö±‰oM∏ÖHmN‘gYüÌôuÿŸŸ∞bL=∂@ùÒ)Ò”MŒ±Fß°‡∏K§€q—j◊mÎQÀ_úàõâ‘ﬂ’S÷®'9}√∆∂!o&	É±,3.‘ém4@]»¬^ÿu±≥ÍÃ:â–Õ}=b¶¡.◊:M˜`x–˘ bÛ©á*0^˙u=ﬁºÆ˘(ﬁ∏´I.Ù›àñZx6Yâ€~ÆÖﬁ`ÚYV&AMŒ!"^ãåÌ@fÈ‘∫+O∆≥ë-h™ÌÄÛaÄ‰d¬™-Ü™ÌÎˆzm±íny⁄n—\<VÎX¥–LD°z>ã:BCFÚÄ%ÕhXV80óaoÑd#‚€∂¢”ö√ÊŒ8ˆZªNÛ[i(öDˆoç‘ºÁ'Ñ®a€àìS5lZ(ï“,Iç©"ó¸qm8•k»í«U[”u>ÓJÉ—|⁄7,ºöë=AÍºò"ú◊q‹Z˘J<‰&Î”È M⁄ÒgÆ"LwûÆ,Æ$Û§)ò}AØI∂)≤€	ˆ°©˙Rﬁÿû˜∆p å¢™o!&\Õ±$Z”I2ó◊ëù9]ÅfÖXË¬ZüS˘π…0"umY&PW¥Ù§·cV€‚»s;YßﬁqBl·¨ÌÄ“Ssª÷H¸$≈±†Í
« +nı|ÓG∏%ú„¨±Ì#úé"ZÜ\_–cd”å[}Iöª3S∑≥~uh„|‡E’ıLëptƒ˜ßßrGÔõ®3 ˆT÷<ã„çâ…O≠5†1ÈÆèiƒäçE“IC–E≠í±‘ƒ0Ÿ®‰›4“qÀ≤*–¡F#S®—27[Ï¿D◊Â÷ƒ†∂ë°AUõ"	WñLZ[ò√¨zúÖÅcc'Ä∞ßGZU‘Ìæ< sÿõyïp}ÁŒ„/?xı˛˝Õ´˚”ùÁ˜|ÚÔ??:¸Â{ø2>kÓÓÏüﬂ…~~Ü˛«{ôG5uÂq¸˜ÚÚB"$aUç)0(P#îEµB•#‚Ç`óémEu‘REEQtp´Z‘∂⁄9ä"®∏PW∆b°j’S–∫ V•ÍLcòﬂ˚¬iOùÁ4˜ºœ˚›Ô]~wø/áª˝<kyêÓ≠Àâ=Áﬂ)T⁄˛P‘\æß1ÂŒ—‘∏ÅÊ•ÎﬂU6ùòryä˚¿Kz°‰©˘dsu”Ï“ï·ú˛¥:v|Œ_√ZGw∏9A]ìî±f¬ﬁ¸≤°∆∞s™l3«e$ç´òszÚ?”ΩœÆΩw„ˆ"≥5dÚ∑ı˙⁄ √ÌÆ}\˝qø
óí¨9eOJ™s∂ŸL∂—<€øË÷º≤áŸMìCù∫ü\π£yŸ§ÄÏi~èüàªteπ•„æ)[Œf]_y¥qÑ{˛çœßøˇlÔ¬¢iæ;-ó¸`ﬁUè€#Jö?u\W{Ù“§ÃŸRPÌÆ€/\LüP≥˛ﬁAMKvl?ø†ÄªïnÒ∏vdÛlSﬁÀUyôÔß\òª˜dfpù>#˛ÃÿckØ:u–—¬“òÃkæä˙6=ÚUﬁ1«∫˙a›÷Ç‹ö)1ÔƒyUZ∑gµ,V‹‹‘'|gŸ£¡yo◊|°pªUQ;2!¥∏ØüB9ü´è:î⁄–:4A=Kıuﬁ˝;ßT{í-…Õw√ö∂yõ±˜⁄{cî!s7,Ÿ4`≈hÛ'/ ü«lú±X©Øò}Ó‘¡Ëâ≈ıO÷U∆&•\?ü>^ÏkçÿVêíæ∑qíœ‰ù≈ó<ˆåX|Ó€ºwó4&kÀKÛ´ÙãÊ'ﬂ©^V≈„ÖrRŒ§	*%—[d%Í»ü ŒÅïÇëÓQ”XämW\h‹ky\)Çzí/u"}ª‚F!øQ®R–rAπ¢Ã_*“—~*§È\u@ª“ÅV—TJ¶»_'˙¯5≈ô“^sØß·øQ®\pÁœ7ß¿2¡±Ì]L´"Kê»N¢†EnÜ((` …§V–æm‡œ‡¿ó‡9¯ÿ>üÇO¿¡«`3ÿ6Çè…˘ˆ∫O!âﬂrL∂E˙ˆ=.ÿ ÷Éw¿€‡M{xº~^ØÄói!uaoó…ácﬂ@˚Üm%]Ç]”NY˘ˆE∞º@gôÁaüœÇg¿”h˚W∞´¿S‡	∞<èÄ`9¶nWy[¨µÜ˝ÀäHetàú8•å‹À‚îCT üÓRDf4k•¯®?HÊ !1¶ïó⁄V^ìø«∞∫˘ˆ¡√^¥µÑˆ∞Gâﬂ≤∂áv”,é…öì=ÌnØANôr_R€ªPf'¯¯9Í¸å˙3w¿ﬁ}ºC)jØØà¢ìÎìë∂†‹fäa~ s"“&îﬁo`Æó◊1≠£~ÃµP÷Ä´QC!RˇÆÇœïH-‡ï,“
‰Yé‘|pÊt)Ú‰ÅK¯Ô
≥ıGn€b(ã¿‹ˆµìÀSÑ-“iπ?êcÊ-˝…ÊÒª¡)ŸH…¶„úíEÛŸ´Ñë)è|ﬁÏ¨…)"SYëw´\Ú#pÕEÆym1¯ôã\s†¸úŒBØg∆¥ÌÎ|ÿƒr…m1îîë¶QfR2¯»ëg?≥üÅ∂M•©kS1˚S—6Yi
 L'Å¿Ò`8L«Ä£iˆ˙hƒF°ù#aßÄ#¿dœ`òàô˚0æ∆Éq‡ê÷[‹“¡®î?bGÑ= å£—õ(ÿë‡õ`ˆ≠\Z‰5'€}¡P0¥ÄΩY)v/∞'˛ÅÜ0aÄ˛‡‰«>$~À1?¨–∞Õ†/93}»ãŸùWºH&Ë›xåDÍä¸ﬁP∫¿Óz≈¥≠ÉN`G¯ˆD.–tkßûG«ïÏQ‚∑¨πêëGS‚∑Ï—ÿûfƒnîmëÀÿAπ¨3vóî†‘Çé†t ’∆TÒÈ*Ó(¬E"®¿ﬁR†fÌOÁﬁß≥ö≈µØ‰g+?%¸ÁGMÇüª\ò¯ª¸Ë˜qÛˇ¸uëØ[‚°$T/«„<Ë√'¥#¥í'KæT$P5Î‰`–Ú§i∫j9›ëu-5∏éÛz‡ÍÒ‰†Ê≈’ëS:Q'£ñß…ãÌŒ‘Ÿ[À”’ÖmoÚÊz∫RWÆß-/_ÁÏŒAÀÀ⁄ás˙rêxÈõYyÉÉƒ«üÌ^à∑X0€°à∑d€8áf’“¸D|,}»ˆﬂ¯ê"ö…AÀá°|úmÂ£QÀMÎï|	iπÔrÔOp æ¨O≤rÜØnjÂ∆g¢}≠r¢¥ã‘#Z£$ï‡ )î‘´˙Fuo“◊U◊UªL≥…`ö®$€—Àv◊æVÌÙÚÈtï€à~@§A‚MÆ€É{ÌK:_O•≥®9Ì|∆œtV<„v:»kS∞éX5™"åëﬁoÎ[ÎVv“—ÿ(?£á5XB,}¬B{¯tW©{
L7WwV˙:±›#,¥Oà≈›#íÛ∏ªπ™Xı!KSﬁ[4wR¬í≤ê¸d∂“ír∂ƒnó[˛YnzaDÃñqπáw,∑FòñV0mz^aﬂ±È”2Ú	9]-⁄U;oAvÊï‚]µôè2+u‚.l„hﬂ~ö!öçËË†ñîRîF–|•R‰ì∂ÉR¥JçDÍp≠æ•¡b±≠ΩSyºlu©‹ãT≥)Ã$HnBò‡¶‘Ÿ‚≈Ø¢«m√ƒ}Êe¬ÚÎÇÆ‡_ö?k¥œØ˛TÌ˛$ŸüB-®ï· 	≤ªààÀˇz3aAÏÆÕõ-^q‚UîxÄΩ≈€Ø\ˇæ¿~{b®}ê4Tj·ôÌÔlprrpQÎHêÓÆ;tÜz◊€ûn.gùÜ[ )HÁ*tp5zÍÎ™Í™⁄&´°•™A∫Ÿ¿∂¨#œòãœìI#òxñBDµ™ÕvW>ıs≠…˛Të˚*Jòˇ≤f‡òHeœÉ6≥ÿ˘âª«Jf˚À´õm+lﬂeÌ±?w>/ÆRv	Á6æi§JÁ6∫PT¥è≥VÕ¡öípGºm–‘ª:&ÍÜ;(U˙Dß·*£"ë\ıuñj[Éæ¡boê[hii¥¸ó˙Íãm™
„Á‹û˚gÌ:Œm◊:6˙o]w;W[∂“Îe@1Èà∞πvuä±8"lâdÒO£!F4Y`„OPÕ0¡7ÉMl¶.æåÕ¬}0±Yà¢!⁄v~˜∂#>@b/ÊÀΩÁwœw⁄úÛùﬂÔúÔÎ¶´OusÌ>õ¡.z6üX,∑ø~…Ÿoﬁ,J∑ w+3º:ëxG"¡´Â∑#˚Zë¯TﬂÇﬁﬁéÏ	˙•ç›»Ë‰¬ãUK5,P¿Ô≥
Ûm⁄æÓÛÃl¢«˚:ù6ë,iÎ}~>`‘ÙÆƒB≤—B%,ı—Âd˛˚Âd1ØœeÆWÁö/‰È‚‚Í"ÕÂD9¶:%¨0"€»s&\•ø∑Jwqã.‡∆e o≈^E,zY*vYæ†∑¶å0√µ∫C!÷õ96ë‚«;…‰‰ÓX”÷~  >ÛÏê∆√ü˚¬é_òﬁπ√3í—òíh˝i0ÒŸ‡âìÍO.^≈»ÇUå
W⁄+∑&&•†wO˙˝ŸcZìâ·2),Î≈ÇñHî˘ˆJB±àC›j∞8Z∞Fl‰âπâœ68≤M≥-ŸV1€0Kúfu∞ú¿‡B∑|∏ä+≈˚E∫Js ™C ˙Cõæıµ≤Í€`}“#˙,/]åck8tÊ¡˜ÙWVÜ{œé•Êˆc{O¯ΩWùèÌ¨‹IÙüYöãF∑ÌΩˆ•˚ÊÁ∂”·}óz¸ÈyØuëÁŸ›êâòùb=R	dNˇ±iÉHñËÍ0áQΩñ”Qà Á·
LTŸ<O·æ|ÄméälbYñcy¯±h„Eù`£T‰πëm—â:ñßEZRıB#–"NbE0ÿPUåhÛ’aüç$∫¥ó+ß/Â{ÃP™_Ë˙Î+ÊµÚ‚P›>ˇQ˘ÆπBbô ŸsÄ… ˜^˚aÌûÍe‡©EºM®ÕmlÊ\í”¶∞	Ûjr]w⁄fËqè…¨w+‹îúBáQﬂA\z≥áÊóKÎl\óv^—∂¬B≈Ûh˙≠R˚C÷´¨ì}ÉÓÈ`, vΩ9ı~ÜUu‹tH}'ÂõÓ√#…éÒL€òµ¨§w‹>qJ∏va7t‰O2\pÀÙ∏L≠Ò$QÆjÂŒ|rv,á»Ü˜‚i∆˙õzBvÁﬂõjˇˇÕî=–+3)m-À	÷÷0®YŒ¿HÙ4√πP≈‰P€kXN‘ü´a8S√‡w˜«∑«wE;ﬁ8:˙˙ÿ„? •ã√∆°∫ãBù1 µ·Q4
)—‘Ná°Nõ Ù"Tè˜_< *øC`ÆH…(îU"B¸œ¬o‡√äû}k◊»Üﬁﬂ±((Ø.ùûí€€ÈØÀïœÀ≥Béª§D´5Ù∑  ÄM˚
endstream
endobj
113 0 obj
<<
/Type /FontDescriptor
/Ascent 750
/CapHeight 662
/Descent -250
/Flags 34
/FontBBox [-168 -218 1000 898]
/FontName /Times-Roman
/ItalicAngle 0
/StemV 84
/XHeight 450
/StemH 84
>>
endobj
114 0 obj
<<
/Type /FontDescriptor
/Ascent 770
/CapHeight 718
/Descent -229
/Flags 262176
/FontBBox [-170 -228 1003 962]
/FontName /Helvetica-Bold
/ItalicAngle 0
/StemV 133
/XHeight 532
/StemH 140
>>
endobj
115 0 obj
<<
/Type /FontDescriptor
/Ascent 770
/CapHeight 718
/Descent -229
/Flags 32
/FontBBox [-166 -225 1000 931]
/FontName /Helvetica
/ItalicAngle 0
/StemV 88
/XHeight 523
/StemH 88
>>
endobj
116 0 obj
<<
/Type /FontDescriptor
/Ascent 753
/CapHeight 562
/Descent -246
/Flags 35
/FontBBox [-28 -250 628 805]
/FontName /Courier
/ItalicAngle 0
/StemV 51
/XHeight 426
/StemH 51
>>
endobj
117 0 obj
<<
/Type /FontDescriptor
/Ascent 770
/CapHeight 718
/Descent -229
/Flags 96
/FontBBox [-170 -225 1116 931]
/FontName /Helvetica-Oblique
/ItalicAngle -15
/StemV 88
/XHeight 523
/StemH 88
>>
endobj
118 0 obj
<<
/Type /FontDescriptor
/Ascent 750
/CapHeight 676
/Descent -250
/Flags 262178
/FontBBox [-168 -218 1000 935]
/FontName /Times-Bold
/ItalicAngle 0
/StemV 133
/XHeight 461
/StemH 139
>>
endobj
119 0 obj
<<
/Type /FontDescriptor
/Ascent 701
/CapHeight 0
/Descent -298
/Flags 32
/FontBBox [-167 -299 1094 827]
/FontName /NKALEC+Symbol
/ItalicAngle 0
/StemV 0
/FontFile2 120 0 R
>>
endobj
120 0 obj
<<
/Filter /FlateDecode
/Length 19978
/Length1 39636
>>
stream
Hâ‰W}t’ø3ªÛµ;ªI©ßBŒ±ı*ÅPQêhå§1p,árò›}õô›ff…ÜVI	îA#—ZöZM)M)•ñ)4â|à-(•Â# *• ”HÔõù›,–„©ıœºwf~˜˜ﬁ}Ô›{ﬂùô7¿ ¿óÒÊÜaè=~œΩßÊÕ`∆`ÎÃÄ©≈Äˆ”Ä∑‚`T—·Ó!Ä˙[©Npéïˇ]YúÄÚI vL8d«∏{$Nñè˙√¬ÒXË‹wñ,F>†rAX/è∂ﬁ}`¿SP µ ∑N,∞™ıã"D	›≤≤`]od‰]Ï ÛPnãD≠‰*OiÚN W˛ì	”bÑ™á™˚cø¶≈ÉäØÿWåÛ’†MœFï§.íﬁ∆˘æè˝˘Qb)Ô&æ"¢˛ q]LâíGŒ' ´ì®Ô“„¶.ÍÔÍ'®æn˝B~ø6Äew†˛E›àÎï{fxû˙∏‹uÃ
‡¿Õnaó‡àe)dé¿Ω–YM˛®êô˘·M„R\Ø4L@π≥ák∏ÇæÚkŸs÷ê¸Î¯(Á`/‹ã`1;¶BÃÄ≥L3<«,Ö°ÃbÏΩ÷C3¥·5
Ü¬Lhtµ@7ÏáÕxMgw„à0álLÇ2‘j ñ»&∞}”~v,€ƒ¨ÖvÛ2LÉ<∏››ó‡	ÿËäBº ŒÄ'›YLxGÂ2&Z0ûùƒ≤R=\vèÇâ‹tÿ†¢Æ”Ï°:ôD‡á0ä¿r∞ãa+Ïg61ô˜òRvÏ`∫ôΩL1Gkò∏=i·6¡-Ïl¿É[`,∏]©˛bÏœÉ;—~zÖ—˜›‹ZÙ2sGá5∞€◊@1∑YΩk(ZR @	÷;ë◊#´ÊJ`<•∞üõh·S¸Lªoì´ô)@©ökc(Ø«ÍÔ3˘—0ÿ};;É_Ñsm‡`≤PóŸjn#sñsçè~LWÕòTL&A)∑{n¬»Fúé;íó∏RxÉ Ê‚ﬁºñâÕõ‹iVf'Ú!8Àùc:ô{¯ØÒÕL'l5¥0#¯†õ)‡∑2£y?¡u¡ÖﬂÎô7Ü‹ÖéçEßßA,≈‰	‹Ñ#∏ÅWG„”uXÆ99»UîG,*WÑ¨E|5X¥#ÆõsAà)ZÿŒX/Ëv‹å©Ñ•ì_®√Á«‚Øå‚ÙÙ—‚=öâà ﬂCæ≠–g£ë*y/fb“SØg|_è…‰=ôò‡ì5ÇÊ…£}=&a-¿¯2 ©§Ø«ƒîâ	ûYãG§U}=&¯QJ«D¬s÷}ò'ì˚zLR'Iœ∑øÿÁ7ó~”1îﬁÇÓRfJnûZøÓ0çÙIìf ’◊ô)Ùõè≈eüpe∫∏3¯‰‚såÔ4|√·øá¯Œ«/ f/Êr¶\)˚¥K¨o¯êL¥Á˝úòÙYKUã[!˛ÅÉÛ¨vpÅÉ¸°Éã¨qp±ÉK\Í‡2ó;XÎ‡3Æpp•Éœ:¯úÉu>Ô‡*_p∞ﬁ¡’ÆqG68¯¢Ék|…¡ó›F¸«‚›Tµxl¯+|Tç%,ÚI#¶If'mù6î†•∆c?’XXç©Ve#÷‚Ü˚ô;®%Ø
!Uâ‚›œ9¸-3¨◊8SWB‰uI1åxE nEöR¢F¬÷/[LËÎ=∂`®x|¸e™?Øàm‡C§‹ ‰WíÆ%LjçŸÃõ$à”ˇZ∆≈"Üm◊F1ö–,U◊*#”ﬂØ∏AmT¥M^mP-§Ü√øÂ	M#÷f>§ŒQC‰w"˙m√ã†ŒQ4íﬂ{ÁH⁄=[D¢i*ƒ¸É◊6k1,í‹*€$Ç~œ%…m˛ RU)Gk¨Ñ€Œ·Lz§E|£5[˛(ñ:“oQâaZÜbö;˝A’j$m˚ü<)NùmIT∑*Mbµ…j˝D∑©OÌ\"Ü¶ü∫â≠	z#÷.øA¬I¶˘n	}3˜»iU ˆ iE ﬁ.Ob÷>çEJ~õSbÂ˘≥Xn(!˛‚3Hπj⁄Fjxø?à?∏ˆ^Ÿ¸ÄΩ	ë®bÃ≤˘;.J≠w:AP—
°∏U¨»_=Zºú∂‡já“≤˝Mr‰∏Ò˜ThCç&À·£˘rƒìf	˝®/-€ñÀ(“ƒÈ¥¯\+'«%€:¯ÑúÒBâôÔ˘zù@z“◊Î“˜%3EÉ1“ßh
ëù¡“O˜í<”K÷æ >≥àïR¸0õí‰GŸ4`ùıRJR™ˇê3$™ÜŒıv¨
6!…ÛÊ§F.xlol´?iZ‡i=i…“/edí¸WFXóe€V{§•í≈H≤3ã¨˚S›Æk8I~zX›)ÛÌ+æ^Üﬁ\ÕÍX=¬7RoöÙ\Zì]‹NsÈ⁄ûÎkj§∏2oD±›W&œïqeîπÌÀm†|CuÿﬁN´U±›[ÎiÚ÷Jª§Vy§‘Ë≠Â <˝±≠ÀˇMo≠∑V.ÒOII©’ÎxπƒS*oñZπ2ﬂ[®WÉ≥y˙€3ùxq*_'5rER#më
≈©ˆ*xó^*ÙF<]¬IºŒÎ]˜	Î±˝3=¸_™˜åt÷uIlgõhdß‰6ÂÏíÈ≈á≈væé⁄·ç‡∫”S~ãÌπ 5ÊÇß∆7ƒ”%oŒŸ%ó»%æ!ÙÓçdW ÂuÚ:ˇÉæ!4¢ﬁà‘à#3Ûg∏"⁄/◊y#¸mΩ◊≤´ºé+r<]¥ﬁÿü⁄«ˆ!r‡pr á{ø˚.l+Öœ_Ú:˛Kc˛-¯£4Æó1ü9e~8:µ€:ˆåkpº¶€»9ˇòà%
Øoómê]nultUel|˙ï>ŒRö∑ùﬁ:u‡‹πày'v*ÚC;Ô:^º¨Dtq˚Ñß/‘‰Nû,Ôì1®“¡‰ûù◊ñ◊Ÿ]∞ypKÁÈó.Ó€∂Ì¬v9Ô–æ8é
™eÈú˝È≠√ûæj:¡’ˇ?‘ólS◊«œ˝∞˝‚ºƒœé&eÕ≥ÛV¥¥À»ã„á—íQPi◊â$|j]€4-≈v0‘– íJ®ÅîMÍP]´j®tr>JÄmi%òà&]©@£›÷d{Á=€$EtÄÑTÌ^Ωﬂsﬂ9øˇπÔ9¬µ3Ωå(áq’™iF"uˇÔåôZ´:#x·í¨¶œÄ¡,≈J^™VzÍƒ≤êÀÈn¨d˜z6—G∞èi˙≥mGäøˇπÊãÖñ9èPÌ'…ùm≥éåY€ª;0Yöıõ—‡D_R@’ÌZò∫{V+@~ÈçZ©ÜüÖÙ@"#€µ>O0±–0F*á=∂ﬂÀjj»\dƒ¿VG∆ü◊):£êQÒ~ù⁄*ÑèTwó∆HCä'\pDÚçì´;Z}>EôØ4#o≤Îå÷Ä¨3rÕ1K‡∞:Xµü	 •„cSdàëﬂ<¬⁄v|ô-cÅÀÌ ;3åP´Î≥yãdÙ_UúdîÃÌÎ‹ıÀÛ√»»G=≠>–≠#]°∫ÜóIU;‘ÍéW´›„ÁŒ‚÷\5jR»ò˚IÌ¡ãì~ŸÓ±N:t}d˚˚€¯·\e
ÑTÎù‘2ärπ ≈xë÷§1˙™vπŒuªJ‘“œ≈˛Èk´≤CŸ&œR°Gh‡PMVe´““°3v•mb≥yÌô±Êë2ä+*f,-áöq=3:Èñw¡±Õëª-’Ó	üÊÊ"uÀ∫®WcÃo˛dˆ¯7ﬁÆxr¶U∫Xø:gS°’©jëµoU˝äÅ(é9“™~»…{oøîèjå_àü*ã'9<›™,€¨Põ$d‰€‰πË≤Û∏^ÓŸ*∑ÏAFªøSc¨ÛÀõÕÙ¡ÂFd¥ŸÑ¸ÚFﬂ!—ÔPπ∑.‰ÎpKæçj∏u+ÊÒâÁ≤º⁄X[•ñJ[ïÎ—Òf´–UÂ®ïê±Lip-PE[ù\m∞|⁄;H†ho•üƒSÛqöqéØÓ°3AUñDÅ†,[«é2ú›ÌmtÂ%€è'?∞z/»-NdTRåﬁF{xS)wlz~≤¥≈&·R
7Åqˆ≈≈Î+^Üår∏µπ⁄Ì∂»àtòùÒµäñôÆ™â∂!∆‡∏s®ÃU\¯á‰µk∏áìqdåxΩ•â¬kM$ô`j˚≈‚I£Dê—E ;òq¨Aˆ4e9«@Û¯Îüz∑*™Á±?ïGáh∂”™ê—¶ÂQ∂úÖ√òG!„\3≠|W≥∂f$dú‰)∆∆J2N∞Zû„õ‘≈b*ÏÈ+L~}=ìGØ*%qÆçuCcómJ€—1ÿ≠ÍåA9`æ—dò≠ÖzOlrµÓ ÆÕ«ô5S≤”ç'7IÇ∫∞xa€ú9o·|Teô€Ì$ﬂ_GÒp”q‹{äº‹—R#Øªµ˘xp◊Û„7∏ÊUÌyºb…O}eﬂ9vkd0®≠\ﬂÂ˚Î/ÃOœGmŸì Ñr âﬁÛß¶∂_í"≤≠Ác'“x$êÀ¿,uÍÛÒemÔAcú}>≈XŸ˝^\éåµ_&bOØ6’‚∫û˜˜˘ìΩ£ß≈W¥o9:–ªk≈…“ìππ_%œu«ªKc û∂?‹kt-Gˇ÷Ur¸Úké_ı]YUﬂè{O¥4∏ ‘‘∫v˘¸$!∞Ä dÑ`◊‘⁄≥&∂±∂§÷µ?2££(DÙuMπ+…±∑N¨Ï⁄Î%VZbÈÌ^zì›∏ππê‘é®ÌvR1PN±AJothê≥îo:ÄTﬂÙ¥ß@¶“ñ˙Ë∞0öÀÇdTyèÖå9”Ünn.Y√]*jåE7π*≈HÜaXÏÙ7EÜ—2 $yÀ0í˛lkùYÂ¸ë|±R "ﬂ6¨‰j'D-Qêj”åpÉqö\?êÇ	1™COß;›6åÓNh\õx…hÀ·ö;@ªìB¿Vâ9aLÅáëœÉØÏôÃÖ'a,Ügªf%¨Å ºaÿÕ–Ì∞ˆ¡;Ù¿_‡úÖÛpÆ¿ø!ALƒFÓ#Ö‰ád
yÑxHôCÊì:ÚYI^"&ØêV≤ìºNˆë∑»AÚg“Méëè»i“G.êK‰*˘%‘D-‘NÛ©ìé°–á®J+Èl:è>EFkËí{Pü£+È4H7–-ÙU⁄NGﬂ§Ô“n˙1=C?ßˇ†˝tÄ&ôëÂ∞Ô±˚òÃ∆≤âl*+a3òè=¡∞•Ïy∂ö5∞WX+kgo∞∑Ÿ!ˆ;…N≥(ª»Æ∞ANπ»Gp'ü¿'Û)¸«ºÇ? ü‚K˘s¸Eﬁ¿7ÚÕ|;ﬂ√˜Òw¯ü¯A˛>Ô‰]¸0?∆Oè˘)ﬁ«£¸Ô¸øÃc¸ü¸_|ê_Á	5YÜ¨v¬ì7ïLæÓ†Œ$ãò®Ä37õ):ß&"P¶-&¢Wz„ÃPVjƒ#õfÈGV˙˝Q31”º7Îá†Y±’D≤1ñ÷ÀÄ≠b&Z§,Õéµ˚†?b¿´ê™iãv’,ŸËÕ§˘¡ ¥ˆ;Qx˝»Ö*Ò/©FC≥Våb!πHÅá¶Pè-ËvSÜåYYƒBÃLD%¢ñ;Ãûà}4Â√T¨€ë]D-Z-∫™≈0°^›é˝åCïc,ém¬çf#z£FÉn”Œm¯,ÃAì∂éìêáß+`áy;ûçÿ∂‰ÌﬂI1‚¶ÿÉWó‰ê†ˇ˝Œãp˚.√˚
ÅÙΩ—s†ñ…]º ˙ô%˛ß≈>\ãP$£ñy]\™i˘w§Ö„◊›hq”í+©®≈WéZÔçñÇòvkãêyŸﬂ\ÓRIF3}”2B”bü'tWZFˇo≥,È®Ìú˛Ÿrkïi-i£Œ…∫{ø›$í—“Å_æ™âè—¥‰ >è7•%*lÏd˝{å« {#Ö±•_˜◊*J?-˘ªªì‚ÆµRΩ)∂¶§4q¡ó…dˇôØˇÿ&Æ; ‡ﬂ˜ﬁ≈>‡‚úì‘;ÉÁ\~ê¢çUÁÖ†f¯B»∂li˝1i´Œ	
c£`÷nDSî\B‚$ìCÃË$g†A&˛®÷nÖ¢ikˇÁÿƒ©ñ6≠ì¶b+L©û`#®nnÔùÌ èj[•ÌY≤ÏÛ›Ω˚¯ΩÔ˜}üQñ2S˜ZùÃÇS∑∫¬{wÁø–⁄≤¨F„ËÑÓ±‰Î€Œªñùì∑ˆZWıÍ+O,3À k1±pÄÕ±!ÏEô[.lYÑïñËöÄM•ı/@I,uCÎŒåÊˆ1Ÿ<“U^T‚ÉCÒX≠§äíCÇ7⁄˝öﬁth)Ú‹&¿ã§ÀV_ñE‘ó2√jb∫)É3ÀœGèruÖÂ·a∑-ˆ˘tÿjèèÆê p!%!¸(ÚKÌ~hgñÎ—é÷∫ºÂíu‘3Ìæd’\Øvïû^Õ≤x§n±IŸë—„1ø§7yÁ`D2f˝6üîM8≤s˜≤EÄÖ˝vì≈™É*©E◊O»˙’√,’Ït€]Ko∂ëZhG≈YØZñZ¨ıÿú_5yÖeÑ3ÊÖvüŒ,n_Z∂\ππËÿh;<S’aç√PÇ◊¬ê∑Ã¢4)Ó)=>u‹MW•"íNÔ¢¯Ïi	ÊçºÕ&ªmÕ!≤E_ÇëÑ7p&eøyıs:K.çPã|÷(•ñ¨wÎbVy¯ú$€8éY¯Ç•/T€»7ÎGÀKÏ√`N.V-‰Nû‘∑·ÁÎæS¥∞ãkË¶uÑ?—ë‹æ”`ñî9∂lô´ñˆÊÜÚS‘"J‚@ ®ø‹o£4Y/OmÙ˘&Ù¯Òãk°”ÂrU¿º{∫G1îµUi7?o$mÃBÍ/+ÎyµÙ‚»ÌÊL$~n‡Ã€'oøøŒ¶•∆~@-Í5êt6∏≥(Û"›/PÜåÜxÿäÙOÂÚñÁ«∫∑äkÇ€M«–¶Eê.◊¿‡∏t‘Yg*ùZÏ‚˙Ôççó˚j∂Ô‘¬º“≤√‰;Z+EÌàey¸ÉXô‰rñ•˙™∂_´çıªMemS}ïat®≈å%<‘R_¡,Á˜§5≈´hÓ≈á-ã≠r÷ÂŒº>>1æEÀDÇô?.]~ß¬E‘N·«Ã"hÒPZœúˇ ßr2åÈòm:ÉŒTOfr%-ÀS6m≥œ^ƒ3õ@óqç1µ°·q7*Zr≥f¿‰£ª p[T°ñˆ&gY∆#I∂»ºˇ∏Ëeñ
¡P˚¥ç é˘¥Ç€$Õ¯ä5.±ƒO`∏¢ﬁyåYz@UYÒ-–∞5«lûÑK…ºvtb ≠SKáJ6ªó∏jìΩñ≈å<.éÓßµÌíéUEYÈßRYPqìeyV˘Ï¸ÅÚ©J–E4(bP€0Ãq£'èó√PŸ∆.¶Ò2›ÂayÑéK ≤»÷∏0K˝¡È•µØﬂ1©Ed7*ù◊‚:$üVÚñuÆ®èYstj´yÅpyüî7_€E-ÒÈàﬂ≤[ÌAUÄô∞8iöWn[≈:?`&U¥V1efGs,Ò.©/M˛M{Ë∏®Ü¿,C‘2`√ùct}ô5_ﬁHgñoæ2MÁÕ#VºY/x4ÀÔ;hx=Q6.qPË∏D4#h
µπ√í_	[±K∏±sV¸Ω˚®Öo√Ç≠`ë®%cYÇ”ëÜ‡+,®Óà)@√8µL^+éKù.#ùçKYaé”íø)U\=®ÆFê∑®<Ñæ~∫ã˛|ÅÆí
„ª Ì†µÀ`âeIv¥
Àê œáí.I◊°öüÒ(˚®%®K¥úÜ¡XÉè‰srBäj9hÂdÃ)Ç“9O-BﬁRôê®•zb ÈØòœÌ<m©•ñ>·8ãóNpÑ“ìf¿ûÿ«‚Ö¸»6‰L%3C`Õ1d.ﬁêj•a˝hQ◊êqãóB4'-≈xiN¶ÈûY.¨∞ƒ± G¶˙%C&ñZ“ˆ∑Ön/Õc
B±›nB◊JjÈë∫àk≠¥Á°™œ\è÷≈Úÿ˙´ïÓÆW™'~Ó[W5ÈÒø¯Á7cÒÖ⁄gæuqˆlúÊ‰–¢ctøóËKEt'Ë†BˇÖN4lœÅñ2Üßﬂ∑pbåÆ/auU4€nÅÊ1EôvIûàãÖ<VÇy∫V&‹]+YNT-Bk˛8ﬁqg‘Ò‰åH-ÈõÊ5cœ·∏}ﬁK˚ÚõáÕﬂL3ëà/‰ö˚Õ…‹…úÿË˜VMÊr{Œ\
TÂ¥n” 4ÛóMéÊPu$Ø*˝'ÔNn∂C<Òç.§ˇN◊JÅF:[+hlâ†/˚ˆóØ«,ã⁄º-"¥’ûÏU˘ﬁÅ‚˙b. ¥Ü…[Zƒ¬˙Ç1ÔEi∞hYÒ/1À›ΩØ(V~~H”¡*BÚg 2{Xûl·/ú$Î´ÍäÁ”GbèıÄV¨€?zL.|AôÙ=XµOŸf9Œé^fó-¥˚Ø,]Í«Z~´˚-e&/Sóxz±éC\á¢û Áò*ËZD[i·Ó;˘QÕ~Ø%®?»Ç“˙ñÇ•Ù˜*Z⁄>∂◊BÀwJ-cdûZ"∞l±j˛ßŸÛÔ∫È¬’Í˝C-Ê?:qØ¢Â!;∫˚[—≤AV-K)h¬
Àˇ≤}ÏæÚ¡—
ïZÄWˇ?ñˇ∞!é/XÑO–Çi8<ü¶’|#|Z`;›1>œ“ÕLÙ¿~x	˙`"2úÄ”*úÉ_¬Ø‡<Ã¡%¯ºÉ[∞ÑV°r‰Eè£‘àZ–ó—◊–^Ù=4Ñ&—qt˝˝Õ†∑—ªË
∫é˛ÅÓ`ÇÌ∏Ø√Î±Çõp+˛~
?ÉøÅ{∑Òwq?≈Q<ÖßÒœ¯-úƒø≈ƒi|ﬂƒK§Ñ¨&kàH§O‡UC>Kû ç§â¥ëNÚÈ"/êCdåƒ»49Kﬁ"ø!)ÚyóºG˛Jﬁ'∑Hé+·úã´„÷sõπVÓK‹”\ê;¿}ˇ_¥WPT◊>˜æ˚ﬁﬁ˝¡}ªê≤Zfxª,
6*¢m!RŸ,†µ£;#C¨d:ô¯◊¥:5≤¿™ªQ@%ëP”JgÌ¥NL⁄äçù…§v∆§5&Ìÿà±e¸y=˜≤ jå¶cÓŸÛﬁæ˚sŒwœ˝˝ÿz÷»Zÿ>ˆG÷≈ﬁc≤èŸøÿvKÂjÇj®S‘jÅ:[-Q™ã’ÂjHç™Ø©ª’ıMıı∏˙Å⁄ß~¢^T/©_®W’AıñF4U”4∑ñ®%i^ÕßM–&iìµÈ⁄S⁄Ìi≠@+“Ê°<*^VÓJ†∆ﬁ`>Bïj$¨ƒFúdpÇéâlTì™bâFâ¯"*U¡6l√â‚à-ÿÒ9ÜÿQ5∞„úä˛Bmòc«:sË«A4EG÷Ë@ã6paÀ*mq¨)⁄ã{LQ0áK´¢ÖÉX©ï0äm•áÈø$z£Äà¬:Fj<uc*·¯Ê°¿/ˇ	L‘ÕDπCqí8l·}D¡æ)E|À8Ëƒ	6ÜV®ù⁄I<Æ;†b<µXú‚àEHQ0Œ

ñ‡(hxµ•∞®≤L>≠¢n
v”lÎÿ«öy#‰Rw‚ql<ñ‚ˇO≤)Í’#·oÕ≈√owêß>n$˙®sÈ!H<8[‰˚Ê46•'o⁄8M<ÂﬁÔ˙ÆÑ¨•¸°Hà|˙cH≤ÍÛåÆ¶TWtÉ˛†wnÇ#)∞\û<à›,ti÷ÆPºAÖ‰÷MHvn<sóë™j˘Z
nØx/¨œÛF⁄íƒÓófA9Éƒ	Yπ?<ﬂèÙ¬Î<‘SïmÆõÛ÷Ï‰§O{;ÕÛN¯qUøëDò0$Æ-ÚæÊ ï]ñÉC
Ñöo¥≈ŒI§wÛK`4é %∑WØπ“Fác‚Õ…πr{"·Ì)"&›≈ô—§FûœzñÁ?è!ö€Õä√^ΩŒ_d‰çµ∫›˛í¶àﬁπß-¿%râ≥_á/™nuu«Öu/ËH´€#’ÙV"9>ni†§"£87Jk¬ÎyGêîÉãÇàdÚâ$˛Ø◊3ÎËˆ¥Ü˜ávÎß·"õmMjz ∏ØŒñêP®óÙóÔ©…C$K˛‡õ÷ˆãT§ææ´†˜/{
[R≠ÜŒµIçGZNn,$≤Sä˜ÁRå2Y“ºd”3[ﬁMÓ=rıÍµ>V∞*sæóÅøP˘âªÙPÛ|Øß>/˜øIb˚≥ˇaGÏùªv¥çù9–2ÆÚ¢N7n∞Â4’^h	µÔ{∆ˆƒ˘z©áí≠ØÃ´®Îÿ‡ﬂπr]fisfyáu|UƒìπÊx__ïi∫Ãà≥ﬂ±'≈Ïπ	≥:+iuc˛≤	i∫·œg‹œÊKºKLˇ‚AsØŸTø∑≠ƒÂ©üó{X Yö∏µÿwró≥“⁄5o‘w%D~s!ñÀﬂT„è⁄ã&⁄û¯[X˜ãìπùH¥poY›Ô4YÈ¨©∫Díﬁ¿µy€Ò h1)"êë_vù1:/∂û¨»Ùxt›S»ù¶ûæ*x£-çî∂j8:•eá⁄¿*b"ëlHÿz=u™beê∂«Úq‘ßW^4,=E.ÔZD‚uç√—·∫O1]"âDéñ’uDÔ qÈπút%^ÎÌlÛd"ÅÆ›ıro„ËxÁ:^ú{∂b∫D·<ÕHüì	ﬁa$´ ˆ6ÉK ˘bh∆Ú‚‘ÃZéH~€3µŒgx<¿˝≈≠mzçø—Â∂äÎ“}V#lú{!€"ë˜Î:ä¸˛“c±òºâW7~?È,â —YHkß™ÚReÆù¥√áô•/†á√‡’I4Yéé/1O¶Õÿ±ëüùzÖÉQYï5ye“IÄ	7´ﬁ1ÕÏ„ÎûÔÏLé|ö}:7k≈!sSÓπePq`ˆ¥Hte∆€)[fúÊKﬂﬂπ‚ÑaŸô‹•WS±‡ÎÏøÕ≈*Êı`\\sÏçdÁˆw„{≈å–M}ıjDQ.f¨√óìyàd|è@€cÜwßÏå°b”®7‰ö˘‘Hóı˚õ∞ò·ÿV2íø*£ÚÃ‹cy{û7;w§Ø&…Ú$íö‚oÜ§|Ë√9 ~˜Zö∞˘pø5•÷;∏F7¯⁄TÓqvAçëbHòqºKºç!yX"ÓH– üÚtuËëÍ{â∏ÜêT?.$ØqﬂÖòÄåjdB6Ã@Vƒc°ôU	<ã0ˆ?Éü√2‰V/√Ø‡®Ö(º
[êaµCÄ∑ê_ÖS–+÷'9|	∑àä˜f7Òêd2ûLD¶ïMÇ∏qÕ!œí˘‰ß§Çº@ñìó…ZRM÷ì:d^€»“Bvì}‰MÚ'Ú6È&«»{‰,˘êú'ˇ$ˇ&ó…ó‰1)PFmèA‹‘ÉåŒKSËD:âNß3$ØõOÀi%]AW”µ¥ñFË&∫ç∂ ≥€ã‹n?=HˇLè“cÙ,=G˚ËE:@äÏ.AIR¸ ì t%G2≥R‰fÂJ•≤ŸYµUîF‰h-JªÚ{Âê“©úTŒ K;ßÙ#OPÆ)7ê©c»÷¨Ã¡úÃÕ‚YKf>6ûM`ﬂcSXõŒ≤X6˚∞<6e.(˜±Âq)Ö2qü≤+r'Ñ øòTo˙‹#D¡|y´«2º’#ﬂ∞‚,‚h«Ç @~#Wb^"óãr¡Ã`àõ0dH¢û∞«%ºM®ÿ0ü@O¬«øP•m—ÇKLT¯~\ä£m—älY‰êH÷f!é!øRE?œåa#≈ÇuÜ¯üyé‰XpÔåı_àkZÏÉÏè¥/U√x≥Tıé è’®&≠∆Ú8PY&ü¢L√ık·R»™Ã€Ç∑*Ø£=±ÒÂ<⁄0Ûk ‚Ú,ì˛ïÂÜ¨De•Ï+Õ<æ~◊S…°Ø¨zR‰Ÿë˚¬c€2r‘ÙCH⁄—ØÛ æ˘®ÜñÎ“oøÙõ˚ìÃ±û‘∫-„=°Ó◊1(O6á/_Í“ïÚ—©¡ﬁkˇ¯e Êè._˛µ˘πeÛKf≠¨&Ä”@ˆg9?Vc»ˇ§"u!yFÍ‡8s≤ñÉ<≤´]¯»~éﬂ8≥˝∫”§ﬂˆ‚eiHlßΩ1∑Ò‰óp’«ÔΩÕÓWnÇl4„·H/äv È…ìD®IÄ˙ßˇñÄ“Z∆	¬ HÖw$@éÜ1‘¶%à` Gq∞lgË^Œa¬4#⁄—VGZp ;T#∂”ãƒ€˛ﬁÓ%π;µjß„¯ﬁΩ˝˜˛¸~øœ€∑˜}∏S"w/∑T6=1;4±Â˜”Ó⁄7ΩB=⁄C–nD–ƒ@∞m7’Æ¿’†/Õπ≠ÕBõ3±\µ¶ WXpi÷ò–¬∫\óK'›íWπΩ¶£$ˇ˛pTÿ=íºØ¯X‘5-<1öa-´ù|’≠oŒ◊.8êW≥W
ü7CsÇ⁄=o|∑§≤˙Ü˛•<Z∏∆ËÚïf¡ÈeM¡‘OòZêø¨¡∏[oÃ=XT‹S630Û·w≥˝oÏ≠ªägÁjº≥—Î/¨Ï()ÓGªìuﬁ6ˇµ_O@]Ù…íy¡„Ìº∂;we€Ã™C¬Ó7›Ùﬂú@6	íÓ˝≈_üyµ∫‰Ÿé"+∂±fˇMù◊|Ó·û\Õº~Á*≈±4€2˘±U’·`$dn»’∂ﬂΩ∑.óèü–üzˆ‚sû_X—QR%ÏÜ⁄y[≤∫∑Ô‰ë∫Êu%€ŒÄ|§Ú$å∑*]π#Øf∑î£⁄R⁄x`oı¡º™∫˝ÖKém¨-Íi•€™ƒrO›>¿y$¥´ aû->X‘¢Õ#Ã	nﬂÒÂªswΩ⁄%CÁÿWnõÊ∆;–Â∆Î´©Ó56¿∂÷äímÊÒvàÜwW6VÖ¢°ù”Óz"îìw®i⁄Ωq€Ω˚™Ï≠¬-»uh∑¶K—`kÙü_;/‚Â@w˛TIΩ¨±ãﬂﬂ?æ"⁄ñgF¬ÊÜ<Ûû5ù4ÍüÒnπÓ∞â¬6ˇao~õÔxe∆1Zæ’ŸÿªµÕ∞~wÚœNˇKû}‰≥«ﬁyw≈;•'PéŒN¬k≈›∑=PørÎæ≥7ÌºyqKîñÅoñ&Ê7wOb¿¥
…"ﬂR˚LÈÚ∑∆ÌrÁ7U2Ö›Y8ø•P%ü∏Ω$ø8›S‰≠ﬂÏÙZ¸(ÖÑ´è†Bì¬–‰…,—#áv¡–:5âùn´âeVÈ	1MTì8WJG∑ –.ø≤ßHsü»iªôÎ}0·ò§Q±ÒoOÿµ=ªÀ«6à:#Ωé¯∞›¡áeúåI‘>6s≠<?k}Ñ•Oê<%ï˘@-U≈0nB55JQOï°ûö’p;Ãá;PO}√∏ñ¡r‘S¡zÿ?Üm–?É'a?Ç√j™£Æ¢:g‡m‘TÔC¬»$á\ç™j"Í™0πï’r)'sH5˘™´;…wàEÓ!˜°æZE÷íı§â4ìÚ(*¨d7È"Oì√‰W®∞~Kéê¯gêèë„‰‰O‰Mröú#»{B©—,ÍßyÙZ‘WEÙzj–ÈÙ´‘§¥íŒ£uÙ˙m∫ò.°˜”ït-ç–(m•è”ü£Œzö¶ø°1⁄Cè”?“7iÇû££ßóXªíçC≠u5†⁄∫ëÕ@µ5õU≥Z∂Ä}ã’≥˚X[¡V¢Êzà≠eÎPy5±Õ¨ô˝’WÍØT`ùl7{í=≈∫ÿA‘bœ±Á1ø@.SRÉO»«RRE ˛∑g°Fπg	5*ﬁQÍF≤nT∆¢Í
ÍıÛ˙^â:ë«∏OΩŸ≠…ruÑP$å*ã;ûg=À=ä,yg°ó2j<K>Ø=⁄•¬ˆßWRB°«2∏–+7£Ôc∞ïÜ<R2|îi6ı^|>öÌ˙Êee0ª#yPqâ∏iöÆ1ˆò¥uQèd®4ú⁄¬∑&ã
ûLR$1¢ƒ$Ù≈;fâÉV±é∏oÉÅúrò‡~à6}6üàœ_20´ö∏¬ˇM?TÀ_êÖﬂ7îı±ï†¬Ìà√ﬂ'˘ÖaQ#Y
íx/‰+xgÑ(ÿæœ˛)˙6√ƒ>¡B“x+≤ÿ¯ˇea˝◊=¯'7FÑ:≈BS5bßY4˛/Y¨OÇbÉ»z¡e-ÏÙıﬂ$ÛÚGﬁ`$È˚qpxÜ:fbô¡Çz,óÇºy$ıc>îÜîÙH™9ˆ`L3”}C’'“Ò[›Sa&P∫éL‹=*NŸÆÙÉ‘e=áì.gÓ≤≤ ÉÖﬂ9Ì±P ìEÃ˙íS∞Z· ªÕ&Ÿçva…Çıè0;Ì=jØÕg˙¥@ søCøóîHîòìÚ7¶ Pyƒ∞ŒÔúJÆwí#œ	› màE°wb∆ê{´^Rö•≠¢—–nìò˜rÕcëA>ÕB9sØ`ÄëŒÀ0g ¿çó€ÂÃ›K∂ƒƒnÅ◊oÜ%YBMÉ,˙`Vê¨hUm‹wâT¥ËëSI¶Ù58-F⁄{∆"nk≤Ã¿Íe*5lK"º¿êt√¬_º›ØNÂúƒq^∂…6®C,Ù°wùx'Yrc¸Kv+^Ñ-—hIF@„±ÃÚi!˜fòû`A#*+è£¿$É£Só,À™Øj‘G∞H/¯$ÏFı©ÚX¸„-…fq6IΩ°€†πÿßLm^Q†H#áz¥¥˜åÜÕKeHXs]ˆXbO)ï›“-#÷"´9ú≥H‹π®SÕdQ0öÖ‰˘Áw∏àcu~;.#!-À(ƒ3X”≤∆Ÿå£[d”M-ê¨¢È·¡g˚l√6 g#m4ãà9ál"Újπ«b‹•ãó±Ë∂t;iƒDßπ”[KTøJ83^„Ú5›Ç≈"(ïa±n©L%zå{,,;Í±£T’b(€Æ≤HÍS«*ß˙"œuKgQKÎÜëXA-U˙?Ï8-∫mƒÉ»Ç©Üªê¨k¡\n[ÆÁ¶ÀA‚H˙Í,‚Á%Î(pzç\ÁÉ@*0¿úÕé?Uv&Ö´2õÁs=ÉÖè‡"Xpd17Ÿ€–ùWc˚\úê≈ÜAÁ$/ö:óÉÂ¬ÿù˘‹PØ¡o™ÀBK)¯:µãπ2ƒUèE∆k îAq¸ˆ∆»9ú%}7“,X”Í•qE]qWÏ“Ÿ¸˜˝ç≤ﬁ0Uw.®©¿%ÁTë™´K€èö»B¢Ü˚ÚXeê∏îËKOØ¯^`(A|çÆLç`qÍº⁄–ÀîË¶J£ÜÊDöA√y˚˘ı«Q ¸õ›ÌÓ:]˚ˆú`∆‰ö€¸!*RcRWJuÎ4Ñ ë'R◊IîÄÑ⁄/QŸsæ”Âê‹∆Æêh}-HHº ˆziÆïL⁄æYj.îÚPe£
r«ﬂ∑ªÁ;◊N⁄&ÄêòÔ˘nwvˆ7≥ﬂ˜çcp|óB«/»ÜFjSüAè √È∆æ∑‡’*'jGGóÇû≈ıAã?≥|õ≠Ñ„†ﬂˆR~0èè/£p]ÄÅüGªlêÖXæ
€Y0ΩﬂÕ`\:ı:Œ“iÎÔtˆÄÖÒ˝+«ıÂC_©ø37˛Û,Zà±·â≈·ãìWNœ,ö¬Ã€W»¬¡á0Ò˝oÿ-u´m„ê…B˙-|HÚÓˆ2Yh—ä3πjÊﬂ∫&Ñ0∂„Zt!dÀ∂¿ªK\J~0:^ØXx‘#Yx^≈]™L{FóDbëWu√/i=ã?iÜœÓ»ëy›ˇ¥è7[FqFøôyŒe¥D)®ö„eì,fO≠†Öòﬁ[,M◊eàŒ9ò—ú3Ñ"∂0µŸ‚˛·U„ãg¯°âùûer>ÊL,fÙ"∆∂e]ò¬Yëha„¯%‹Ù;Í˝éûOèÓ˚¯êÅçèsSô0§n©≈ÏE'˜é#¢Zÿc-<Õá%<—gÄtRÏØä T-pµm≥Ìy’öW∑åyyï¨[ôÄ=Yó«;Ú*¨»ÿbA¢≈QÕ¯í∫ πúb.à-ÇŸ‹pÃåÕMKïd vPsPµÓ†EF9Àì´∞-vW»‚≈ïÜxÃ6a¶;r¬uãUq`r’9æó,|≤8`N\R¨Â¡ÍìA9H,
ú“•öÓ≤˛©nw=ä·4âæ•Bn¯—îÇLÏZjÒÑ˛ºsÕÒã≥á’ÀÓx-<\$ZxòÚ»¬∞ê‘#≠€´•éKgFZL∏.Ù‹9>`1\ÜsÜπsqíBx‡É-D‡0Ω∑.xÆªK|±g—ﬂÅ#.YË¥Äû? æìZ»aì;h±òa-—ıÎçƒ":Ç…À'Ω˙ MÖ>Âvºﬁ•uaj%ªúQT†∫≈‘‚)0ÌfN∆«,≥¡B~4o
cÎØê5≤@=íÖ·’∂πm¥p]”M◊EÎXj!{Êwn!¸¬S°Eà3r»t&´’y≥Î‚rCã4^p~-∂Æ$ÔHHQùìÖì=}ôOÁù„{»"‹l¢EˆáÍ5&\ˆº∆{™´êÉZ•†⁄d¡J⁄CfF©hJQˆƒ_§ˆX–|äÙé¯ÎY(’5–b'ZP›îï X∞ôâÖÓ˝dî÷EF“x—N-‚x·◊
3Œî.Î·„;ó2±Z"^Úm1π_c’4èpﬁøÓ,zgìÿ2 -Œ:l∞¿u1J-^ÂÊÙ&ãôã÷⁄…∫h®ÿ‚ÎbA3)èH∞“x°7•.õèà;ÂFº»gaº +dÅ+Çyª˚Î‚Ú/w†S∞›GSã}rÅ-¨[ÿí9Í·ƒ%|8dÚ qºê ∏ò‹KI}¡yC˙ıa«{,…©°[êfﬂÇÛb0ÎﬂA≈≠-≤µ8vŒ∏5øÒﬁÌŒ¸™/ˆ√á‰∆—á»¢/\Ω2Ÿ‹U|sÍó1ZÏ@	¥ÃûNÈ»Îªo·ı„E >s*NôõX|REÉp-¯´≤ïZ8ÎKv)ZLU‡*’ùd!Í°¨[éóK-≤‡jò—÷-tk–bRTπ~’ô®<Ã</òyy™Un%±ìrÍx∆íıïµv·“3Ω<rÙDúGv€U>kjLEIº˙ı,6G¸¨µÆa™‡ó¸$èH,FµYlC »#•cNe•àSÊ››¬˝c˝◊XP·Õ4ÆÂË‚¥Å!UÙö8Bî»˜#haã∞%g»"©¡C€@ãú] Aà1v›‚w‚MÔîq-æ~0'æ ÀUgÊß;uúùX~r¢Yt∞¨Ij-G-Â≠ß{ıEÈ$ƒıE4«¡4÷k≠˘ntCæxÒ⁄Tk*V€—Î◊C»b’‡˝˙"ÀébÈé~b±ùbg%µpÙñá¢≠vôxEFÃôKˇX‘'¯¯çãTw‚Ω|G\êØ¡93±pÇÇƒZ¬síΩYòÔ†EÊF„¶
ú}∂Hcgœuäoäï±iõ~·‡H0ìï˘ıµÉUŒr/ÊÊ´´sINõ¥Ä÷Îu'K™;±÷ãn™h]@ÙÃıœY?£=ñ˛0´A∂$©Óîq›9L≥	∏†≤0®WOˆÎŒm∞@óë™ÿGŸƒ¢B™MUP|÷ic:åËMu+“Ûâ¸Û+h™®†ökƒªôzªêQz˘ñZSØ⁄ÜUoœe Q°SÄ9˝6Z‡ÔÍ*ª§⁄x]ÒÌ˙R∆Z;eÛÉV√
]e≤÷◊f-#ô]#GÚç®ÔÕ:î5ô,–Ó£_Éc}QW¯˙±÷†Öã·¶kÍ€s–Åé€µ¡ùÀÏGîÍhêó¥ëZ∑ËÔG(—e¥Qå-∂πÔÀä|7∂¿È–aΩ·{ `cì1Z:/íú-·m#é‘Øô>Rˇ¨D^XÓ˝√Ôel}áÙî# {?K:pm‡+nn—√˙yE≤re[hÜÜâ≤p”cﬂBßØ¸‹›,¸˚¥ÄÕ[¥--“.,ÌÒ
ëaﬁîí’ò*Á6Õï\6—‹≥≈Nm¿¬ñ˜≤C÷∑ÏÎcZ`)çUw√ósy	õ[Ú]Ü,<∑rb©o⁄–÷¯®Mè“}3#Ôaëëafh©˜ﬂË`_j±ˇ~GÈßGwwb°ë≈“&ã-◊‘GoΩmx°$ãÓ~∑xÅ…oƒÍ]‘ÛªgìÎür˜;J?=~à≈∞X<HìﬁÖó]Ôrlaê≈Âˇ¶≈ˇNÛ“£Î}ãˇ”¢◊\/yGÄ,‰ø”B«–˜nî√	8	_Éo¬xä8Ê∞ñ}~øÄó‡7{h¬[6¸n¿_·oå±aˆ	ñgÇ=¡¶Ÿ7ÿyˆ=,àƒñŸØÿoŸ´lïΩÀnkñ6¶Ì—>´˝ãˆjÅäÚ∏¬3wÊÄ¿Ó¬¢(Ü˛À√ Y≈jä¶e¡≈æV≥kƒ∫%Ò4m¥H|-=†∞VÀC”®ÿcÏ„È∆È⁄¥ım}µöüI„±6®ÒXë‡ˆŒœ¢ÜSçÁò˛wÔÏÃΩwÓ7wÊüÓ<c ‹sºΩ÷¬Jx6¬Vÿ	·|W°Éqf`}Y"KaCY&«\ÃÕ~ Ê≥≈¨é≠eŸ∂ìµ≤èŸEvï˝áµ≥ ˝®èÁâ¸Iû∆GÚÒ¸y˛"üÕ=¸uﬁƒ∑=¸?ŒœÛ/¯U~[
ózKödïûíFJ„•"iöT.-ë§7•-““1ÈÇt]Ê≤YNê”‰LŸ!Oï_íÀ‰%ÚÎÚFπEﬁ'üîˇ)_îo*LâP(O+9 TÂeeé2OY™¨QﬁQﬁWvaZª_9™SN)Áîœï)óïNï©™jTMj_U√^≤:H¨¶´ÍH5©Ä»ÅO∑OÁáx´R	£·ÃL£†U©
¢•d™Pº¨†Yî]Ñ´™êpA¥'&j$&b #ç§»*1†G#Ù∆z$ç“•!CÎ(j‘YÂ—hg^Q#<ÖÈæB©Ò#tﬂXÍAJ"–É	ÌLÜ#îéÚa"|C` $‹a…"uÓ'≈ >2E\’«!∞√∫«1ÍâëõQnÊ1U5Îõ∫	êÙ∂–ı3	ó¬i$‚H?Éë
√«9"Qh"àË$aåÍp0‚¨Ö(!uä∞@ù~PGµbHH‡v‡Îˆ[ú-ÒuÚËüı∫AE≠$>1G˚ø°ÄãWœ∑íÑ«~;ä·æŒm˜A—ìmMGŸ‚nÖül8êÒ≠(ÿ´‚Ó ·P˜Ö¢ˇ]€k∂{áuNî®–QélXø·¿‡=Ö´*jâu’“S'=d≈3-:oÆ©˚ıàÌÛ∂wD|˝ª≥{	18è~_°+·oËYY
ümc:JŸ≤DÒà„ßÁ˝#S®?Ç∫Ú∂EiÓ#IÒÓÉˇ~!ou9≤qJ|If»å¨|˚∂‰∫\„…yU%Õ?Û6ŸF^Îâ…¥∞ıœ»õ≠,M6Ì>)úÁÊ&{~ŸßZ%ì
6^¸Ù{ÂmÛNõßUÕŒ"$Qsƒ◊/éæêÊ>q\†lõ™\N“*7˘Wó^∑ΩUΩ±¿∞rlrS~ﬁVGe¨∑è&≥äﬂ.Ÿﬂí3&„‰•“•'¢S‘ÒÌá:jª6·JÙ–+s!ú)∑Ã5›∏ÿQôøyÎÏ)§n·¢gØ5∑?íV<ueº{ˇªMYõˇ˙Ï·ºÍ˘Ó∑w√üœèﬁP†÷_JÆ˘A^Umeùe7∆≤¢˘ÖÇéıRINÈ;ì?TS'≠µ™‰∞≈Á~øWÖ¸ê_ΩtQjó‹Œ⁄¸œÌÃ≠8".∑¥Ü§πœ±Dù˘oô$Ø>∑81Î:ç,0oSÎsÏ5Êº™ƒJouıD©/ŒIyØ…‹¨£D√Ë∏c_ñ˚nüµe√XÅè˜ç+{^†T&WX*π]NƒXæ™_l4!ä>cuÖ√3ç;kVımR∑oˇc†am˚⁄∂3Ôœ˚À°Á⁄YHfô÷‘$ãk∏≠r≈§Ùï¥qÆ±“b¨UyÊïõÃÓ7 }ÿ–∆/÷∑·∫úièõÀÌ˙∫X"Àœ&‡∫‡åÈo2ÿåˇ˚≈◊0˚∂ûLUÕ£ve\µX†yÆÀùçCà9∏OÑ£à≥˙õ,ö)Ó÷§ƒDOÍ—tscOî"¸ÌºB∆ﬁEa¶Â‰nÇwEGúè◊ï{∑˛RÊ˚í~8£√F˘y¿wå∞◊J⁄+<:àÓoΩ[MbIÜOíp◊Z… 2ø«Oë·‰«$ãå"πd<…√|k
yéºÄSÂ&/íRÃºÊê◊»"RIj»rÃΩVìµ‰-“D˛@Z0€EˆíC‰(9ÅyÿYrÅ\$ˇ&◊I;È†ÑÇ8´Òåà¶}içßI4Ö~ü°√ËöAÌ4áé£Èd:Ö“È¥Ññ“WËZNb÷VE”∫Ï;†z˙∫ä6“µt=ÊÅõ®s¡?—]t?=L?§ü–3Ù3Ã/”´Ùmß_	œºp0C4<Üôb2§¬`á\òÄ9£
a:ÃÄYò;ñ¡Ã´a9¨Ä5∞Nœ"7Å¸∞ˆ`.yé√Gp>ÉK–◊‡+∏Ìp:!¿(còcÜ≤pÃ3#YÎ√˙±X«,,û%±«Ÿ@ˆ“ `=3Ñn	<T>√åJYp`(-cz)AbAdÆ˜ìªàâöÇ}d]¶&è∫W—KX†Öå˝U›NxêÉ~y∞≈ÓHÓ%Ù!{Å.y®ø		øLÈ"=≥ëuÊAlƒe›5{vE£∞ΩWW_˘‘±Ç∂*H\
JÖIgé‘5K≤^”ôs}M@í%—_±>¢:∆qˇJÅÄMë%.`´fÙARé€gõË‘ˆ∫,©÷MÕ®h>‚Öók˛@¿·‰±íÀ'ı˜±$’«ìŒ›Oy.’:∆·‘¸T…∂›fŸQ8…âU—B1 ≥Ì©~¢X«¯âÏpæKÈróü™¸ƒ˛ÿ6¸Ã∞©Ö®V≠öñ=”Ó£Eÿ±¢ ≈ÇµP´6
°FÂ9\öWÛÊ∏Ω⁄(m∆47LˇGE±◊ı$qís&ñ˘NãœÊäΩS-vπÜ£ü^¬◊˝x]Ë°4Ë°T˜Ä:—(Ã:FÛ±ÁDßœcèıŸÏÆXãEÀˆÌp8};Ï±ó≠¬ÔåˇÃå	é9«ûÇCóú[¨è∏ºﬁÆVÇ≈ÁÒzcΩG∞Ì';z(È)∞~¢{dIŸ~ÍqË*OÇ%V,	ßKL≤QÃ}6é‘‚JGè‘ÿŸàß∆‰€Õü®]ô‚=œ^~êîËµ[xÃ‚4ìO9	‹íõIÖúNä∞]à\ƒ›d
Íù»5ê∏ÜØÿ‰u»?
÷á ?Åúèúéúá<“…:‰rÏ/|8≈?[F†œ|¡àı%˚/€’‚6v∆Â€	=Ùˆ–≤MC(!]L±$[ûÒ!,í≠?ñmyÙ$Ω'=ñRY≤,[íˇåÌÒ:,KË°á–CiZJ(•,=î≤áÌ“S)›C∫Ù “Ûz)Å.!ÑRò~ûÃ¬≤‘Û˜Ùﬁ˜ˇ˚ûﬁ”'Ã/r?g~πßáf{¯ÛΩU¯Ä…ˆvØ‰‹¸#Ê··sÊmò◊ã¡n»|ÎÄª–äwòÊ˛û/>}ˇÇ˘[˘ßL	Œ ÏÂ@¶òÉ3ø“ï]“'πõ◊û2ã=ˆ„Îò˘-Ë9}?€£p~Ä
ÁÃè
è/^0√Âü0B˛SÊç=
èôR·‰„7L∆oﬂÕk7Å>fÓﬁ`Ê@1Ë(ÁÄ?07@Êv·ÃÎ≈◊÷æ^|ã9Ä/¸¯·°ŒÄè‡.ÿ∏ë/AŒ≈<ÇµØÓcÑgÊ3Ê6å%¿9há˜˚˛≈ﬂÚè.^¬zÊ_+ú_º?î}çrˇaÓÉﬁãÃp1‡àÔ£<ìÚØÅwˆÿÁb˜óvﬁá‹4˜ÿè!?ÁÖ&£_≠˝.»?(˛3◊ÅzúÏÛU|òª{xÉ˘„ﬁŸ¯5∞°C?¿EöˆÄÿo>∏x:ÓÅ/p¿˚‡
wˆ∏ˆ4˜Ê·Û‹Ô!/ÙΩGü”¸®ıìÉÔ\g.ﬁæíõπˇ>ÜZ˜˜∏v+' ’.°3B~æπﬂ˜Œ-àÂº¸‚}8->ªÏ˝/°∏c∂W;Ê+óˇ’Àxa¡Î˛~ÙjÌÊæ¡¸ôÅˆ'«’ÌÈˇ˝.’Ê>Á∏∏¯”iÓrﬂﬁs˚≥Y˙j\¸~îÜ@ﬂ}ÂŸ+æØ]1_Y=Hvo∑ÿÙúdÉâèbâ¡Ñb§—Ö?E∂ÕgìlZjƒµ∏›Ø§#ø≤û∂v√Q'—õT¡öZ*∫—]F⁄†“ØÃ¨òX·L±l∑€oàz∂ácﬂQv	ëÊKX„X_´rèNg≠≥ﬁI”3F“)bç∞“iËp´åV∂ûê	Ìó„EYa≤íÃ	*á”≈©∞mV,76ªDîãb8LÙ„∆j»´»÷ñ±ß¢Å%o8sgô,∏(¡GX›öë£F&Øgó÷=∂µQá≠e◊ùH“0’9nú¶H4ƒi“¥õ∂<∆cWıêÿË÷¯’ô©∑àÜÁ±aUGÏ“‰TEj‚õ·<iâ±h;∆–nHÚ…Ä\"'`;Xé≥éfÆã%'FotDœm≠ö¢(√ûeR”2Â±‹\4ü¯¸h<÷p9Jfßæ∫ÆÇ€)∑ŸPü-x›sd±ﬂ9>3eçˆ':‚=≠nä[Êñû@ù^ù¥•i¨nóÿ©KÉwÇ& ±;ü%ÿô©æ£˛Ñ&ôº,—Q¬ı¬Ód≥÷;;Õï˚¬ÿÏUgöYª¡4â≥ÖÉë£’˚hÜí`Ù≈¡b3H‚ ñÌF”‹™õÖÎs1OU®+«IÅ>∑|^}é;%B)µ⁄åV‚éÕo∏æåH¨∂^”L«íS :}U"”µ%n◊Î4’39MOYVÉ‘∑RôR{ÇÊn{Ys‰ÿ„ËdÏÕ÷ÿ©AÍ–ÅU¨Æ	6∆qÊmΩio¥∏Jz‚8€»'z#$ıM /MåUïmò
ıT	∑6ﬁb¢◊GÈÚΩEóÔÿU‹⁄π∏d{7PÉŒÙÀtJŸ∫‡9g≤XÚ¸91›¥EXΩÌ7Õ§NOÂÕPÈÓ™3ﬁ™fKÇ∫ñK]K›32@UÂ|lª:™°™¥à;q€ßﬁ™5neR{ö	7ävâº6Y∂É„£à]Æ~9
H	ßÛ∞j&(òTçê§ﬂ„≈«°ü∞JÉéá+y€]q–;â≈EóÜQE]b^ÀúÎanÓU⁄´@•„æ+ÎÕHqD‘Ê‚≤+«∫öÓzÌäÈ∆n⁄é|åﬁh9¨Tœd©Ñ:!OZRúbNFjèáf¥'ÓŸÛ∏”'™ïàMW3Y√„óﬁ jF≥ ä[eiÜ˚∑5ÔÑôÇ1©π.‘ô◊2S-hñ¨¬ï#YXD‚qÂdƒVà£j()7FÎÂ†≠Ù˙ìQ◊rËj{ÍèÇ
∫¨“¥±
µt©u>dg[¨÷Y/˚ö4Ù¸…lÂêx•ÿßu…ÓJfEqmôﬂiàm›2ÁÍ∆‰¥3¿=©üÙ(“CápÒjBŸQ∏6‚ …¬≤J‹Ö◊ñX^J•6Æt]úÿ<B}®k√¡8√Í†È®afµêÚ∆ñ&ÅﬂZ¥™çæ •≠‡ È1;bë4q+µ,Ãf˝4ïtS8‰§5´∫úÑ	≠%ô‡ykÍÜÑŒ˙âäK≠NŸqYNMùÆ¢è˝ñΩ–∑„n˘ƒ•À^êî◊cM°…ëÿù©-≥k+® i€3’A¥Ü∂8r÷à•–%Bóh 
…%ó –YM2e£CàT©Súmtx7ç£Ÿ†·8%Ï—'«â-UXUOwhhöjcËFÿX£ƒ2∞nåàBKsnV8T†º~º8ä#œ•^Ñq«Lå≤l∫]u[Hh0JÒ˙ﬁΩæ˘ÂG?˝›˜ÆÚó{œ¸‰Ÿﬂ˝˚eT’yÜ·ÔpÓÂŸ\PpCA"%1U/îj
ëT(`‹P+ö†•J’@#H‹ÎÆâ
ö&òV@√"à‡“ëjR„4*—‡∆-⁄!Ôyπ„Lú…§”Èdöô‹Œsﬁˇ˚◊Û˝Î=†˛ÌPAî1Œ6˝ÂÊ¨îm„Ûcıˇf·j€ÁŒEIøºA◊U¸enky¡Õ∏Àïì√C=^ﬂ:]◊r4Ò\bè–•é«±÷∫ñ‘í´™†Ìvø›6cÈÀƒzÔå4‘G'oöY¥™lªøS@Ìˆm¶%GO´XÙ˛Ïø∆˜≠Ÿ|ı¬•,è@øŸgõ´-…›ﬂx√∑Ó’g<+∫f,*ª]X∑tOõ[€áá≠ÔÃ∫∏§ÏzfÀlª«÷Ω’∫rñWÊ†©û°’G√>Y≠ºks qWM∆È†uï7c{¨∫ˆ¸9wã^ÀùÁ~›eı§òkK>uæ[ÿ˙¶Õñ∆ ÜYi©zü∆}!{OùéüYøıj±ıΩÃ∞g=}º˛’ΩdóÛ˘√;S›rÆœIõwjq—±4ﬂ3…'ßŸ4fçœÒ‚“ %¶¥ÛÓ◊rá∑˙‹Úq◊5?X∏Ò˙ô›kó◊'ö^w≠
‹õq/€‚Û|ügÇÚÀnå…yæ˛ãÓ+'D˙ÁçzﬂØ‘æ∂iTÈ‰/:~iXh˘QNÛÂ„ñ1√bZØ¥ÏÈy$•Ë¸Kìt~ãwxeOh	Y3—c€ÉÚØM;R≤|√FÇ*RkèèN»k∫Ω•*,:Ó≥‚g®√É˜¨çã/∫9k‡Ï¸ºÜ˜nıŒÆ=õ3}≈Õcy…™YÈ—„Û+O‡oú∑R.≈^¨Ωï*≈Q¢Â9	î¡“W{Ô*≈IÆJΩ‰…	3[∫ ¥'Útì`"Ó‚"fKwÒ˚éE™#
j•=Æ»V ôè™ΩÃñ.≤^í$FF>∂ÿ…´OXÏeÍÕ;»¯ÔX§\ÈÅÎõùwôb”˘èŒ‘aë°Ë•]TEG™ËÜ™XP+§hî≤ù|D∂ëﬂêˇ&í»Ø…˚‰=Ú.yáºM~Eﬁ"[…Ú&yÉWŒÎ‘◊§Y~/zºµò¶U˘í˙*yÖ¸Çl"/ìó»œ…í»œ»Û‰?»O…O»sÚöÙAkÁd b”ˆ1¥N®ÎÕ‘,Qü&Î»SR~@]K÷ê'…˜Ÿ˜øSü èìG…*ÚYI&+»r9$ëËWyg¨£ÌkU §TÏêR&=À@J©î‡ÍÆgä
éÜ≠Ñó˙bæ'KE5u`™Ì∆ú‘„=	÷ÉÃwÄ-±ØÖRÄıxk∂Ÿ/”lZLkiøπ-EµﬁïpË},ìOæCæÕ:ˇ"#¿∑®˜“æá≠Á—íkÆ/WF1¶’ßYTŸ≈r;≈æâ1QÂñﬁ¡÷∂So#∑jÛX∂»≥‡fZ6ëY√¶˛ô\œ6◊1u-f≤*kòg5SWë+9¶Ø3OπW¿éØ–∑lZ≤»ÂÊπ≥S•Ve<≠}œ2ÊX∆q[ Ô…Ñˇ. %ì)ôRçîIG´z¶®†Ê·t,ˆ`ÿ¥‘<¢Y¥’™ï¸πD3◊íŒ€YÃ\ãh˘#ôJ.‰W/0uÆÎl6a(ô“cIÕ¢ <IÊËœcJ2∂mÙì9˙…Ï[íº"É`K‚Ë'±oöEïDñôMŒ"gí3»©‰r29âú(/r≠OdÏEˆsuK∆êø#£…(é‘xÍ»Hr˘<AÜìc;.¢ßcXˇØi˘Wt(ui"GÛkFQè$IìA‰2•UÃ9M'˝I?r˘4l™¯R%áê>‰/d,ËMÌE&üO¥°«[ãyrÜ¢ˆ ›≈(Æ‡ ÃxU‹hÔ©“è˘˚““á∫7ÈjÍú.d/∂›ìπú…dw3‡ùn‚àıxk∂Æ‚oÍÒ÷Zt2ß9q5jZEôvR+kœ’eGK“ñ4í6§5iE$ ¥ƒÓ™
œ(·%*i¡µe¡öˆ?_kj_ág7ûB<’x¢(ÀW+)ﬁ? O~úf˛óø>⁄q+p•¿©ñòé’p˙8∆Öé∂Å£u,ÌP—√°ÿ≠ƒ —àA≥ÓgD∫ÏFnãºŒ<zz"0πz!≈E\úå&WËﬁ“ªØ√’∫ØÙE=˝§ÍÈè`ƒÙuCŒFLÎÅ»Èé†«‘˜ÄÂ)=Œ`Ë°Ç%ÊÌè Xí–¡‹«b±e.ÓAÇmÈË?`ìYÄ`ƒf®mgª±5q–‰¬^ÖC»ào◊æ˛(Ç‡∞>ÀI›“Å˝ì–æYó†ﬂÀIÍ<⁄Z'ñäïﬁB'CÎ.‘=-gÍŒ‘˘vutsÙpstK–I[äÍ⁄v•}≥¡Ó·ù˘ñÉÈR~€œ·ˇ'G∂sæw√»B).x,ÂÍg˘iˇtXì¬ıØ˘ß?Wÿ—dˆ◊‚+Ixºõt1kt≥∂Ñr—<Ø≥Ü≈kΩS[`1ôµvXEöµ˙%≥∂Ñ^6.‹ÍµhÓÙ§9ﬂ¡∂é
#p√	≈YÖ˚—\ôémaÓ3qWY 57†Ôœ˜ﬂ§+kpMÌúQ⁄—5«§ö≠Ó"Ma:ûScRœNµæØ8Z1cÓá+2¥˜Ÿ¯™GÌ˚ΩaUmπìﬁ2˚˛[ ∏vE
endstream
endobj
4 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 125
/Widths [250 0 0 0 0 0 778 0 0 0 0 0 250 333 250 278 
500 500 500 500 500 500 500 500 500 500 0 0 0 0 0 0 
921 722 667 667 722 611 0 0 0 0 0 0 0 889 0 722 
556 0 667 556 0 722 0 0 0 0 0 0 0 0 0 0 
0 444 500 444 500 444 333 500 500 278 0 500 278 778 500 500 
500 500 333 389 278 500 0 722 0 0 0 480 200 480 ]
/Encoding /WinAnsiEncoding
/BaseFont /Times-Roman
/FontDescriptor 113 0 R
>>
endobj
5 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 122
/Widths [278 0 0 0 0 0 0 0 333 333 0 0 278 333 278 278 
0 556 556 556 556 556 556 0 0 556 333 0 0 0 0 0 
0 722 722 722 722 667 611 778 722 278 0 0 611 833 0 778 
667 0 722 667 611 722 0 944 0 0 0 0 0 0 0 0 
0 556 611 556 611 556 333 611 611 278 0 556 278 889 611 611 
611 0 389 556 333 611 556 778 556 556 500 ]
/Encoding /WinAnsiEncoding
/BaseFont /Helvetica-Bold
/FontDescriptor 114 0 R
>>
endobj
6 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 228
/Widths [278 0 355 0 556 889 667 191 333 333 389 584 278 333 278 278 
556 556 556 556 556 556 556 556 556 556 278 278 584 584 584 556 
0 667 667 722 722 667 611 778 722 278 500 667 556 833 722 778 
667 0 722 667 611 722 667 944 0 667 611 278 0 278 0 0 
0 556 556 500 556 556 278 556 556 222 222 500 222 833 556 556 
556 556 333 500 278 556 500 722 500 500 500 0 260 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1000 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 556 ]
/Encoding /WinAnsiEncoding
/BaseFont /Helvetica
/FontDescriptor 115 0 R
>>
endobj
12 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 31
/LastChar 31
/Widths [600 ]
/Encoding /WinAnsiEncoding
/BaseFont /Courier
/FontDescriptor 116 0 R
>>
endobj
13 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 122
/Widths [278 0 0 0 0 0 0 0 0 0 0 0 278 333 278 0 
556 556 0 556 556 0 0 556 556 556 278 0 0 0 0 0 
0 667 0 722 722 667 611 778 722 278 0 0 556 833 0 778 
667 0 722 667 611 722 0 944 0 0 0 0 0 0 0 0 
0 556 556 500 556 556 278 556 556 222 0 500 222 833 556 556 
556 0 333 500 278 556 500 722 0 500 500 ]
/Encoding /WinAnsiEncoding
/BaseFont /Helvetica-Oblique
/FontDescriptor 117 0 R
>>
endobj
29 0 obj
<<
/Type /Font
/Subtype /Type0
/BaseFont /NKAKEF+Symbol
/Encoding /Identity-H
/DescendantFonts [ 121 0 R ]
/ToUnicode 122 0 R
>>
endobj
121 0 obj
<<
/Type /Font
/Subtype /CIDFontType2
/BaseFont /NKAKEF+Symbol
/FontDescriptor 111 0 R
/CIDSystemInfo<<
/Registry (Adobe)
/Ordering (Identity)
/Supplement 0
>>
/DW 1000
/W [
39 [712]
41 42 548
45 [712 823 548 ]
53 [548]
89 [591]
111 [438]
]
>>
endobj
50 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 68
/LastChar 68
/Widths [722 ]
/Encoding /WinAnsiEncoding
/BaseFont /Times-Bold
/FontDescriptor 118 0 R
>>
endobj
69 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 32
/Widths [250 ]
/Encoding /WinAnsiEncoding
/BaseFont /NKALEC+Symbol
/FontDescriptor 119 0 R
>>
endobj
122 0 obj
<<
/Filter /FlateDecode
/Length 276
>>
stream
HâTë…N√0ÜÔyä9Ç8xÈR	êr`mπªˆ$X"éÂ8áæ=Ò8-‚Gﬂ¸≥˘7´õß∆ŸÏ#zèZÎL¿qòÇF8ag	∆Í∏ù∫Wÿ\º?è˚∆µîe¡>gqå·7áÉw¸ÿ{0¨ÎÊ–ZøÊ»~Ú˛{t8TlVø*ˇ¶zñ+ˇ¢á≥Gêƒbô>Ω“îÎJŒÂÆJøm[:Û_/vπÍ‘ÍoäK∂î‚π"2ôD&$‚/ô⁄‘wUs¢’Ü¥ı=—ÊÅ¥«—v…\W≈º¡2K\&ÁERC*‚RQßÌ%;ÎiıdÏ’=Ö0€DÓì…Î˙@~È¬È+~ -(â÷
endstream
endobj
1 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 3 0 R
/Contents 2 0 R
>>
endobj
9 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 11 0 R
/Contents 10 0 R
>>
endobj
14 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 16 0 R
/Contents 15 0 R
>>
endobj
17 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 19 0 R
/Contents 18 0 R
>>
endobj
20 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 22 0 R
/Contents 21 0 R
>>
endobj
23 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 25 0 R
/Contents 24 0 R
>>
endobj
26 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 28 0 R
/Contents 27 0 R
>>
endobj
30 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 32 0 R
/Contents 31 0 R
>>
endobj
33 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 35 0 R
/Contents 34 0 R
>>
endobj
36 0 obj
<<
/Type /Page
/Parent 8 0 R
/Resources 38 0 R
/Contents 37 0 R
>>
endobj
39 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 41 0 R
/Contents 40 0 R
>>
endobj
44 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 46 0 R
/Contents 45 0 R
>>
endobj
47 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 49 0 R
/Contents 48 0 R
>>
endobj
51 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 53 0 R
/Contents 52 0 R
>>
endobj
54 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 56 0 R
/Contents 55 0 R
>>
endobj
57 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 59 0 R
/Contents 58 0 R
>>
endobj
60 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 62 0 R
/Contents 61 0 R
>>
endobj
63 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 65 0 R
/Contents 64 0 R
>>
endobj
66 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 68 0 R
/Contents 67 0 R
>>
endobj
70 0 obj
<<
/Type /Page
/Parent 43 0 R
/Resources 72 0 R
/Contents 71 0 R
>>
endobj
73 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 75 0 R
/Contents 74 0 R
>>
endobj
77 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 79 0 R
/Contents 78 0 R
>>
endobj
80 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 82 0 R
/Contents 81 0 R
>>
endobj
83 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 85 0 R
/Contents 84 0 R
>>
endobj
86 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 88 0 R
/Contents 87 0 R
>>
endobj
89 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 91 0 R
/Contents 90 0 R
>>
endobj
92 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 94 0 R
/Contents 93 0 R
>>
endobj
95 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 97 0 R
/Contents 96 0 R
>>
endobj
98 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 100 0 R
/Contents 99 0 R
>>
endobj
101 0 obj
<<
/Type /Page
/Parent 76 0 R
/Resources 103 0 R
/Contents 102 0 R
>>
endobj
104 0 obj
<<
/Type /Page
/Parent 107 0 R
/Resources 106 0 R
/Contents 105 0 R
>>
endobj
108 0 obj
<<
/Type /Page
/Parent 107 0 R
/Resources 110 0 R
/Contents 109 0 R
>>
endobj
123 0 obj
<<
/S /D
>>
endobj
124 0 obj
<<
/Nums [0 123 0 R ]
>>
endobj
8 0 obj
<<
/Type /Pages
/Kids [1 0 R 9 0 R 14 0 R 17 0 R 20 0 R 23 0 R 26 0 R 30 0 R 33 0 R 36 0 R]
/Count 10
/Parent 42 0 R
>>
endobj
43 0 obj
<<
/Type /Pages
/Kids [39 0 R 44 0 R 47 0 R 51 0 R 54 0 R 57 0 R 60 0 R 63 0 R 66 0 R 70 0 R]
/Count 10
/Parent 42 0 R
>>
endobj
76 0 obj
<<
/Type /Pages
/Kids [73 0 R 77 0 R 80 0 R 83 0 R 86 0 R 89 0 R 92 0 R 95 0 R 98 0 R 101 0 R]
/Count 10
/Parent 42 0 R
>>
endobj
107 0 obj
<<
/Type /Pages
/Kids [104 0 R 108 0 R]
/Count 2
/Parent 42 0 R
>>
endobj
42 0 obj
<<
/Type /Pages
/Kids [8 0 R 43 0 R 76 0 R 107 0 R ]
/Count 32
/MediaBox [0 0 612 792]
>>
endobj
125 0 obj
<<
/CreationDate (D:20200226093537Z00'00')
/ModDate (D:20200226093537Z00'00')
/Producer (PSNormalizer.framework)
>>
endobj
126 0 obj
<<
/Type /Catalog
/Pages 42 0 R
/PageLabels 124 0 R
>>
endobj
xref
0 127
0000000000 65535 f 
0000305107 00000 n 
0000000016 00000 n 
0000006140 00000 n 
0000301713 00000 n 
0000302175 00000 n 
0000302644 00000 n 
0000258492 00000 n 
0000307864 00000 n 
0000305187 00000 n 
0000006257 00000 n 
0000012477 00000 n 
0000303384 00000 n 
0000303549 00000 n 
0000305269 00000 n 
0000012620 00000 n 
0000018550 00000 n 
0000305352 00000 n 
0000018682 00000 n 
0000027022 00000 n 
0000305435 00000 n 
0000027153 00000 n 
0000038423 00000 n 
0000305518 00000 n 
0000038554 00000 n 
0000047402 00000 n 
0000305601 00000 n 
0000047520 00000 n 
0000055977 00000 n 
0000304012 00000 n 
0000305684 00000 n 
0000056108 00000 n 
0000063242 00000 n 
0000305767 00000 n 
0000063386 00000 n 
0000072624 00000 n 
0000305850 00000 n 
0000072755 00000 n 
0000081461 00000 n 
0000305933 00000 n 
0000081594 00000 n 
0000087187 00000 n 
0000308360 00000 n 
0000307999 00000 n 
0000306017 00000 n 
0000087330 00000 n 
0000095508 00000 n 
0000306101 00000 n 
0000095664 00000 n 
0000105780 00000 n 
0000304418 00000 n 
0000306185 00000 n 
0000105937 00000 n 
0000114395 00000 n 
0000306269 00000 n 
0000114551 00000 n 
0000126094 00000 n 
0000306353 00000 n 
0000126225 00000 n 
0000137037 00000 n 
0000306437 00000 n 
0000137181 00000 n 
0000149032 00000 n 
0000306521 00000 n 
0000149175 00000 n 
0000158879 00000 n 
0000306605 00000 n 
0000159022 00000 n 
0000168177 00000 n 
0000304586 00000 n 
0000306689 00000 n 
0000168321 00000 n 
0000177620 00000 n 
0000306773 00000 n 
0000177763 00000 n 
0000185984 00000 n 
0000308137 00000 n 
0000306857 00000 n 
0000186114 00000 n 
0000194378 00000 n 
0000306941 00000 n 
0000194509 00000 n 
0000202920 00000 n 
0000307025 00000 n 
0000203040 00000 n 
0000209926 00000 n 
0000307109 00000 n 
0000210044 00000 n 
0000216553 00000 n 
0000307193 00000 n 
0000216671 00000 n 
0000222906 00000 n 
0000307277 00000 n 
0000223049 00000 n 
0000229833 00000 n 
0000307361 00000 n 
0000229964 00000 n 
0000236040 00000 n 
0000307445 00000 n 
0000236171 00000 n 
0000241059 00000 n 
0000307530 00000 n 
0000241178 00000 n 
0000247998 00000 n 
0000307617 00000 n 
0000248119 00000 n 
0000253302 00000 n 
0000308276 00000 n 
0000307705 00000 n 
0000253434 00000 n 
0000258371 00000 n 
0000258632 00000 n 
0000258824 00000 n 
0000280249 00000 n 
0000280447 00000 n 
0000280654 00000 n 
0000280850 00000 n 
0000281042 00000 n 
0000281248 00000 n 
0000281451 00000 n 
0000281644 00000 n 
0000304157 00000 n 
0000304757 00000 n 
0000307793 00000 n 
0000307822 00000 n 
0000308466 00000 n 
0000308599 00000 n 
trailer
<<
/Size 127
/Root 126 0 R
/Info 125 0 R
/ID [<01dac773fc264cd6e0e3db5d498e1dc3><01dac773fc264cd6e0e3db5d498e1dc3>]
>>
startxref
308671
%%EOF
1 0 obj
<< /Resources 3 0 R /Type /Page /Contents 2 0 R /Rotate 0 /Parent 8 0 R >>
endobj
9 0 obj
<< /Resources 11 0 R /Type /Page /Contents 10 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
14 0 obj
<< /Resources 16 0 R /Type /Page /Contents 15 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
17 0 obj
<< /Resources 19 0 R /Type /Page /Contents 18 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
20 0 obj
<< /Resources 22 0 R /Type /Page /Contents 21 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
23 0 obj
<< /Resources 25 0 R /Type /Page /Contents 24 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
26 0 obj
<< /Resources 28 0 R /Type /Page /Contents 27 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
30 0 obj
<< /Resources 32 0 R /Type /Page /Contents 31 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
33 0 obj
<< /Resources 35 0 R /Type /Page /Contents 34 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
36 0 obj
<< /Resources 38 0 R /Type /Page /Contents 37 0 R /Rotate 0 /Parent 8 0 R
>>
endobj
39 0 obj
<< /Resources 41 0 R /Type /Page /Contents 40 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
44 0 obj
<< /Resources 46 0 R /Type /Page /Contents 45 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
47 0 obj
<< /Resources 49 0 R /Type /Page /Contents 48 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
51 0 obj
<< /Resources 53 0 R /Type /Page /Contents 52 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
54 0 obj
<< /Resources 56 0 R /Type /Page /Contents 55 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
57 0 obj
<< /Resources 59 0 R /Type /Page /Contents 58 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
60 0 obj
<< /Resources 62 0 R /Type /Page /Contents 61 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
63 0 obj
<< /Resources 65 0 R /Type /Page /Contents 64 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
66 0 obj
<< /Resources 68 0 R /Type /Page /Contents 67 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
70 0 obj
<< /Resources 72 0 R /Type /Page /Contents 71 0 R /Rotate 0 /Parent 43 0 R
>>
endobj
73 0 obj
<< /Resources 75 0 R /Type /Page /Contents 74 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
77 0 obj
<< /Resources 79 0 R /Type /Page /Contents 78 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
80 0 obj
<< /Resources 82 0 R /Type /Page /Contents 81 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
83 0 obj
<< /Resources 85 0 R /Type /Page /Contents 84 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
86 0 obj
<< /Resources 88 0 R /Type /Page /Contents 87 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
89 0 obj
<< /Resources 91 0 R /Type /Page /Contents 90 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
92 0 obj
<< /Resources 94 0 R /Type /Page /Contents 93 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
95 0 obj
<< /Resources 97 0 R /Type /Page /Contents 96 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
98 0 obj
<< /Resources 100 0 R /Type /Page /Contents 99 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
101 0 obj
<< /Resources 103 0 R /Type /Page /Contents 102 0 R /Rotate 0 /Parent 76 0 R
>>
endobj
104 0 obj
<< /Resources 106 0 R /Type /Page /Contents 105 0 R /Rotate 0 /Parent 107 0 R
>>
endobj
108 0 obj
<< /Resources 110 0 R /Type /Page /Contents 109 0 R /Rotate 0 /Parent 107 0 R
>>
endobj
125 0 obj
<< /ModDate (D:20200226093555Z00'00') /Producer (macOS Version 10.15.3 \(Build 19D76\) Quartz PDFContext, AppendMode 1.1)
/CreationDate (D:20200226093537Z00'00') >>
endobj
xref
0 2
0000000000 65535 f 
0000311372 00000 n 
9 1
0000311462 00000 n 
14 1
0000311554 00000 n 
17 1
0000311647 00000 n 
20 1
0000311740 00000 n 
23 1
0000311833 00000 n 
26 1
0000311926 00000 n 
30 1
0000312019 00000 n 
33 1
0000312112 00000 n 
36 1
0000312205 00000 n 
39 1
0000312298 00000 n 
44 1
0000312392 00000 n 
47 1
0000312486 00000 n 
51 1
0000312580 00000 n 
54 1
0000312674 00000 n 
57 1
0000312768 00000 n 
60 1
0000312862 00000 n 
63 1
0000312956 00000 n 
66 1
0000313050 00000 n 
70 1
0000313144 00000 n 
73 1
0000313238 00000 n 
77 1
0000313332 00000 n 
80 1
0000313426 00000 n 
83 1
0000313520 00000 n 
86 1
0000313614 00000 n 
89 1
0000313708 00000 n 
92 1
0000313802 00000 n 
95 1
0000313896 00000 n 
98 1
0000313990 00000 n 
101 1
0000314085 00000 n 
104 1
0000314182 00000 n 
108 1
0000314280 00000 n 
125 1
0000314378 00000 n 
trailer
<< /ID [<01DAC773FC264CD6E0E3DB5D498E1DC3><989C765E6C30C463E41B0DD25AB7E274> ] /Root 126 0 R /Size 127 /Prev 308671 /Info 125 0 R >> 
startxref
314560
%%EOF
